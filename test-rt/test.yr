/**
 * This module defines functions to run unittests
 * It cannot be imported
 * @Authors: Emile Cadorel
 * @License: GPLv3
 */

mod test;

import core::duplication;
import core::exception;
import core::typeinfo;

import std::args;
import std::stream, std::io;
import std::collection::map;
import std::collection::vec;
import std::conv;
import std::fs::path;

extern (C) fn printf (_ : &c8, ...);
extern (C) fn _yrt_get_test_code ()-> i32;
extern (C) fn _yrt_set_test_code (i : i32);
extern (C) fn _yrt_force_debug (i : i32);
extern (C) fn _yrt_demangle_symbol_to_slice (data : &c8, len : u64)-> [c8];

/**
 * ================================================================================
 * ================================================================================
 * =========================          TEST RUNNING          =======================
 * ================================================================================
 * ================================================================================
 */

extern (C) static dmut __YRT_TEST_RT_MAP__ : &(&HashMap!{[c8], fn ()-> void});

extern (C) fn _yrt_run_tests (name : &c8, f : fn ()-> void) {
    if (__YRT_TEST_RT_MAP__ is null) {        
        __YRT_TEST_RT_MAP__ = duplication::alloc (alias HashMap!{[c8], fn ()-> void}::new ());
    }

    (*__YRT_TEST_RT_MAP__):.insert (fromStringZ (name), f);
} catch {
    _ : &SegFault => __pragma!panic ();
}


fn runTest (name : [c8], f : fn ()-> void) {
    __pragma!fake_throw (&Exception);
    _yrt_force_debug (1);
    f ();
    _yrt_force_debug (0);
    println ("[SUCCESS] ", name);
} catch {
    x : _ => {
        _yrt_set_test_code (-1i32);
        eprintln ("[FAILURE] In test : ", name);
        let dmut stream = StringStream::new ();
        stream:.write (x);
        eprintln (stream[]);
    }
}

/**
 * ================================================================================
 * ================================================================================
 * =========================          ARGUMENTS          ==========================
 * ================================================================================
 * ================================================================================
 */


struct
| filter : [[c8]] = []
| help : YesNo = YesNo::NO
 -> Arguments;


fn parseArguments (args : [[c8]])-> Arguments? {
    let parse = ArgumentParser!{Arguments}::new ()
        :.info!"filter" (short-> "f", comments-> "list of tests to execute")
        :.info!"help" (short-> "h", comments-> "print this help and exit", isHelp-> true);    

    {
        let ret = parse.parse (args);
        return ret?;
    } catch {
        err : &ArgumentError => {
            eprintln (parse.simpleUsage (cmd-> "usage"));
            eprintln (parse.diagnosis (err));
        }
        _ : &HelpRequired => {
            eprintln (parse.usage (cmd-> "usage"));
            
        }   
    }
    
    (Arguments?)::__err__
}

fn createFilterPathes (filters : [[c8]]) -> [&Path] {
    let dmut res = Vec!{&Path}::new ();
    for i in filters {
        res:.push (Path::new (i, sep-> "::"s8));
    }

    res[]
}

/**
 * ================================================================================
 * ================================================================================
 * =========================            MAIN            ===========================
 * ================================================================================
 * ================================================================================
 */


extern (C) fn _yrt_test_main (opts : [[c8]]) -> i32 {
    match parseArguments (opts) {
        Ok (args : _) => {            
            if (__YRT_TEST_RT_MAP__ !is null) {
                let filters = createFilterPathes (args.filter);
                
                for n, f in *__YRT_TEST_RT_MAP__ {
                    if (args.filter.len != 0us) { // if there are filters
                        let dmg = _yrt_demangle_symbol_to_slice (n.ptr, cast!u64 (n.len));
                        let p = Path::new (dmg, sep-> "::"s8);
                        for fil in filters {
                            if (fil.isPrefix (p)) { // we check that the test is selected
                                runTest (n, f);
                                break {}
                            }
                        }                        
                    } else {
                        runTest (n, f);
                    }
                }
            }
        }
    }

    return _yrt_get_test_code ();
} catch {
    _ : &SegFault => __pragma!panic ();
}
