/**
 * This module implements C binding function for runtime management of reflection.
 * @Authors: Emile Cadorel
 * @License: GPLv3
 */


mod etc::runtime::reflect;

import core::exception;
import core::object;

pub extern (C) def _yrt_mangle_path (name : [c8])-> [c8];

/**
 * Runtime function that creates a class from a typeid (allocates and call the constructor)
 */
pub extern (C) def _yrt_reflect_create_class_from_name_utf32 (c : [c32])-> dmut &Object
    throws &RuntimeError;

/**
 * Runtime function that creates a class from a typeid (allocates but does not call constructors)
 * @warning: 
 * ============= 
 * this is totally unsafe, and must be used with precaution
 * however, it can be really useful for pack unpacking things, such as std::network::packet
 * =============
 */
pub extern (C) def _yrt_reflect_create_class_from_name_no_construct_utf32 (c : [c32])-> dmut &Object
    throws &RuntimeError;

/**
 * Runtime function that creates a class from a typeid (allocates but does not call constructors)
 * @warning: 
 * ============= 
 * this is totally unsafe, and must be used with precaution
 * however, it can be really useful for pack unpacking things, such as std::network::packet
 * =============
 */
pub extern (C) def _yrt_reflect_create_class_from_name_no_construct (c : [c8])-> dmut &Object
    throws &RuntimeError;


/**
 * Runtime function that creates a class from a typeid (allocates and call the constructor)
 */
pub extern (C) def _yrt_reflect_create_class_from_name (c : [c8])-> dmut &Object
    throws &RuntimeError;


pub mod Reflect {T} {
    /**
     * Get a function pointer from a name and the name of the return types and parameters
     */
    pub extern (C) def _yrt_reflect_get_function (func_name : [c8], retType : [c8], paramTypes : [[c8]])-> T
        throws &RuntimeError;

    // /**
    //  * Get a function pointer from a name and the name of the return types and parameters
    //  */
    // pub extern (C) def _yrt_reflect_get_method_utf32 (class_name : [c32], func_name : [c32], retType : [c32], paramTypes : [[c32]])-> T
    //     throws &RuntimeError;

    /**
     * Get a function pointer from a name and the name of the return types and parameters
     */
    pub extern (C) def _yrt_reflect_get_method (class_name : [c8], func_name : [c8], retType : [c8], paramTypes : [[c8]])-> T
        throws &RuntimeError;

    
    /**
     * Get a function pointer from a name and the name of the return types and parameters
     */
    pub extern (C) def _yrt_reflect_get_method_mutable (class_name : [c8], func_name : [c8], retType : [c8], paramTypes : [[c8]])-> T
        throws &RuntimeError;

        /**
     * Get a function pointer from a name and the name of the return types and parameters
     */
    pub extern (C) def _yrt_reflect_get_impl_method (class_name : [c8], func_name : [c8], retType : [c8], paramTypes : [[c8]])-> T
        throws &RuntimeError;
    
    /**
     * Get a function pointer from a name and the name of the return types and parameters
     */
    pub extern (C) def _yrt_reflect_get_impl_method_mutable (class_name : [c8], func_name : [c8], retType : [c8], paramTypes : [[c8]])-> T
        throws &RuntimeError;


}
