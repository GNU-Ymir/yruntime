mod etc::runtime::thread;

/**
 * 
 */
pub struct
| data : [u8 ; 40_u64]
 -> _yrt_thread_mutex_t;

pub struct
| data : [u8 ; 48_u64]
 -> _yrt_thread_cond_t;

pub struct
| data : [u8; 32_u64]
 -> _yrt_thread_barrier_t;

pub struct
| data : [u8; 32_u64]
 -> sem_t;

/**
 * Read data inside a Pipe
 * @params: 
 *    - stream: the pipe
 *    - size: the size to read (in bytes)
 * @return: the data read
 * @warning: this function is blocking until everything is read, or the pipe is closed
 */
pub extern (C) def _yrt_read_pipe (stream : i32, size : usize) -> &(void);

/**
 * Write data inside a Pipe
 * @params: 
 *    - stream: a pip
 *    - data: the data to write
 *    - size: the size (in bytes)
 */
pub extern (C) def _yrt_write_pipe (stream : i32, data : &void, size : usize);

/**
 * Create a new thread that will executed a function
 * @params: 
 *    - attr: the attribute of the thread (see libpthread )
 *    - call: the function to call
 *    - data: the parameters to pass to the function
 * @returns: 
 *    - id: the id of the created thread
 */
pub extern (C) def _yrt_thread_create (id : &usize, attr : &void, func : fn (&void)-> &void, data : &void);

/**
 * Wait for the completion of a thread
 * @params: 
 *    - p: the id of the thread to wait
 * @returns: 
 *    - retval: the return value of the thread
 */
pub extern (C) def _yrt_thread_join (id : usize, retVal : &(&void));

/**
 * Detach a thread from the main thread, but does not kill it
 * @params:
 *    - p: the id of the thread
 */
pub extern (C) def _yrt_thread_detach (id : usize);

/**
 * Kill a thread
 * @params: 
 *    - p: the id of the thread
 */
pub extern (C) def _yrt_thread_cancel (id : usize);

/**
 * Exit the current thread and return a value
 * @params:
 *    - p: the value to return
 */
pub extern (C) def _yrt_thread_exit (val : &void);

/**
 * Create a new mutex
 * @params: 
 *    - data: the data of the mutex (see libpthread)
 * @returns: 
 *    - lock: the id of the lock
 */
pub extern (C) def _yrt_thread_mutex_init (lock : &_yrt_thread_mutex_t, data : &void);

/**
 * Lock a mutex
 * @params: 
 *    - lock: the mutex to lock
 */
pub extern (C) def _yrt_thread_mutex_lock (lock : &_yrt_thread_mutex_t);

/**
 * Unlock a mutex 
 * @params: 
 *    - lock: the mutex to unlock
 */
pub extern (C) def _yrt_thread_mutex_unlock (lock : &_yrt_thread_mutex_t);

/**
 * Init a waitable conditional 
 * @params: 
 *    - data: the data of the condition (see libpthread)
 * @returns: 
 *    - cond: the condition 
 */
pub extern (C) def _yrt_thread_cond_init (id : &_yrt_thread_cond_t, data : &void);

/**
 * Wait for a condition to be triggered
 * @params: 
 *    - cond: the condition
 *    - mutex: the associtated mutex locked while the condition isn't met
 * @info: see libpthread
 */
pub extern (C) def _yrt_thread_cond_wait (id : &_yrt_thread_cond_t, mutex : &_yrt_thread_mutex_t);

/**
 * Trigger a condition 
 * @params: 
 *    - cond: the condition to trigger
 */
pub extern (C) def _yrt_thread_cond_signal (id : &_yrt_thread_cond_t);

/**
 * Initialize a semaphore
 * @params: 
 *    - pshared: the number of signal to emit before the semaphore is triggered
 *    - value: the value of the semaphore (see libpthread)
 * @returns: 
 *    - sem: the semaphore
 */
pub extern (C) def _yrt_thread_sem_init (id : &sem_t, shared : i32, value : i32);

/**
 * Destroy a semaphore
 * @params: 
 *    - sem: the semaphore to destroy
 */
pub extern (C) def _yrt_thread_sem_destroy (id : &sem_t);

/**
 * Wait for a semaphore to be triggered
 * @params: 
 *    - sem: the semaphore
 */
pub extern (C) def _yrt_thread_sem_wait (id : &sem_t);

/**
 * Emit a new entry in the semaphore
 * @params:
 *    - sem: the semaphore to post
 * @info: if the number of post is equal to its value, the semaphore is triggered and wait-ers no longer wait
 */
pub extern (C) def _yrt_thread_sem_post (id : &sem_t);


