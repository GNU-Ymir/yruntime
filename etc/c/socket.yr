mod etc::c::socket;

pub {


    struct
| mut sin_family : u16 = 0u16
| mut sin_port   : u16 = 0u16
| mut sin_addr   : in_addr = in_addr (s_addr -> 0u32)
| mut aux : [u8; 8u32] = [0u8; 8u32]
 -> sockaddr_in;

    struct
| mut s_addr : u32 = 0u32
 -> in_addr;

    extern (C) def htons (i : u16)-> u16;
    extern (C) def htonl (i : u32)-> u32;

    extern (C) def ntohs (i : u16)-> u16;
    extern (C) def ntohl (i : u32)-> u32;

    extern (C) def socket (fam : AddressFamily, sock : SocketType, i : i32)-> i32;
    extern (C) def bind (i : i32, servaddr : &sockaddr_in, size : usize)-> i32; 
    extern (C) def listen (sock : i32, nb : i32)-> i32;
    extern (C) def connect (sock : i32, servaddr : &sockaddr_in, size : u32)-> i32;
    extern (C) def accept (sock : i32, dmut clientaddr : &sockaddr_in, dmut size : &usize)-> i32;
    extern (C) def getsockname (sock : i32, dmut servaddr : &sockaddr_in, dmut size : &usize)-> i32; 

    extern (C) def write (sock : i32, ptr : &(void), size : usize)-> i32;
    extern (C) def read (sock : i32, ptr : &(void), size : usize)-> i32;
    extern (C) def send (sock : i32, ptr : &(void), size : usize, flag : i32)-> i32;
    extern (C) def recv (sock : i32, ptr : &(void), size : usize, flag : i32)-> i32;
    extern (C) def close (sock : i32);

    enum : u32
| SOCK_STREAM	 = 1u32
| SOCK_DGRAM	 = 2u32
| SOCK_RAW	         = 3u32
| SOCK_RDM	         = 4u32
| SOCK_SEQPACKET     = 5u32
| SOCK_PACKET	 = 10u32	
 -> SocketType;

enum : u16
| AF_UNSPEC           = 0u16
| AF_UNIX  	          = 1u16
| AF_INET             = 2u16
| AF_AX25             = 3u16
| AF_IPX              = 4u16
| AF_APPLETALK        = 5u16
| AF_NETROM           = 6u16
| AF_BRIDGE           = 7u16
| AF_AAL5             = 8u16
| AF_X25              = 9u16
| AF_INET6            = 10u16	
| AF_MAX              = 12u16
 -> AddressFamily;

enum
| FD_SETSIZE = 1024u32
 -> FDConsts; 

enum
| O_NONBLOCK = 2048u32 
| MSG_PEEK   = 2u32
 -> SocketFlag;

struct
| padd : [u8 ; 128u32]
 -> fd_set;

enum
| NONE = 0u16
| POLLIN = 1u16
| POLLOUT = 4u16
 -> PollEvent;

struct
| fd : i32
| event : PollEvent
| revents : PollEvent = PollEvent::NONE
 -> pollfd_t;
}

__version LINUX {
    pub {
        extern (C) def _yrt_fd_zero (dmut ensemble : &fd_set)-> void;
        extern (C) def _yrt_fd_isset (sock : i32, ensemble : &fd_set)-> bool;
        extern (C) def _yrt_fd_set (sock : i32, dmut ensemble : &fd_set);

        extern (C) def select (size : u32,  dmut ensemble : &fd_set, i : &(void), j : &(void), k : &(void))-> i32;
        extern (C) def poll (fds : &(pollfd_t), nb : usize, timeout : u32)-> i32;
    }
}

__version WINDOWS {
    pub extern (C) def WSAPoll (fds : &pollfd_t, nb : usize, timeout : u32)-> i32;
    pub aka poll = WSAPoll;
}
    
 

