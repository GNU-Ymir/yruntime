/**
 * This module defines C binding functions to manage files.
 * @Authors: Emile Cadorel
 * @License: GPLv3
 */

mod etc::c::files;

pub enum
| SEEK_SET = 0
| SEEK_CUR = 1
| SEEK_END = 2
 -> SeekWhence;

pub enum
| F_OK = 0
| X_OK = 1
| W_OK = 2
| R_OK = 4
 -> AccessMode;


pub enum
| F_GETFL = 3u32
| F_SETFL = 4u32
 -> FileFlags;

__version WINDOWS {
    pub enum
    | _O_BINARY = 32768
    | _O_TEXT = 16384
     -> PipeMode;
}

/** 
 * this struct is completely arch dependant 
 * In x86_64, mtime seems to be at place 88, and the struct of size 144
 */
pub struct
| padd : [u8 ; 88u32] = [0u8 ; 88u32]
| st_mtime : u64
| padd2 : [u8 ; 48u8] = [0u8 ; 48u8]
 -> stat_t;

pub extern (C) def fopen (filename : &c8, mode : &c8)-> dmut &(void);

pub extern (C) def fclose (handle : dmut &(void));

pub extern (C) def fseek (handle : dmut &(void), pos : u32, cursor : SeekWhence);

pub extern (C) def ftell (handle : &(void))-> u32;

pub extern (C) def fgets (dmut buf : &(c8), len : u32, dmut handle : &(void))-> i32;

pub extern (C) def fread (dmut buf : &(void), blockSize : u32, len : u32, dmut handle : &(void))-> i32;

pub extern (C) def feof (handle : &(void))-> bool;

pub extern (C) def fgetc (dmut handle : &(void))-> u32;

pub extern (C) def fwrite (text : &(void), blockSize : u32, len : u32, dmut handle : &(void));

pub extern (C) def access (name : &c8, mode : AccessMode)-> i32;

pub extern (C) def stat (name : &c8, dmut stat : &stat_t)-> i32;

__version LINUX {
    
    pub extern (C) def fcntl (fd : i32, type : FileFlags, flag : u32)-> u32;

    pub extern (C) def mkdtemp (template : &c8)-> &c8;
   
    pub extern (C) def pipe (streams : &(i32))-> i32;
    
}

__version WINDOWS {
    
    extern (C) def CreateNamedPipeA (name : &c8, dwOpenMode : PipeOpenMode, dwPipeMode : i32, nMaxInstances : i32, nOutBufferSize : i32, nInBufferSize : i32, nDefaultTimeOut: i32, lpSecurityAttributes : &(void))-> &void;

    pub extern (C) def CloseHandle (handle : &void);

    extern (C) def CreateFileA (name : &c8, dwDesiredAccess : i32, dwShareMode : FileSharingMode, lpSecurityAttributes : &void, dwCreationDisposition : FileOpenMode, dwFlagsAndAttributes : FileAttributes, hTemplateFile : &void)-> &void;

    extern (C) def GetCurrentProcessId ()-> i32;

    pub extern (C) def WriteFile (a : &void, c : &c8, len : i32, dmut lpNumberOfBytesWritten : &i32, lpOverlapped : &void)-> i32;

    pub extern (C) def ReadFile (a : &void, c : &c8, len : i32, dmut lpNumberOfBytesRead : &i32, lpOverlapped : &void)-> i32;

    def InterlockedIncrement (ref mut var : u64)-> u64 {
        var += 1u64;
        return var;
    }

    pub enum
    | PIPE_ACCESS_INBOUND = 1
    | PIPE_ACCESS_OUTBOUND = 2
    | PIPE_ACCESS_DUPLEX = 3
     -> PipeOpenMode;

    enum
    | PIPE_TYPE_BYTE = 0
    | PIPE_TYPE_MESSAGE = 4
    | PIPE_READMODE_BYTE = 0
    | PIPE_READMODE_MESSAGE = 2
    | PIPE_WAIT = 0
    | PIPE_NOWAIT = 1
     -> PipeMode2;
    
    enum
    | FILE_SHARE_DELETE = 4
    | FILE_SHARE_READ = 1
    | FILE_SHARE_WRITE = 2
    | NONE = 0
     -> FileSharingMode;

    enum
    | CREATE_ALWAYS = 2
    | CREATE_NEW = 1
    | OPEN_ALWAYS = 4
    | OPEN_EXISTING = 3
    | TRUNCATE_EXISTING = 5
     -> FileOpenMode;
    
    enum
    | FILE_ATTRIBUTE_ARCHIVE = 32
    | FILE_ATTRIBUTE_ENCRYPTED = 16384
    | FILE_ATTRIBUTE_HIDDEN = 2
    | FILE_ATTRIBUTE_OFFLINE = 4096
    | FILE_ATTRIBUTE_NORMAL = 128
    | FILE_ATTRIBUTE_READONLY = 1
    | FILE_ATTRIBUTE_SYSTEM = 4
    | FILE_ATTRIBUTE_TEMPORARY = 256
     -> FileAttributes;

    enum
    | GENERIC_READ = -2147483648
    | GENERIC_WRITE = 1073741824
    | GENERIC_EXECUTE = 536870912
    | GENERIC_ALL = 268435456
     -> FileAccess;

    extern (C) def sprintf (buf : &c8, format : &c8, ...);
    
    static mut pipeSerialNumber = 0u64;
    
    pub def create_pipes ()-> (&void, &void) {        
        let nSize = 4096;
        let mut name : [c8] = ['\u{0}'c8 ; 250u32];
        sprintf (name.ptr, "\\\\.\\Pipe\\RemoteExeAnon.%x80.%x80"s8.ptr, GetCurrentProcessId (), InterlockedIncrement(ref pipeSerialNumber));
                
        let readHandle = CreateNamedPipeA(
	    name.ptr,
	    PipeOpenMode::PIPE_ACCESS_INBOUND,
	    PipeMode2::PIPE_TYPE_MESSAGE | PipeMode2::PIPE_READMODE_BYTE | PipeMode2::PIPE_NOWAIT,
	    1,             // Number of pipes
	    nSize,         // Out buffer size
	    nSize,         // In buffer size
	    50,    // Timeout in ms
	    null
	);
    
        if (readHandle is null) return (null, null);
        
        let writeHandle = CreateFileA(
	    name.ptr,
	    FileAccess::GENERIC_WRITE,
	    FileSharingMode::NONE,                         // No sharing
	    null,
	    FileOpenMode::OPEN_EXISTING,
	    FileAttributes::FILE_ATTRIBUTE_NORMAL,
	    null                    // Template file
	);
    
        if (writeHandle is null) {
	    CloseHandle( readHandle );
	    return (null, null);
        }
        
        return (readHandle, writeHandle);
    }
}
