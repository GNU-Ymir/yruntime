/**
 * This module implements the loading of the symbols in an ELF formatted file.
 * @Authors: Emile Cadorel
 * @License: GPLv3
 */

mod etc::elf;

import std::io;
import std::collection::set;
import std::collection::map;

import core::object, core::exception, core::typeinfo;
import std::conv, std::fs::_, core::reflect;
import std::syntax::tokenizer;

import std::time::_;


__version LINUX {

    extern (C) fn getpid ()-> u32;

    extern (C) fn realpath (name : &c8, buffer : &c8)-> &c8;

    extern (C) fn _yrt_exc_panic_no_trace ();
    
    def EI_MAG0 = 0
    def EI_MAG1 = 1
    def EI_MAG2 = 2
    def EI_MAG3 = 3
    def EI_CLASS = 4
    def EI_NIDENT = 16

    struct
    | e_ident : [c8 ; EI_NIDENT]
    | e_type : u16
    | e_machine : u16
    | e_version : u32
    | e_entry : usize
    | e_phoff : usize    
    | e_shoff : usize
    | e_flags : u32
    | e_ehsize : u16
    | e_phentsize : u16
    | e_phnum : u16
    | e_shentsize : u16
    | e_shnum : u16
    | e_shstrndx : u16
     -> Elf64_Ehdr;
        
    struct
    | sh_name : u32
    | sh_type : u32
    | sh_flags : u32
    | sh_addr : usize
    | sh_offset : usize
    | sh_size : u64
    | sh_link : u32
    | sh_info : u32
    | sh_addralign : u64
    | sh_entsize : u64
     -> Elf64_Shdr; 

    struct
    | st_name : u32
    | st_info : u8
    | st_other : u8
    | st_shndx : u16
    | st_value : u64
    | st_size : u64
     -> Elf64_Sym;
    
    enum
    | SHT_NULL = 0u32
    | SHT_PROGBITS = 1u32
    | SHT_SYMTAB = 2u32
    | SHT_STRTAB = 3u32
    | SHT_RELA = 4u32
    | SHT_HASH = 5u32
    | SHT_DYNAMIC = 6u32
    | SHT_NOTE = 7u32
    | SHT_NOBITS = 8u32
    | SHT_REL = 9u32
    | SHT_SHLIB = 10u32
    | SHT_DYNSYM = 11u32
    | SHT_LOPROC = 1879048192u32
    | SHT_HIPROC = 2147483647u32
    | SHT_LOUSER = 2147483648u32
    | SHT_HIUSER = 2415919103u32
     -> SectionType;

    enum
    | STT_NOTYPE = 0u32
    | STT_OBJECT = 1u32
    | STT_FUNC = 2u32
    | STT_SECTION = 3u32
    | STT_FILE = 4u32
    | STT_LOPROC = 13u32
    | STT_HIPROC = 15u32
    | STB_LOCAL = 0u32
    | STB_GLOBAL = 1u32
    | STB_WEAK = 2u32
    | STB_LOPROC = 13u32
    | STB_HIPROC = 15u32
     -> SymbolInfo;
    
    pub class ELFLoader {

        // The list of elf file that were read
        let dmut _readElf = HashSet!{[c8]}::new ();

        // The page mapping of the program
        let dmut _pageMapping = HashSet!{[c8]}::new ();

        
        pub self () {}
        
        /**
         * Update the elf loading and register the reflect symbols
         * The elf loader is able to read the dynamically loaded libraries
         */
        pub fn update (mut self) {
            self:.listMapFiles ();

            for k in self._pageMapping {
                if (k !in self._readElf) {
                    self:.readElf (k);
                    self._readElf:.insert (k);
                }
            }
        }

        /**
         * Update the elf loading, but for only one file
         */
        pub fn update (mut self, name : [c8]) {
            if name !in self._readElf {
                self:.readElf (name);
                self._readElf:.insert (name);
            }
        }
        
        /**
         * Read an elf file and register the symbols
         */
        fn readElf (mut self, filename : [c8]) {
            with dmut file = File::open (Path::new (filename)) {
                let content = file:.readBytesAll ();
                
                let hdr = cast!{&Elf64_Ehdr} (cast!{&void} (content.ptr));
                if ((*hdr).e_ident [EI_MAG0] != '\u{7f}'c8 ||
                    (*hdr).e_ident [EI_MAG1] != '\u{45}'c8 ||
                    (*hdr).e_ident [EI_MAG2] != '\u{4c}'c8 ||
                    (*hdr).e_ident [EI_MAG3] != '\u{46}'c8 ||
                    (*hdr).e_ident [EI_CLASS] != '\u{2}'c8) {
                    return {}
                }
                
                let shdr = cast!{&Elf64_Shdr} (cast!{&void} (content.ptr + (*hdr).e_shoff));
                
                for i in 0u16 .. (*hdr).e_shnum {
                    let section = (*(shdr + i * sizeof (Elf64_Shdr)));
                    if (section.sh_type == SectionType::SHT_DYNSYM ||
                        section.sh_type == SectionType::SHT_SYMTAB) {
                        let size = cast!usize (section.sh_size) / sizeof (Elf64_Sym);
                        
                        let syms = cast!{&Elf64_Sym} (cast!{&void} (content.ptr + section.sh_offset));
                        let link = (*(shdr + section.sh_link * sizeof (Elf64_Shdr)));
                        let names = cast!{&c8} (cast!{&void} (content.ptr + link.sh_offset));

                        self:.appendSymbols (syms, size, names);
                    }
                }
                
            } catch {
                _ : &FsError => {}
                _ => {
                    _yrt_exc_panic_no_trace ();
                }
            }
        }

        /**
         * Read a symbol section of an elf file
         * @params: 
         *     - syms: the list of symbols
         *     - nb: the number of symbols
         *     - names: the string table 
         *     - offset: the program offset of the symbols
         */
        fn appendSymbols (mut self, syms : &Elf64_Sym, nb : usize, names : &c8) {
            let mut nb_func = 0, mut nb_obj = 0;
            for i in 0us .. nb {
                let sym = (*(syms + (i * sizeof (Elf64_Sym))));
                if (sym.st_info & SymbolInfo::STT_FUNC != 0u32) nb_func += 1;
                if (sym.st_info & SymbolInfo::STT_OBJECT != 0u32) nb_obj += 1;
                
                let name = names + sym.st_name;
                let realName = name.fromStringZ ();                
                if (sym.st_info & SymbolInfo::STT_FUNC != 0u32 && sym.st_value != 0u64) {
                    if (realName.len > 2us && realName[0us .. 2us] == "_Y"s8) {
                        let reflect = ReflectSymbol (type-> ReflectSymbolType::FUNCTION,
                                                     ptr-> cast!usize (sym.st_value),
                                                     name-> realName.ptr,
                                                     size-> cast!usize (sym.st_size));
                        _yrt_reflect_register_symbol (reflect);
                    }
                } else if (sym.st_info & SymbolInfo::STT_OBJECT != 0u32 && sym.st_value != 0us) {
                    if (realName.len > 4us && realName[0us .. 2us] == "_Y"s8) {
                        if (realName[$ - 2us .. $] == "VT"s8) {
                            let reflect = ReflectSymbol (type-> ReflectSymbolType::VTABLE,
                                                         ptr-> cast!usize (sym.st_value),
                                                         name-> realName.ptr,
                                                         size-> cast!usize (sym.st_size));
                            _yrt_reflect_register_symbol (reflect);
                        }
                    }
                }
            }
        } catch {
            err : _ => {
                eprintln (err);
                __pragma!panic ();
            }
        }
        

        /**
         * Read the map file
         */
        fn listMapFiles (mut self) {
            let pid = getpid ();
            let mapFile = "/proc/"s8 ~ pid.(conv::to)![c8] () ~ "/maps"s8;

            with dmut f = File::open (Path::new (mapFile), read-> true) {
                loop {
                    let line = f:.readUntil ("\n"s8);                    
                    if (line == ""s8) break {}
                    else {
                        self:.parseMapping (line);
                    }
                }                
            } catch {
                err : _ => {
                    eprintln (err);
                    __pragma!panic ();
                }                
            }            
        }

        /**
         * Parse a line mapping and register the elf to read
         */
        fn parseMapping (mut self, line : [c8]) {
            import std::algorithm::searching;
            
            let namei = rfind (line, ' 'c8);
            match (namei) {
                Ok (j : _) => {
                    let filename = line [j + 1us .. $ - 1us];
                    
                    if (filename.len > 1us && filename[0] != '['c8) {
                        if (filename !in self._pageMapping) {
                            self._pageMapping:.insert (filename);
                        }
                    }
                }
            }
        } 
    }

}
