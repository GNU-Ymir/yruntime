/**
 * This module implements functions for the management of exception throwing and stacktrace generation.
 * @Authors: Emile Cadorel
 * @License: GPLv3
 */

mod core::exception;
import core::typeinfo;
import std::stream;

extern (C) def _yrt_exc_get_stack_trace ()-> [&(void)];
extern (C) def _yrt_exc_resolve_stack_trace (trc : [&void])-> [c8];


/**
 * Ancestor of all exception types.
 */
@abstract
pub class Exception {

    let trace : [&(void)];

    __version DEBUG_LIB {
        self () with trace = _yrt_exc_get_stack_trace () {
        }
    } else {
        self () with trace = [] {
        }
    }

    impl stream::Streamable {
        
        prot over __stream__streamContent (self, dmut _ : &StringStream) -> bool {
            false            
        }

        pub over toStream (self, dmut stream : &StringStream)-> void {
            stream:.write (self::typeinfo.name):.write(" ("s8);
            self.__stream__streamContent (alias stream);
            stream:.write (')'c8);
            if (self.trace.len != 0us) {
                stream:.write (":\n"s8);
                stream:.write (self.getStackTrace ());
            }
        }
        
    }

    prot def hasTrace (self)-> bool {
        self.trace.len != 0us
    }

    /**
     * @returns: the stacktrace generated when the exception was constructed.
     */
    @final
    pub def getStackTrace (self) -> [c8] {
        __version DEBUG_LIB {
            _yrt_exc_resolve_stack_trace (self.trace)
        } else {
            []
        }
    }

}

/**
 * Exception thrown by the `assert` construction.
 */
pub class AssertError over Exception {
    pub let msg : [c8];

    /**
     * @params: 
     *     - msg: the messages passed to the assertion
     */
    pub self (msg : [c8]) with msg = msg {}

    impl stream::Streamable {
        pub over toStream (self, dmut stream : &StringStream) {
            self::super.toStream (alias stream);
        }
    }
}

/**
 * Exception thrown when an error occurs in the runtime. It does not necessarily means that the problem comes from the runtime, for example `std::reflect` module throws RuntimeError.
 * It just means that exception was generated by code written in the runtime (core file or even maybe in C).
 */
pub class RuntimeError over Exception {
    pub let msg : [c8];

    pub self (msg : [c8]) with msg = msg {}

    impl stream::Streamable {
        pub over toStream (self, dmut stream : &StringStream) {
            self::super.toStream (alias stream);
        }
    }
}

/**
 * Exception thrown when a segmentation fault occurs in the program.
 * It is probably better to kill the program when such an exception is catched.
 */
pub class SegFault over Exception {
    pub self () {}

    impl stream::Streamable {
        pub over toStream (self, dmut stream : &StringStream) {
            self::super.toStream (alias stream);
        }
    }
}

/**
 * Function called by the `assert` construction.
 */
pub def abort (test : bool, msg : [c32])
    throws &AssertError
{
    import std::conv;
    if (!test) {
        throw AssertError::new (msg.to![c8] ())
    }
}

/**
 * Function called by the `assert` construction.
 */
pub def abort (test : bool, msg : [c8])
    throws &AssertError
{
    if (!test)
    throw AssertError::new (msg)
}

/**
 * Function called by the `assert` construction.
 */
pub def abort (test : bool)
    throws &AssertError
{
    if (!test)
        throw AssertError::new (""s8)
}

/**
 * Function called by the runtime handler when a segfault occured.
 */
pub extern (C) def _yrt_throw_seg_fault () -> void
    throws &SegFault
{
    throw SegFault::new ()
}

/**
 * Function called by the runtime handler when a runtime error occured.
 */
pub extern (C) def _yrt_throw_runtime_abort (c : [c8]) -> void
    throws &RuntimeError
{
    throw RuntimeError::new (c);
}
