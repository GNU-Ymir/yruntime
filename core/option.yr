mod core::option;
import std::conv;

/**
 * Transform a potentially unsafe function into a safe one, so we can make function pointer out of unsafe functions.
 * @example: 
 * ================
 * def foo (x : i32)-> void
 *    throws &AssertError
 * {
 *    assert (x < 12);
 * }
 *
 * def bar (x : i32)-> i32
 *    throws &AssertError
 * {
 *    assert (x < 12);
 *    x + 1
 * }
 *
 *
 * let x = toOption!{foo} (12);
 * let y = toOption!{bar} (12);
 *
 * let fptr = &to!Option!{foo}; 
 * let z = fptr (12);
 * }
 * ================
 */
pub def toOption {F : fn (X)-> T, T, X...} (x : X)-> T? {
    F (expand x)?
}

/**
 * Transform a potentially unsafe function into a safe one, so we can make function pointer out of unsafe functions.
 * @example: 
 * ================
 * def foo ()-> void
 *    throws &AssertError
 * {
 *    assert (false);
 * }
 *
 * def bar ()-> i32
 *    throws &AssertError
 * {
 *    assert (true);
 *    12
 * }
 *
 *
 * let x = toOption!{foo} ();
 * let y = toOption!{bar} ();
 *
 * let fptr = &to!Option!{foo}; 
 * let z = fptr ();
 * }
 * ================
 */
pub def toOption {F : fn ()-> T, T} ()-> T? {
    F ()?
}

/**
 * @returns: the value inside the option, or the value passed as parameter
 */
pub def getOr {T} (a : T?, b : T)-> T {
    match a {
        Ok (x : _) => { x }
        _ => { b }
    }
}

/**
 * Unwrap the content of an option type
 * @example: 
 * ==============
 * def foo (i : i32)-> i32
 *     throws &AssertError
 * {
 *     assert (i != 0);
 *     144 / i
 * }
 * 
 * let j = foo (12)?
 * let k = foo (0)?
 * {
 *     println (j.unwrap ()); // prints "12"
 *     let x = j.unwrap () 
 *             + k.unwrap (); // throw an exception
 *     println (x); 
 * } catch {
 *    err : &CastFailure => {
 *          println (err);
 *    }
 * }
 * ==============
 * @throws : &CastFailure, if the option is empty
 */
pub def unwrap {T} (a : T?)-> T
    throws &CastFailure
{
    match a {
        Ok (x : _) => { return x; }
        _ => throw CastFailure::new (void::typeinfo, T::typeinfo);
    }
}


/**
 * Unwrap the content of an option type containing a class type
 * This function, unlike simple unwrap allows to cast the content of the option into the type of an child class
 * @example: 
 * ==================
 * class @abstract A {
 *   prot self () {}
 *   impl Streamable;
 * }
 * 
 * class B over A {
 *   pub self () {}
 *   impl Streamable;
 * }
 *
 * class C over A {
 *   pub self () {}
 *   impl Streamable;
 * }
 *
 * def foo (i : i32) -> (&A)? {
 *     if (i < 10) { (B::new ()?).to!(&A?} () }
 *     else if (i < 20) { (C::new ()?).to!(&A?} () }
 *     else (&A?)::__err__
 * }
 * 
 * let x = foo (1);
 * let y = foo (14);
 * let z = foo (120);
 * {
 *    println (x.unwrap!(&B} ()); // prints "main::B ()"
 *    println (y.unwrap!(&C} ()); // prints "main::C ()"
 *    println (y.unwrap!(&A} ()); // prints "main::C ()"
 *    println (z.unwrap!(&A} ()); // throw an exception
 * } catch {
 *     err : &CastFailure => {
 *         println (err);
 *     }
 *}
 * ==================
 * @throws : &CastFailure, if the option is empty, or the option does not contain a value of type U
 */
pub def if (is!U {J over T}) unwrap {U, T} (a : T?) -> U
    throws &CastFailure
{
    match a {
        Ok (x : U) => {
            return x;
        }
        Ok (z : _) => {
            throw CastFailure::new (typeof (z)::typeinfo, T::typeinfo);
        }
        _ => {
            throw CastFailure::new (void::typeinfo, T::typeinfo);
        }
    }
}
