mod core::option;


/**
 * Transform a potentially unsafe function into a safe one
 * @example: 
 * ================
 * def foo (x : i32)-> void
 *    throws &AssertError
 * {
 *    assert (x < 12);
 * }
 *
 * def bar (x : i32)-> i32
 *    throws &AssertError
 * {
 *    assert (x < 12);
 *    x + 1
 * }
 *
 *
 * let x = toOption!{foo} (12);
 * let y = toOption!{bar} (12);
 * }
 * ================
 */
pub def toOption {F : fn (X)-> T, T, X...} (x : X)-> T? {
    F (expand x)?
}

/**
 * Transform a potentially unsafe function into a safe one
 * @example: 
 * ================
 * def foo ()-> void
 *    throws &AssertError
 * {
 *    assert (false);
 * }
 *
 * def bar ()-> i32
 *    throws &AssertError
 * {
 *    assert (true);
 *    12
 * }
 *
 *
 * let x = toOption!{foo} ();
 * let y = toOption!{bar} ();
 * }
 * ================
 */
pub def toOption {F : fn ()-> T, T} ()-> T? {
    F ()?
}

