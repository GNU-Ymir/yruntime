in searching;

use std::io;
use std::algorithm::searching;

mod all {
    __test {
        let dmut a = copy [1, 2, 3];
        assert (a.all (|x| => { 3 >= x }), "c");
        assert (!a.all (|x| => x > 1), "d");

        let i = 3, j = 1;
        assert (a.all (copy |x| => i >= x), "c");
        assert (!a.all (copy |x| => x > j), "d");
    }

    __test {
        let a = [1, 2, 3];
        assert (a.all (|x| => { 4 > x }), "c");
        assert (!a.all (|x| => x > 1), "d");

        let i = 3, j = 1;
        assert (a.all (copy |x| => i >= x), "c");
        assert (!a.all (copy |x| => x > j), "d");
    }
}

mod any {
    __test {
        let dmut a = copy [1, 2, 3];
        assert (a.any (|x| => 3 >= x), "a");
        assert (a.any (|x| => x > 1), "b");
        assert (!a.any (|x| => x > 4), "c");

        let i = 3, j = 1, k = 4;
        assert (a.any (copy |x| => i >= x), "a");
        assert (a.any (copy |x| => x > j), "b");
        assert (!a.any (copy |x| => x > k), "c");
    }

    __test {
        let a = [1, 2, 3];
        assert (a.any (|x| => 3 >= x), "a");
        assert (a.any (|x| => x > 1), "b");
        assert (!a.any (|x| => x > 4), "c");

        let i = 3, j = 1, k = 4;
        assert (a.any (copy |x| => i >= x), "a");
        assert (a.any (copy |x| => x > j), "b");
        assert (!a.any (copy |x| => x > k), "c");
    }

}

mod find {
    __test {
        let dmut a = copy [1, 2, 1, 3];
        assert (a.find (1) == (0us)?, "a");
        assert (a.rfind (1) == (2us)?, "b");
        assert (a.find (2) == (1us)?, "c");
        assert (a.rfind (2) == (1us)?, "d");

        assert (a.find (4) == none, "e");
        assert (a.rfind (4) == none, "f");
    }

    __test {
        let a = [1, 2, 1, 3];
        assert (a.find (1) == (0us)?, "a");
        assert (a.rfind (1) == (2us)?, "b");
        assert (a.find (2) == (1us)?, "c");
        assert (a.rfind (2) == (1us)?, "d");

        assert (a.find (4) == none, "e");
        assert (a.rfind (4) == none, "f");
    }

    __test {
        let dmut a = copy [1, 2, 1, 3];
        let z = 2;
        assert (a.find (|x| => { x == 1 }) == (0us)?, "a");
        assert (a.rfind (|x| => { x == 1 }) == (2us)?, "b");
        assert (a.find (copy |x| => { x == z }) == (1us)?, "c");
        assert (a.rfind (copy |x| => { x == z }) == (1us)?, "d");

        let y = 4;
        assert (a.find (|x| => { x == 4 }) == none, "e");
        assert (a.rfind (copy |x| => { x == y }) == none, "f");
    }

    __test {
        let a = [1, 2, 1, 3];
        let z = 2;
        assert (a.find (|x| => { x == 1 }) == (0us)?, "a");
        assert (a.rfind (|x| => { x == 1 }) == (2us)?, "b");
        assert (a.find (copy |x| => { x == z }) == (1us)?, "c");
        assert (a.rfind (copy |x| => { x == z }) == (1us)?, "d");

        let y = 4;
        assert (a.find (|x| => { x == 4 }) == none, "e");
        assert (a.rfind (copy |x| => { x == y }) == none, "f");
    }
}

mod findSorted {

    __test {
        let a = copy [i for i in 0 .. 20];

        let z = 5;
        let cmp = copy |x| {
            if (x < z) { -1 }
            else if (x > z) { 1 }
            else { 0 }
        };

        assert (a.findSorted (5) == (5us)?, "a");
        assert (a.findSorted (cmp) == (5us)?, "b");
    }

    __test {
        let a = [i for i in 0 .. 20];

        let z = 5;
        let cmp = copy |x| {
            if (x < z) { -1 }
            else if (x > z) { 1 }
            else { 0 }
        };

        assert (a.findSorted (5) == (5us)?, "a");
        assert (a.findSorted (cmp) == (5us)?, "b");
    }


}


mod counting {

    __test {
        let a = copy [i for i in 0 .. 20];
        assert (a.count (|x| => x > 3) == 16, "a");
        assert (a.count (|x| => { x == 3 }) == 1, "b");
    }

    __test {
        let a = [i for i in 0 .. 20];
        assert (a.count (|x| => x > 3) == 16, "c");
        assert (a.count (|x| => x == 3) == 1, "d");
    }

}

mod findMin {

    __test {
        let a = copy [1, 2, 4, 5, 3, 6];
        assert (a.findMin () == (0us)?);
        assert (a [2 .. $].findMin () == (2us)?);
    }

    __test {
        let a =  [1, 2, 4, 5, 3, 6];
        assert (a.findMin () == 0us);
        assert (a [2 .. $].findMin () == 2us);
    }

}

mod findMax {

    __test {
        let a = copy [1, 2, 4, 5, 3, 6];
        assert (a.findMax () == (5us)?, "a");
        assert (a [2 .. $ - 1].findMax () == (1us)?, "b");
    }

    __test {
        let a =  [1, 2, 4, 5, 3, 6];
        assert (a.findMax () == 5us, "c");
        assert (a [2 .. $ - 1].findMax () == 1us, "d");
    }

}


mod findCmp {
    __test {
        let a = copy [9, 8, 4, 5, 3, 6];
        let index = a.findCmp (|x, y| => { x > y });
        assert (index == 0us?);

        let index2 = a.findCmp (|x, y| => { y > x });
        assert (index2 == 4us?);
    }

    __test {
        let a = [9, 8, 4, 5, 3, 6];
        let index = a.findCmp (|x, y| => { x > y });
        assert (index == 0us);

        let index2 = a.findCmp (|x, y| => { y > x });
        assert (index2 == 4us);
    }
}


mod startEnd {

    __test {
        let a = "Hello World!!", b = "Hello", c = "World!!";

        assert (a.startsWith (b));
        assert (a.endsWith (c));

        assert (!a.startsWith (c));
        assert (!a.endsWith (b));
    }

    __test {
        let a = [1, 2, 3, 4], b = [1, 2], c = [3, 4];

        assert (a.startsWith (b));
        assert (a.endsWith (c));

        assert (!a.startsWith (c));
        assert (!a.endsWith (b));
    }

}
