in searching;

use std::io;
use std::algorithm::searching;

mod all {
    __test {
        let dmut a = copy [1, 2, 3];
        assert (a.all!{|x| => x < 4} (), "a");
        assert (!a.all!{|x| => x > 1} (), "b");

        assert (a.all (|x| => { 3 >= x }), "c");
        assert (!a.all (|x| => x > 1), "d");

        let i = 3, j = 1;
        assert (a.all (copy |x| => i >= x), "c");
        assert (!a.all (copy |x| => x > j), "d");
    }

    __test {
        let a = [1, 2, 3];
        assert (a.all!{|x| => x < 4} (), "a");
        assert (!a.all!{|x| => x > 1} (), "b");

        assert (a.all (|x| => { 4 > x }), "c");
        assert (!a.all (|x| => x > 1), "d");

        let i = 3, j = 1;
        assert (a.all (copy |x| => i >= x), "c");
        assert (!a.all (copy |x| => x > j), "d");
    }
}

mod any {
    __test {
        let dmut a = copy [1, 2, 3];
        assert (a.any!{|x| => 3 >= x} (), "a");
        assert (a.any!{|x| => x > 1} (), "b");
        assert (!a.any!{|x| => x > 4} (), "c");

        assert (a.any (|x| => 3 >= x), "a");
        assert (a.any (|x| => x > 1), "b");
        assert (!a.any (|x| => x > 4), "c");

        let i = 3, j = 1, k = 4;
        assert (a.any (copy |x| => i >= x), "a");
        assert (a.any (copy |x| => x > j), "b");
        assert (!a.any (copy |x| => x > k), "c");
    }

    __test {
        let a = [1, 2, 3];
        assert (a.any!{|x| => 3 >= x} (), "a");
        assert (a.any!{|x| => x > 1} (), "b");
        assert (!a.any!{|x| => x > 4} (), "c");

        assert (a.any (|x| => 3 >= x), "a");
        assert (a.any (|x| => x > 1), "b");
        assert (!a.any (|x| => x > 4), "c");

        let i = 3, j = 1, k = 4;
        assert (a.any (copy |x| => i >= x), "a");
        assert (a.any (copy |x| => x > j), "b");
        assert (!a.any (copy |x| => x > k), "c");
    }

}

mod find {
    __test {
        let dmut a = copy [1, 2, 1, 3];
        assert (a.find (1) == (0us)?, "a");
        assert (a.rfind (1) == (2us)?, "b");
        assert (a.find (2) == (1us)?, "c");
        assert (a.rfind (2) == (1us)?, "d");

        assert (a.find (4) == none, "e");
        assert (a.rfind (4) == none, "f");
    }

    __test {
        let a = [1, 2, 1, 3];
        assert (a.find (1) == (0us)?, "a");
        assert (a.rfind (1) == (2us)?, "b");
        assert (a.find (2) == (1us)?, "c");
        assert (a.rfind (2) == (1us)?, "d");

        assert (a.find (4) == none, "e");
        assert (a.rfind (4) == none, "f");
    }
}
