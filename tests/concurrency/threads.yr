in threads;

use core::concurrency::pipes::_;
use std::io;
use std::concurrency::mail;

fn foo (dmut pipes : &ThreadPipe) -> i32 {
    let msg = pipes:.read![c8] ();
    pipes:.write (msg);

    if pipes:.read!bool () {
        pipes:.write (true);
        return 42;
    }

    0
} catch {
    _ => {
        println ("Failed");
        0
    }
}

fn bar (dmut pipes : &ThreadPipe, dmut box : &MailBox!{i32}) -> i32 {
    if (pipes:.read!bool ()) {
        let x = box:.receive () ;
        println( x );
        assert (x == 12?);
    }

    pipes:.write (true);
    42
} catch {
    _ => {
        println ("Failed");
        pipes:.write (false)?;
        0
    }
}

__test {
    let dmut pipes = copy ThreadPipe ();

    let dmut a = spawn foo (alias pipes);
    pipes:.write ("Hello");
    let msg = pipes:.read![c8] ();

    assert (msg == "Hello");
    pipes:.write (true);
    assert (pipes:.read!bool (), "a");

    assert (a.value == 42);
}

__test {
    let dmut pipes = copy ThreadPipe ();
    let dmut box = copy MailBox!{i32} ();

    let dmut a = spawn bar (alias pipes, alias box);
    box:.send (12);

    pipes:.write (true);
    assert (pipes:.read!bool (), "b");

    assert (a.value == 42);
}
