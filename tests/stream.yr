mod stream;

use std::stream;

class Z {
    let x : i32 = 0;
    pub self (x : i32) with x = x {}
    impl Streamable;
}

__test {
    let dmut str = copy StringStream ();
    str:.write ("Array {\n");
    str:.entabing (); // write "\t" at the beginning of new line from now on
    for i in 0 .. 10 {
        str:.write (i, "\n"); // writes \t i \n
    }

    str:.detabing ();
    str:.write ("}");
    assert (str[] == "Array {\n\t0\n\t1\n\t2\n\t3\n\t4\n\t5\n\t6\n\t7\n\t8\n\t9\n}");
}

__test {
    let dmut str = copy StringStream ();
    let z = copy Z (78);

    str:.write (z);
    assert (str[] == "&(stream::Z)(.x = 78)");
}
