use std::io;

__test {
    println ("Chars ");
    print ('a');
    print ('a'c16);
    print ('a'c32);

    print ("hello");
    print ("hello"s16);
    print ("hello"s32);
    println ();
}

__test {
    println ("Chars ");
    eprint ('a');
    eprint ('a'c16);
    eprint ('a'c32);

    eprint ("hello");
    eprint ("hello"s16);
    eprint ("hello"s32);
    println ();
}


__test {
    println ("UINTS ");
    print (1u8);
    print (1u16);
    print (1u32);
    print (1u64);
    print (1us);

    eprint (1u8);
    eprint (1u16);
    eprint (1u32);
    eprint (1u64);
    eprint (1us);
    println ();
}


__test {
    println ("INTS ");
    print (1i8);
    print (1i16);
    print (1i32);
    print (1i64);
    print (1is);

    eprint (1i8);
    eprint (1i16);
    eprint (1i32);
    eprint (1i64);
    eprint (1is);
    println ();
}


__test {
    println ("FLOATS ");
    print (1.0f);
    print (1.0d);
    print (1.0l);
    print (1.0r);

    eprint (1.0f);
    eprint (1.0d);
    eprint (1.0l);
    eprint (1.0r);

    println ();
}


__test {
    println ("Bools ");
    print (true);
    print (false);

    eprint (true);
    eprint (false);
    println ();
}

__test {
    println ("Slices");
    print (copy [1, 2, 3]);
    print (copy [1.0f, 2.0f, 3.0f]);

    eprint (copy [1, 2, 3]);
    eprint (copy [1.0f, 2.0f, 3.0f]);
    println ();
}

__test {
    println ("Maps ");
    print (copy [1 => 2, 2 => 3]);
    print (copy ["hello" => 2, "bye" => 3]);


    eprint (copy [1 => 2, 2 => 3]);
    eprint (copy ["hello" => 2, "bye" => 3]);
    println ();
}


__test {
    println ("Arrays");
    print ([1, 2, 3]);
    eprint ([1, 2, 3]);

    println ();
}

__test {
    println ("Ranges");
    print (1..8);
    eprint (1..8);

    println ();
}


__test {
    println ("Options");
    print (1?);
    let a : i32? = none;
    print (a);

    let z : void? = { assert (false, "message"); }?;
    print (z);

    let mut f = true;
    let w : void? = { assert (f); }?;
    print (w);
    println ();
}


__test {
    println ("Tuples");
    print ((1, 'a', "r"));
    eprint ((1, 'a', "r"));

    print ((1,));
    eprint ((2,));

    print (());
    eprint (());

    println ();
}

record A {
    let a : i32 = 9;
    pub let b : i32 = 12;
    pub self () {}
}

record B {
    let a : i32 = 9;
    pub let b : i32 = 12;
    pub self () {}

    impl std::stream::Streamable;
}

__test {
    println ("Records");
    let a = A ();
    let b = B ();

    print (a);
    print (b);

    eprint (a);
    eprint (b);

    println ();
}

class X {
    let a : i32 = 9;
    pub let b : i32 = 12;
    pub self () {}
}

class Y {
    let a : i32 = 9;
    pub let b : i32 = 12;
    pub self () {}

    impl std::stream::Streamable;
}

__test {
    println ("Class");
    let a = copy X ();
    let b = copy Y ();

    print (a);
    print (b);

    eprint (a);
    eprint (b);

    println ();
}

entity C {
    let a : i32 = 9;
    pub let b : i32 = 12;
    pub self () {}
}

entity D {
    let a : i32 = 9;
    pub let b : i32 = 12;
    pub self () {}

    impl std::stream::Streamable;
}

__test {
    println ("Entity");
    let a = C ();
    let b = D ();

    print (a);
    print (b);

    eprint (a);
    eprint (b);

    println ();
}


__test {
    println ("Variadics");

    print (1, ' ', (2, 't'), " ", 4, [1, 2]);
    eprint (1, ' ', (2, 't'), " ", 4, [1, 2]);

    println (1, ' ', (2, 't'), " ", 4, [1, 2]);
    eprintln (1, ' ', (2, 't'), " ", 4, [1, 2]);
}
