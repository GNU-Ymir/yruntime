in char;

use std::char;


__test {
    assert (isPunctuation ('!'), "a");
    assert (isPunctuation ('!'c16), "b");
    assert (isPunctuation ('!'c32), "c");

    assert (!isPunctuation ('z'), "d");
    assert (!isPunctuation ('ã‚³'c16), "e");
    assert (!isPunctuation ('ðŸ˜‰'c32), "f");
}

__test {
    assert (isAlpha ('a'), "a");
    assert (isAlpha ('b'c16), "b");
    assert (isAlpha ('c'c32), "c");

    assert (!isAlpha ('9'), "d");
    assert (!isAlpha ('ã‚³'c16), "e");
    assert (!isAlpha ('ðŸ˜‰'c32), "f");
}

__test {
    assert (isLower ('a'), "a");
    assert (isLower ('b'c16), "b");
    assert (isLower ('c'c32), "c");

    assert (!isLower  ('9'), "d");
    assert (!isLower ('ã‚³'c16), "e");
    assert (!isLower ('ðŸ˜‰'c32), "f");
}

__test {
    assert (isUpper ('A'), "a");
    assert (isUpper ('B'c16), "b");
    assert (isUpper ('C'c32), "c");

    assert (!isUpper ('9'), "d");
    assert (!isUpper ('ã‚³'c16), "e");
    assert (!isUpper ('ðŸ˜‰'c32), "f");
}

__test {
    assert (isDigit ('1'), "a");
    assert (isDigit ('2'c16), "b");
    assert (isDigit ('3'c32), "c");

    assert (!isDigit ('a'), "d");
    assert (!isDigit ('ã‚³'c16), "e");
    assert (!isDigit ('ðŸ˜‰'c32), "f");
}

__test {
    assert (isOctalDigit ('1'), "a");
    assert (isOctalDigit ('2'c16), "b");
    assert (isOctalDigit ('3'c32), "c");

    assert (!isOctalDigit ('a'), "d");
    assert (!isOctalDigit ('9'), "d");
    assert (!isOctalDigit ('ã‚³'c16), "e");
    assert (!isOctalDigit ('ðŸ˜‰'c32), "f");
}

__test {
    assert (isHexDigit ('1'), "a");
    assert (isHexDigit ('2'c16), "b");
    assert (isHexDigit ('3'c32), "c");
    assert (isHexDigit ('a'), "d");

    assert (!isHexDigit ('R'), "d");
    assert (!isHexDigit ('ã‚³'c16), "e");
    assert (!isHexDigit ('ðŸ˜‰'c32), "f");
}

__test {
    assert (isWhite (' '), "a");
    assert (isWhite ('\n'c16), "b");
    assert (isWhite ('\r'c32), "c");
    assert (isWhite ('\t'), "d");

    assert (!isWhite ('R'), "d");
    assert (!isWhite ('ã‚³'c16), "e");
    assert (!isWhite ('ðŸ˜‰'c32), "f");
}

__test {
    assert (toLower (' ') == ' ', "a");
    assert (toLower ('a') == 'a', "a");
    assert (toLower ('A') == 'a', "a");
    assert (toLower ('Z') == 'z', "a");

    assert (toLower (' 'c16) == ' 'c16, "a");
    assert (toLower ('a'c16) == 'a'c16, "a");
    assert (toLower ('A'c16) == 'a'c16, "a");
    assert (toLower ('Z'c16) == 'z'c16, "a");
    assert (toLower ('ã‚³'c16) == 'ã‚³'c16, "a");

    assert (toLower (' 'c32) == ' 'c32, "a");
    assert (toLower ('a'c32) == 'a'c32, "a");
    assert (toLower ('A'c32) == 'a'c32, "a");
    assert (toLower ('Z'c32) == 'z'c32, "a");
    assert (toLower ('ã‚³'c32) == 'ã‚³'c32, "a");
    assert (toLower ('ðŸ˜‰'c32) == 'ðŸ˜‰'c32, "f");
}

__test {
    assert (toUpper (' ') == ' ', "a");
    assert (toUpper ('a') == 'A', "a");
    assert (toUpper ('A') == 'A', "a");
    assert (toUpper ('z') == 'Z', "a");

    assert (toUpper (' 'c16) == ' 'c16, "a");
    assert (toUpper ('a'c16) == 'A'c16, "a");
    assert (toUpper ('A'c16) == 'A'c16, "a");
    assert (toUpper ('z'c16) == 'Z'c16, "a");
    assert (toUpper ('ã‚³'c16) == 'ã‚³'c16, "a");

    assert (toUpper (' 'c32) == ' 'c32, "a");
    assert (toUpper ('a'c32) == 'A'c32, "a");
    assert (toUpper ('A'c32) == 'A'c32, "a");
    assert (toUpper ('z'c32) == 'Z'c32, "a");
    assert (toUpper ('ã‚³'c32) == 'ã‚³'c32, "a");
    assert (toUpper ('ðŸ˜‰'c32) == 'ðŸ˜‰'c32, "f");
}
