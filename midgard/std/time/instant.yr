/**
 * This module implements the structure `Instant` and some utility function to encode timestamp.
 * @Authors: Emile Cadorel
 * @License: GPLv3
 * <hr>
 * @example:
 * ```
 * import std::time::_;
 *
 * // Make a timestamp of the system clock
 * let start = instant::now ();
 *
 * // Perform some computation that takes some time
 * some_heavy_computation ();
 *
 * // Make a timestamp of the system clock
 * let end = instant::now ();
 *
 * // Instant can be used to compute a duration
 * println ("Computation took : ", (end - start).to![c8] ());
 *
 * // They are also comparable
 * assert (start <= end);
 * ```
 */

in instant;

use std::stream;
use std::time::dur;

use etc::c::time;


/**
 * Structure representing a nondecreasing clock.
 * This structure can be used to compute durations, between instants.
 */
pub record Instant {

    // number of second since 1st january 1970
    let mut _sec : u64;

    // number of micro seconds
    let mut _usec : u64;

    /**
     * @params:
     *    - sec: the number of seconds since epoch
     *    - usec: the number of micro seconds
     * */
    pub self (sec : u64, usec : u64)
        with _sec = sec
        , _usec = usec
    {}

    /**
     * Create an instant counting the number of seconds and micro seconds since epoch
     * */
    pub self now ()
        with _sec = 0
        , _usec = 0
    {
        let mut tv = etc::c::time::timeval_t (0, 0);
        gettimeofday (alias &tv, null);

        self._sec = tv.tv_sec;
        self._usec = tv.tv_usec;
    }

    /**
     * @returns: the instant 0, timestamp of the 1 january 1970.
     * @example:
     * ```
     * use std::time::instant;
     *
     * let d = Instant::now () - Instant::zero ();
     *
     * // Print the duration since the 1 january 1970
     * println (d);
     * ```
     */
    pub self zero ()
        with _sec = 0
        , _usec = 0
    {}

    /**
     * @returns: Number of second since epoch
     * */
    @field
    pub fn sec (self)-> u64 {
        self._sec
    }

    /**
     * @returns: Number of micro second in the current second
     * */
    @field
    pub fn usec (self)-> u64 {
        self._usec
    }


    /*!
     * ================================================================================
     * ================================================================================
     * ==========================        OPERATIONS       =============================
     * ================================================================================
     * ================================================================================
     */

    /**
     * @returns: the duration between two time instants.
     * @example:
     * ```
     * use std::time::_;
     *
     * let start = Instant::now ();
     * sleep ((2).seconds ());
     *
     * // The duration between the creation of instant start and now
     * let dur_of_sleep = Instant::now () - start;
     *
     * // We slept for 2 seconds so the difference should ne higher than 2 seconds
     * assert (dur_of_sleep >= (2).seconds ());
     * ```
     */
    pub fn opBinary {"-"} (self, right : Instant)-> Duration {
        self.minus (right, negative-> false)
    }

    /**
     * Remove some duration to an instant, to get an instant in the past (or in the future if the duration is negative).
     * @warning: an instant cannot be negative, if the duration is higher than the instant, the function returns the zero instant.
     * @example:
     * ```
     * use std::time::{instant, dur};
     *
     * let p = Instant::now () - (5).seconds ();
     *
     * // p is five seconds in the past
     * assert (p < Instant::now ());
     * ```
     */
    pub fn opBinary {"-"} (self, right : Duration)-> Instant {
        if (right.negative) {
            self.opBinary!{"+"} (Duration (right.sec, right.usec))
        } else {
            if (self.sec < right.sec) {
                Instant (0u64, 0u64)
            } else if (self.usec > right.usec) {
                Instant (self.sec - right.sec, left.usec - right.usec)
            } else {
                if (self.sec == right.sec) {
                    Instant (0u64, 0u64)
                } else {
                    let usec = right.usec - self.usec;
                    if (usec != 0u64) {
                        Instant (self.sec - right.sec - 1u64, (1_000_000u64 - usec))
                    } else {
                        Instant (self.sec - right.sec, 0u64)
                    }
                }
            }
        }
    }


    /**
     * Add some duration to an instant, to get an instant in the future (or the past if the duration is negative).
     * @warning: an instant cannot be negative, if the duration is negative and lower than the instant, the function returns the zero instant.
     * @example:
     * ```
     * use std::time::{instant, dur};
     *
     * // Future instant in 5 seconds from now
     * let f = Instant::now () + (5).seconds ();
     *
     * // f is in the future
     * assert (f > Instant::now ());
     *
     * // Sleep 6 seconds
     * sleep ((6).seconds ());
     *
     * // f is in the past
     * assert (f < Instant::now ());
     * ```
     */
    pub fn opBinary {"+"} (self, right : Duration)-> Instant {
        if (right.negative) {
            self.opBinary!{"+"} (Duration (right.sec, right.usec))
        } else {
            if (self.usec + right.usec > 1_000_000u64) {
                let usec = (self.usec + right.usec) % 1_000_000u64;
                Instant (1u64 + self.sec + right.sec, usec)
            } else {
                Instant (self.sec + right.sec, self.usec + right.usec)
            }
        }
    }

    /**
     * Compare two instant.
     * @example:
     * ```
     * use std::time::_;
     *
     * let start = Instant::now ();
     *
     * // Some useless computation to waste some time
     * for i in 0 .. 1000 {
     *     println (i);
     * }

     * let end = Instant::now ();
     *
     * // Some time pass between the two timestamps, so start is in the past of end
     * assert (start <= end);
     * assert (start == start);
     * ```
     */
    pub fn opCmp (self, right : Instant) -> i32 {
        if (self.sec < right.sec) { -1 }
        else if (self.sec == right.sec) {
            if (self.usec < right.usec) { -1 }
            else if (self.usec > right.usec) { 1 }
            else { 0 }
        }

        else { 1 }
    }

    /*!
     * ================================================================================
     * ================================================================================
     * =========================        MISCELLANEOUS       ===========================
     * ================================================================================
     * ================================================================================
     */


    impl std::stream::Streamable {
        pub over toStream (self, dmut stream : &StringStream) {
            let fst = Instant::zero ();
            let dur = self - fst;

            stream:.write (dur);
        }
    }


    /*!
     * ================================================================================
     * ================================================================================
     * ===========================        PRIVATE       ===============================
     * ================================================================================
     * ================================================================================
     */

    /**
     * Implementation of the computation of the duration between two time instants
     * @params:
     *    - right: the second time instant
     *    - negative: if the result is negative (i.e. recursive non commutative operation)
     * */
    prv fn minus (self, right : Instant, negative : bool)-> Duration {
        if (self.sec < right.sec) {
            return right.minus (self, negative-> true);
        }

        if (self.usec >= right.usec) {
            Duration (negative-> negative, self.sec - right.sec, self.usec - right.usec)
        } else {
            if (self.sec == right.sec) {
                right.minus (self, negative-> true)
            } else {
                let usec = right.usec - self.usec;
                if (usec != 0u64) {
                    Duration (negative-> negative, self.sec - right.sec - 1u64, (1_000_000u64 - usec))
                } else {
                    Duration (negative-> negative, self.sec - right.sec, 0u64)
                }
            }
        }
    } 

}
