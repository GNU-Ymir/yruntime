in searching;

/*!
 * ====================================================================================================
 * ====================================================================================================
 * ======================================          ALL          =======================================
 * ====================================================================================================
 * ====================================================================================================
 */

/**
 * Verify if all elements of a verify the predicate
 * @params:
 *    - a: an slice of elements
 * @templates:
 *    - F: a predicate to verify
 * @example:
 * ===========
 * let a = copy [1, 2, 3];
 * assert (a.all!{|x| => x <= 3}());
 * ===========
 * @complexity: O(a.len)
 */
pub fn all {F : fn (U)-> bool, T of [U], U} (a : T) -> bool {
    for i in a {
        if (!F (i)) return false;
    }
    return true;
}

/**
 * Verify if all elements of a verify the predicate
 * @params:
 *    - a: an slice of elements
 * @templates:
 *    - F: a predicate to verify
 * @example:
 * ===========
 * let a = copy [1, 2, 3];
 * assert (a.all (|x| => x <= 3));
 * ===========
 * @complexity: O(a.len)
 */
pub fn all {T of [U], U} (a : T, F : fn (U)-> bool) -> bool {
    for i in a {
        if (!F (i)) return false;
    }
    return true;
}

/**
 * Verify if any elements of a verify the predicate
 * @params:
 *    - a: an slice of elements
 * @templates:
 *    - F: a predicate to verify
 * @example:
 * ===========
 * let a = copy [1, 2, 3];
 * let z = 3;
 * assert (a.any (copy |x| => x <= z));
 * ===========
 * @complexity: O(a.len)
 */
pub fn all {T of [U], U} (a : T, F : dg (U)-> bool) -> bool {
    for i in a {
        if (!F (i)) return false;
    }
    return true;
}

/**
 * Verify if all elements of a verify the predicate
 * @params:
 *    - a: an array of elements
 * @templates:
 *    - F: a predicate to verify
 * @example:
 * ===========
 * let a = [1, 2, 3];
 * assert (a.all!{|x| => x <= 3}());
 * ===========
 * @complexity: O(a.len)
 */
pub fn if (N > 0) all {F : fn (U)-> bool, T of [U ; N], U, N : usize} (a : T) -> bool {
    for i in a {
        if (!F (i)) return false;
    }
    return true;
}

/**
 * Verify if all elements of a verify the predicate
 * @params:
 *    - a: an array of elements
 * @templates:
 *    - F: a predicate to verify
 * @example:
 * ===========
 * let a = [1, 2, 3];
 * assert (a.all (|x| => x <= 3));
 * ===========
 * @complexity: O(a.len)
 */
pub fn if (N > 0) all {T of [U ; N], U, N : usize} (a : T, F : fn (U)-> bool) -> bool {
    for i in a {
        if (!F (i)) return false;
    }
    return true;
}

/**
 * Verify if any elements of a verify the predicate
 * @params:
 *    - a: an array of elements
 * @templates:
 *    - F: a predicate to verify
 * @example:
 * ===========
 * let a = [1, 2, 3];
 * let z = 3;
 * assert (a.any (copy |x| => x <= z));
 * ===========
 * @complexity: O(a.len)
 */
pub fn if (N > 0) all {T of [U ; N], U, N : usize} (a : T, F : dg (U)-> bool) -> bool {
    for i in a {
        if (!F (i)) return false;
    }
    return true;
}

/*!
 * ====================================================================================================
 * ====================================================================================================
 * ======================================          ANY          =======================================
 * ====================================================================================================
 * ====================================================================================================
 */

/**
 * Verify that at least one element verifies the predicate
 * @params:
 *    - a: a slice of elements
 * @templates:
 *    - F: a predicate to verify
 * @example:
 * ===========
 * let a = copy [1, 2, 3];
 * assert (a.any!{|x| => x == 3}());
 * ===========
 * @complexity: O(a.len)
 */
pub fn any {F : fn (U)-> bool, T of [U], U} (a : T) -> bool {
    for i in a {
        if (F (i)) return true;
    }

    return false;
}

/**
 * Verify that at least one element verifies the predicate
 * @params:
 *    - a: a slice of elements
 * @templates:
 *    - F: a predicate to verify
 * @example:
 * ===========
 * let a = copy [1, 2, 3];
 * assert (a.any (|x| => x == 3));
 * ===========
 * @complexity: O(a.len)
 */
pub fn any {T of [U], U} (a : T, F : fn (U)-> bool) -> bool {
    for i in a {
        if (F (i)) return true;
    }

    return false;
}

/**
 * Verify that at least one element verifies the predicate
 * @params:
 *    - a: a slice of elements
 * @templates:
 *    - F: a predicate to verify
 * @example:
 * ===========
 * let a = copy [1, 2, 3];
 * let z = 3;
 * assert (a.any (copy |x| => x == z));
 * ===========
 * @complexity: O(a.len)
 */
pub fn any {T of [U], U} (a : T, F : dg (U)-> bool) -> bool {
    for i in a {
        if (F (i)) return true;
    }

    return false;
}

/**
 * Verify that at least one element verifies the predicate
 * @params:
 *    - a: an array of elements
 * @templates:
 *    - F: a predicate to verify
 * @example:
 * ===========
 * let a = [1, 2, 3];
 * assert (a.any!{|x| => x == 3}());
 * ===========
 * @complexity: O(a.len)
 */
pub fn if (N > 0) any {F : fn (U)-> bool, T of [U ; N], U, N : usize} (a : T) -> bool {
    for i in a {
        if (F (i)) return true;
    }

    return false;
}

/**
 * Verify that at least one element verifies the predicate
 * @params:
 *    - a: an array of elements
 * @templates:
 *    - F: a predicate to verify
 * @example:
 * ===========
 * let a = [1, 2, 3];
 * assert (a.any (|x| => x == 3));
 * ===========
 * @complexity: O(a.len)
 */
pub fn if (N > 0) any {T of [U ; N], U, N : usize} (a : T, F : fn (U)-> bool) -> bool {
    for i in a {
        if (F (i)) return true;
    }

    return false;
}

/**
 * Verify that at least one element verifies the predicate
 * @params:
 *    - a: an array of elements
 * @templates:
 *    - F: a predicate to verify
 * @example:
 * ===========
 * let a = [1, 2, 3];
 * let z = 3;
 * assert (a.any (copy |x| => x == z));
 * ===========
 * @complexity: O(a.len)
 */
pub fn if (N > 0) any {T of [U ; N], U, N : usize} (a : T, F : dg (U)-> bool) -> bool {
    for i in a {
        if (F (i)) return true;
    }

    return false;
}


/*!
 * ====================================================================================================
 * ====================================================================================================
 * ====================================          FINDING          =====================================
 * ====================================================================================================
 * ====================================================================================================
 */

/**
 * Search an element in a slice
 * @returns: the index of the first element that is equal to 'elem'
 * @params:
 *   - a: the slice to traverse
 *   - elem: the element to find
 * @example:
 * ============
 * let a = copy [1, 2, 3];
 * if let Ok (i) = a.find (1) {
 *    println ("Found 1 at index : ", i);
 *    assert (i == 0us);
 * }
 * ============
 * @complexity: O (a.len)
 */
pub fn find {T of [U], U} (a : T, elem : U)-> (usize)? {
    for i, j in a {
        if j == elem {
            return (i)?;
        }
    }

    none
}

/**
 * Search an element in an array
 * @returns: the index of the first element that is equal to 'elem'
 * @params:
 *   - a: the slice to traverse
 *   - elem: the element to find
 * @example:
 * ============
 * let a = [1, 2, 3];
 * if let Ok (i) = a.find (1) {
 *    println ("Found 1 at index : ", i);
 *    assert (i == 0us);
 * }
 * ============
 * @complexity: O (a.len)
 */
pub fn if (N > 0) find {T of [U ; N], U, N : usize} (a : T, elem : U)-> (usize)? {
    for i, j in a {
        if j == elem {
            return (i)?;
        }
    }

    none
}

/**
 * Search an element in a slice from right to left
 * @returns: the index of the last element that is equal to 'elem'
 * @params:
 *   - a: the slice to traverse
 *   - elem: the element to find
 * @example:
 * ============
 * let a = copy [1, 2, 1, 3];
 * assert (a.rfind (1) == (2us)?);
 * ============
 * @complexity: O (a.len)
 */
pub fn rfind {T of [U], U} (a : T, elem : U)-> (usize)? {
    for i in a.len .. 0us {
        if a [i - 1us] == elem {
            return (i - 1us)?;
        }
    }

    none
}

/**
 * Search an element in an array
 * @returns: the index of the last element that is equal to 'elem'
 * @params:
 *   - a: the slice to traverse
 *   - elem: the element to find
 * @example:
 * ============
 * let a = [1, 2, 1, 3];
 * assert (a.rfind (1) == (2us)?);
 * ============
 * @complexity: O (a.len)
 */
pub fn if (N > 0) rfind {T of [U ; N], U, N : usize} (a : T, elem : U)-> (usize)? {
    for i in N .. 0us {
        if a [i - 1us] == elem {
            return (i - 1us)?;
        }
    }

    none
}
