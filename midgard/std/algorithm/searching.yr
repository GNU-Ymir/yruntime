in searching;

/**
 * Verify if all elements of a verify the predicate
 * @params:
 *    - a: an array of elements
 * @templates:
 *    - F: a predicate to verify
 * @example:
 * ===========
 * let a = [1, 2, 3];
 * assert (a.all!{|x| => x <= 3}());
 * ===========
 * @complexity: O(a.len)
 */
pub fn all {F : fn (U)-> bool, T of [U], U} (a : T) -> bool {
    for i in a {
        if (!F (i)) return false;
    }
    return true;
}

/**
 * Verify if all elements of a verify the predicate
 * @params:
 *    - a: an array of elements
 * @templates:
 *    - F: a predicate to verify
 * @example:
 * ===========
 * let a = [1, 2, 3];
 * assert (a.all (|x| => x <= 3));
 * ===========
 * @complexity: O(a.len)
 */
pub fn all {T of [U], U} (a : T, F : fn (U)-> bool) -> bool {
    for i in a {
        if (!F (i)) return false;
    }
    return true;
}

/**
 * Verify if any elements of a verify the predicate
 * @params:
 *    - a: an array of elements
 * @templates:
 *    - F: a predicate to verify
 * @example:
 * ===========
 * let a = [1, 2, 3];
 * let z = 3;
 * assert (a.any (copy |x| => x <= z));
 * ===========
 * @complexity: O(a.len)
 */
pub fn all {T of [U], U} (a : T, F : dg (U)-> bool) -> bool {
    for i in a {
        if (!F (i)) return false;
    }
    return true;
}


/**
 * Verify that at least one element verifies the predicate
 * @params:
 *    - a: an array of elements
 * @templates:
 *    - F: a predicate to verify
 * @example:
 * ===========
 * let a = [1, 2, 3];
 * assert (a.any!{|x| => x == 3}());
 * ===========
 * @complexity: O(a.len)
 */
pub fn any {F : fn (U)-> bool, T of [U], U} (a : T) -> bool {
    for i in a {
        if (F (i)) return true;
    }

    return false;
}

/**
 * Verify that at least one element verifies the predicate
 * @params:
 *    - a: an array of elements
 * @templates:
 *    - F: a predicate to verify
 * @example:
 * ===========
 * let a = [1, 2, 3];
 * assert (a.any (|x| => x == 3));
 * ===========
 * @complexity: O(a.len)
 */
pub fn any {T of [U], U} (a : T, F : fn (U)-> bool) -> bool {
    for i in a {
        if (F (i)) return true;
    }

    return false;
}

/**
 * Verify that at least one element verifies the predicate
 * @params:
 *    - a: an array of elements
 * @templates:
 *    - F: a predicate to verify
 * @example:
 * ===========
 * let a = [1, 2, 3];
 * let z = 3;
 * assert (a.any (copy |x| => x == z));
 * ===========
 * @complexity: O(a.len)
 */
pub fn any {T of [U], U} (a : T, F : dg (U)-> bool) -> bool {
    for i in a {
        if (F (i)) return true;
    }

    return false;
}
