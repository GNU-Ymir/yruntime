mod std::algorithm::search;
import core::typeinfo;
import core::array, core::exception;
import std::collection::seq;

/**
 * Verify if all elements of a verify the predicate
 * @params: 
 *    - a: an array of elements
 * @templates: 
 *    - F: a predicate to verify 
 * @example: 
 * ===========
 * let a = [1, 2, 3];
 * assert (a.all!{|x| => x <= 3}());
 * ===========
 */
pub def all {F : fn (U)-> bool, T of [U], U} (a : T) -> bool {
    for i in a {
        if (!F (i)) return false;
    }
    return true;
}

/**
 * Verify if all elements of a verify the predicate
 * @params: 
 *    - a: a sequence of elements, iterable on the value to test
 * @assume: the iteration give an option type
 * @templates: 
 *    - F: a predicate to verify 
 * @example: 
 * ===========
 * let a = vec #[1, 2, 3];
 * assert (a.all!{|x| => x <= 3}());
 * ===========
 */
pub def all {F : fn (U)-> bool, T impl Seq!U, U} (a : T) -> bool {
    for i in a {
        match i {
            Ok (x:_) => { if (!F (x)) return false; } 
        }
    }
    return true;
}

/**
 * Verify that at least one element verifies the predicate
 * @params: 
 *    - a: an array of elements
 * @templates: 
 *    - F: a predicate to verify
 * @example: 
 * ============
 * let a = [1, 2, 3];
 * assert (a.any!{|x| => x == 1} ());
 * assert (!a.any!{|x| => x == 4} ());
 * ============
 */
pub def any {F : fn (U)-> bool, T of [U], U} (a : T)-> bool {
    for i in a {
        if (F (i)) return true;
    }
    return false;
}

/**
 * Verify that at least one element verifies the predicate
 * @params: 
 *    - a: a sequence of elements, iteration on the value to test
 * @assume: the iteration give an option type
 * @templates: 
 *    - F: a predicate to verify
 * @complexity: O (n), with n = a.len
 * @example: 
 * ============
 * let a = vec #[1, 2, 3];
 * assert (a.any!{|x| => x == 1} ());
 * assert (!a.any!{|x| => x == 4} ());
 * ============
 */
pub def any {F : fn (U)-> bool, T impl Seq!U, U} (a : T)-> bool {
    for i in a {
        match i {
            Ok (x:_) => { if (F (x)) return true; }
        }
    }
    return false;
}

/**
 * Search an element in a slice with an equality predicate
 * @returns: the index of the first element that is equal to elem according to the predicate
 * @templates: 
 *   - F: a equality function
 * @params: 
 *   - a: the slice to traverse
 *   - elem: the element to find
 * @complexity: O (n), with n = a.len
 * @example: 
 * ============
 * let a = [1, 2, 3];
 * let i = a.find!{|x,y|=> x == y} (1);
 * let res = match i {
 *     Ok (0us) => true
 *     _ => false
 * }
 * assert (res);
 * ============
 */
pub def find {F : fn (U, U)-> bool, T of [U], U} (a : T, elem : U) -> (usize)? {
    for i in 0us .. a.len {
        match F (a [i], elem)? {
            Ok (true) => return (i)?;
        }
    }
    return (usize?)::err;
}

/**
 * Search for an element in a slice
 * @returns: the index of the first element in a that is equal to elem
 * @params: 
 *    - a: a slice to traverse
 *    - elem: the element to search
 * @complexity: O (n), with n = a.len
 * @example: 
 * ============
 * let a = [1, 2, 3];
 * let i = a.find (1);
 * let res = match i {
 *     Ok (0us) => true
 *     _ => false
 * }
 * assert (res);
 * ============
 */
pub def find {T of [U], U} (a : T, elem : U) -> (usize)? {
    for i in 0us .. a.len {
        match (a [i] == elem)? {
            Ok (true) => return (i)?
        }
    }
    return (usize?)::err;
}

/**
 * Search an element in a Seq of with an equality predicate
 * @returns: the index of the first element that is equal to elem according to the predicate
 * @templates: 
 *   - F: a equality function
 * @params: 
 *   - a: the Seq to traverse
 *   - elem: the element to find
 * @complexity: O (n), with n = a.len
 * @assume: the iteration over the sequence is the in the same order as opIndex
 * @example: 
 * ============
 * let a = vec #[1, 2, 3];
 * let i = a.find!{|x,y|=> x == y} (1);
 * let res = match i {
 *     Ok (0us) => true
 *     _ => false
 * }
 * assert (res);
 * ============
 */
pub def find {F : fn (U, U)-> bool, T impl Seq!U, U} (a : T, elem : U) -> (usize)? {
    let dmut i = 0us;
    for z in a { // We do not use opIndex, because it can have very bad complexity compared to collection iteration
        match (z) {
            Ok (x:_) => {
                if (F (x, elem)) return (i)?;
            }
        }
        i += 1us;
    }
    return (usize?)::err;
}

/**
 * Search for an element in a slice
 * @returns: the index of the first element in a that is equal to elem
 * @params: 
 *    - a: a slice to traverse
 *    - elem: the element to search
 * @complexity: O (n), with n = a.len
 * @assume: the iteration over the sequence is the in the same order as opIndex
 * @example: 
 * ============
 * let a = vec #[1, 2, 3];
 * let i = a.find (1);
 * let res = match i {
 *     Ok (0us) => true
 *     _ => false
 * }
 * assert (res);
 * ============
 */
pub def find {T impl Seq!U, U} (a : T, elem : U) -> (us)? {
    let dmut i = 0us;
    for z in a { // We do not use opIndex, because it can have very bad complexity compared to collection iteration
        match (z) {
            Ok (x:_) => {
                if (x == elem) return (i)?;
            }
        }
        i += 1us;
    }
    return (usize?)::err;
}

/**
 * Count the number of element in a slice that verifies the predicates
 * @params: 
 *    - a: the slice to traverse
 * @complexity: O (n), with n = a.len
 * @example: 
 * ============
 * let a = [1, 2, 3];
 * assert (a.count!{|x| => x <= 2} () == 2us);
 * ============
 */
pub def count {F : fn (U)-> bool, T of [U], U} (a : T) -> usize {
    let dmut nb = 0us;
    for i in a {
        if (F (i)) { nb += 1us; }
    }
    return nb;
}

/**
 * Count the number of element in a sequence that verifies the predicates
 * @params: 
 *    - a: the sequence to traverse
 * @complexity: O (n), with n = a.len
 * @example: 
 * ============
 * let a = vec #[1, 2, 3];
 * assert (a.count!{|x| => x <= 2} () == 2us);
 * ============
 */
pub def count {F : fn (U)-> bool, T impl Seq!U, U} (a : T) -> usize {
    let dmut nb = 0us;
    for i in a {
        match i {
            Ok (x:_) => {
                if (F (x)) { nb += 1us; }
            }
        }
    }
    return nb;
}

/**
 * @returns: the index of the minimum element in a slice
 * @templates: 
 *   - F: a function that compare two element and return true if _0 < _1
 * @params: 
 *   - a: the slice to traverse
 * @example: 
 * ===========
 * let a = [2, 1, 9, 2, 3];
 * assert (a.minElement!{|x,y| => x < y} () == 1us);
 * ===========
 * @info: if the slice is empty, the function will return 0
 * @complexity: O (n), with n = a.len
 */
pub def minElement {F : fn (U, U) -> bool, T of [U], U} (a : T) -> usize {
    let mut index = 0us;
    for i in 0us .. a.len {
        match (F (a [i], a [index]))? {
            Ok (true) => {
                index = i;
            }
        }
    }
    return index;
}

/**
 * @returns: the index of the maximum element in a slice
 * @templates: 
 *   - F: a function that compare two element and return true if _0 > _1
 * @params: 
 *   - a: the slice to traverse
 * @example: 
 * ===========
 * let a = [2, 1, 9, 2, 3];
 * assert (a.maxElement!{|x,y| => x < y} () == 1us); // does the same as minElement
 * assert (a.maxElement!{|x,y| => x > y} () == 2us);
 * ===========
 * @info: 
 *   - if the slice is empty, the function will return 0
 *   - this function does exactly the same operation as minElement!{F} (a), it is just weird to have a minElement function that actually find the maximum element
 * @complexity: O (n), with n = a.len
 */
pub def maxElement {F : fn (U, U) -> bool, T of [U], U} (a : T) -> usize {
    let mut index = 0us;
    for i in 0us .. a.len {
        match (F (a [i], a [index]))? {
            Ok (true) => {
                index = i;
            }
        }
    }
    return index;
}


/**
 * @returns: the index of the minimum element in a slice
 * @params: 
 *   - a: the slice to traverse
 * @example: 
 * ===========
 * let a = [2, 1, 9, 2, 3];
 * assert (a.minElement () == 1us);
 * ===========
 * @info: if the slice is empty, the function will return 0
 * @complexity: O (n), with n = a.len
 */
pub def minElement {T of [U], U} (a : T) -> usize {
    let mut index = 0us;
    for i in 0us .. a.len {
        match (a [i] < a [index])? {
            Ok (true) => {
                index = i;
            }
        }
    }
    return index;
}

/**
 * @returns: the index of the maximum element in a slice
 * @params: 
 *   - a: the slice to traverse
 * @example: 
 * ===========
 * let a = [2, 1, 9, 2, 3];
 * assert (a.maxElement () == 2us); // does the same as minElement
 * ===========
 * @info: 
 *   - if the slice is empty, the function will return 0
 * @complexity: O (n), with n = a.len
 */
pub def maxElement {T of [U], U} (a : T) -> usize {
    let mut index = 0us;
    for i in 0us .. a.len {
        match (a [index] < a [i])? {
            Ok (true) => {
                index = i;
            }
        }
    }
    return index;
}


/**
 * @returns: the index of the minimum element in a sequence
 * @templates: 
 *   - F: a function that compare two element and return true if _0 < _1
 * @params: 
 *   - a: the sequence to traverse
 * @example: 
 * ===========
 * let a = vec #[2, 1, 9, 2, 3];
 * assert (a.minElement!{|x,y| => x < y} () == 1us);
 * ===========
 * @info: if the sequence is empty, the function will return 0
 * @complexity: O (n), with n = a.len()
 */
pub def minElement {F : fn (U, U) -> bool, T impl Seq!U, U} (a : T) -> usize {    
    let mut index = 0us;
    let mut current = (U?)::err;
    let mut j = 0us;
    for i in a {
        match (i) {
            Ok (x: _) => {
                match (current) {
                    Ok (y:_) => {
                        if (F (x, y)) {
                            current = i;
                            index = j;
                        }
                    }
                    Err () => {
                        current = i;
                        index = j;
                    }
                }
            }
        }
        j += 1us;
    }
    return index;
}

/**
 * @returns: the index of the minimum element in a sequence
 * @templates: 
 *   - F: a function that compare two element and return true if _0 < _1
 * @params: 
 *   - a: the sequence to traverse
 * @example: 
 * ===========
 * let a = vec #[2, 1, 9, 2, 3];
 * assert (a.minElement!{|x,y| => x < y} () == 1us);
 * ===========
 * @complexity: O (n), with n = a.len()
 * @info: 
 *   - if the sequence is empty, the function will return 0
 *   - this function does exactly the same operation as minElement!(F) (a), it is just weird to have a minElement function that actually find the maximum element
 */
pub def maxElement {F : fn (U, U) -> bool, T impl Seq!U, U} (a : T) -> usize {    
    let mut index = 0us;
    let mut current = (U?)::err;
    let mut j = 0us;
    for i in a {
        match (i) {
            Ok (x: _) => {
                match (current) {
                    Ok (y:_) => {
                        if (F (x, y)) {
                            current = i;
                            index = j;
                        }
                    }
                    Err () => {
                        current = i;
                        index = j;
                    }
                }
            }
        }
        j += 1us;
    }
    return index;
}

/**
 * @returns: the index of the minimum element in a sequence
 * @params: 
 *   - a: the sequence to traverse
 * @example: 
 * ===========
 * let a = vec #[2, 1, 9, 2, 3];
 * assert (a.minElement!{|x,y| => x < y} () == 1us);
 * ===========
 * @info: if the sequence is empty, the function will return 0
 * @complexity: O (n), with n = a.len()
 */
pub def minElement {T impl Seq!U, U} (a : T) -> usize {    
    let mut index = 0us;
    let mut current = (U?)::err;
    let mut j = 0us;
    for i in a {
        match (i) {
            Ok (x: _) => {
                match (current) {
                    Ok (y:_) => {
                        if (x <  y) {
                            current = i;
                            index = j;
                        }
                    }
                    Err () => {
                        current = i;
                        index = j;
                    }
                }
            }
        }
        j += 1us;
    }
    return index;
}

/**
 * @returns: the index of the minimum element in a sequence
 * @params: 
 *   - a: the sequence to traverse
 * @example: 
 * ===========
 * let a = vec #[2, 1, 9, 2, 3];
 * assert (a.minElement!{|x,y| => x < y} () == 1us);
 * ===========
 * @complexity: O (n), with n = a.len()
 * @info: 
 *   - if the sequence is empty, the function will return 0
 */
pub def maxElement {T impl Seq!U, U} (a : T) -> usize {    
    let mut index = 0us;
    let mut current = (U?)::err;
    let mut j = 0us;
    for i in a {
        match (i) {
            Ok (x: _) => {
                match (current) {
                    Ok (y:_) => {
                        if (y < x) {
                            current = i;
                            index = j;
                        }
                    }
                    Err () => {
                        current = i;
                        index = j;
                    }
                }
            }
        }
        j += 1us;
    }
    return index;
}


/**
 * @returns: true iif the ensemble `a` starts with the element `b`
 * @example: 
 * ======================
 * let a = "Hello World!!", b = "Hello";
 * 
 * assert (a.startWith (b));
 * ======================
 * @params: 
 *    - a: a slice
 *    - b: another slice
 * @complexity: O (n), with n = b.len
 */
pub def startWith {T of [U], U} (a : T, b : T)-> bool {
    if (a.len < b.len) return false;
    for i in 0us .. b.len {
        if a [i] != b [i] return false;
    }

    return true;
} catch {
    _ => __pragma!panic ();
}

/**
 * @returns: true iif the ensemble `a` ends with the element `b`
 * @example: 
 * ======================
 * let a = "Hello World!!", b = "World!!";
 * 
 * assert (a.endWith (b));
 * ======================
 * @params: 
 *    - a: a slice
 *    - b: another slice
 * @complexity: O (n), with n = b.len
 */
pub def endWith {T of [U], U} (a : T, b : T)-> bool {
    if (a.len < b.len) return false;
    let padding = a.len - b.len;
    for i in 0us .. b.len {
        if a [padding + i] != b [i] return false;
    }

    return true;
} catch {
    _ => __pragma!panic ();
}
