in env;

use etc;

@final
pub class EnvironmentError over core::exception::Exception {

    let _msg : [c8];

    pub self (msg : [c8])
        with _msg = msg
    {}

    @field
    pub fn msg (self)-> [c8] {
        self._msg
    }

}


/**
 * @returns: the list of arguments passed to the program.
 * @info: this arguments are traditionnaly passed to the main function
 * @example:
 * ===
 * import std::env;
 *
 *
 * fn main (args : [[c8]])
 *     throws &AssertError
 * {
 *    assert (env::args () == args);
 * }
 * ===
 */
pub fn args () -> [[c8]] {
    etc::runtime::env::_yrt_get_main_args ()
}

// /**
//  * @returns: the current working directory path
//  * @info:
//  * the path is empty if the current directory is invalid, possible explanation :
//  *   - not sufficiant rights to access current working dir
//  *   - the current working dir does not exists
//  */
// pub fn currentDir () -> &Path {
//     Path::new (_yrt_get_current_dir ())
// }

// /**
//  * Change the working directory
//  * @params:
//  *    - path: the path of the new current dir (relative to actual current dir, or an absolute path)
//  * @throws:
//  *   - &EnvironmentError: if the operation failed (e.g. due to permission problems, directory does not exists, etc.)
//  * @example:
//  * ===
//  * import std::fs::path; // for Path
//  * import std::env;
//  *
//  * setCurrentDir (Path::new ("/tmp/"));
//  * assert (currentDir ().toStr () == "/tmp");
//  * ===
//  */
// pub fn setCurrentDir (path : &Path)
//     throws &EnvironmentError
// {
//     if (chdir (toStringZ (path.toStr ())) != 0) {
//         throw EnvironmentError::new ("failed to change working directory to : " ~ path.toStr ());
//     }
// }

/**
 * @returns: the content of an environment variable
 * @example:
 * ===
 * import std::io; // for println
 * import std::env;
 *
 * // Retreive the environment variable HOME
 * let home_dir = getVar ("HOME");
 *
 * // For the user alice
 * println (home_dir); // /home/alice
 * ===
 */
@unsafe
pub fn getVar (name : [c8])-> [c8] {
    let content = etc::c::env::getenv (std::conv::toStringZ (name));
    if (content == null) {
        ""
    } else {
        copy std::conv::fromStringZ (content)
    }
}

/**
 * Set the value of an environment variable.
 * @params:
 *    - name: the name of the variable to set
 *    - value: the value to associate to the environment variable
 * @example:
 * ===
 * import std::io; // for println
 * import std::env;
 *
 * env::setVar ("KEY", "VALUE");
 * assert (env::getVar ("KEY") == "VALUE");
 * ===
 */
pub fn setVar (name : [c8], value : [c8]) {
    etc::c::env::setenv (std::conv::toStringZ (name), std::conv::toStringZ (value), 1);
}

/**
 * Remove an environment variable
 * @params:
 *    - name: the name of the variable to remove
 * @example:
 * ===
 * import std::io; // for println
 * import std::env;
 *
 * env::setVar ("KEY", "VALUE");
 * assert (env::getVar ("KEY") == "VALUE");
 *
 * env::removeVar ("KEY");
 * assert (env::getVar ("KEY") == "" && !env::isVarSet ("KEY"));
 * ===
 */
pub fn removeVar (name : [c8]) {
    etc::c::env::unsetenv (std::conv::toStringZ (name));
}

/**
 * @returns: `true` if the environment variable `name` is set
 * @example:
 * ===
 * import std::io; // for println
 * import std::env;
 *
 * env::setVar ("KEY", "VALUE");
 * assert (env::isVarSet ("KEY"));
 *
 * env::removeVar ("KEY");
 * assert (!env::isVarSet ("KEY"));
 * ===
 */
pub fn isVarSet (name : [c8])-> bool {
    let content = etc::c::env::getenv (std::conv::toStringZ (name));
    content == null
}

/**
 * @returns: the name of the current user
 * @example:
 * ===
 * import std::io;  // for println
 * import std::env;
 *
 * // For the user alice
 * println (whoami ()); // alice
 * ===
 */
@unsafe
pub fn whoami () -> [c8] {
    getVar ("USER")
}
