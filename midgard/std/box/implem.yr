in implem;

@abstract
pub class IBox {T, mutable : bool} {

    cte if mutable {
        let dmut _value : T;
        pub self (dmut v : T)
            with _value = alias v
        {}

        @final
        pub fn set (mut self, dmut v : T) {
            self._value = alias v;
        }

        @{field, final}
        pub fn value (mut self)-> dmut T {
            alias self._value
        }
    } else {
        let mut _value : T;
        pub self (v : T)
            with _value = v
        {}


        @final
        pub fn set (mut self, v : T) {
            self._value = v;
        }

    }

    @{field, final}
    pub fn value (self)-> T {
        self._value
    }

    impl std::stream::Streamable {
        pub over toStream (self, dmut stream : &std::stream::StringStream) {
            stream:.write ("std::box::Box!{", T::typeid, "}(");
            cte if __pragma!compile ({stream:.write (self._value);}) {
                stream:.write (self._value);
            }
            stream:.write (')');
        }
    }

}
