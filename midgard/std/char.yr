in char;

pub fn isPunctuation (c : c32)-> bool {
    cte for z in ('!', '"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', '-', '.', '/', ':', ';', ' ', '?', '@', '[', '\\', ']', '^', '_', '`', '{', '|', '}', '~', '\n', ',') {
        if (cast!c32 (z) == c) return true;
    }
    false
}

pub fn isPunctuation (c : c8)-> bool {
    cte for z in ('!', '"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', '-', '.', '/', ':', ';', ' ', '?', '@', '[', '\\', ']', '^', '_', '`', '{', '|', '}', '~', '\n', ',') {
        if (z == c) return true;
    }
    false
}

/**
 * @returns: true if `c` is a letter in A..Z, a..z
 */
pub fn isAlpha (c : c32)-> bool {
    if c >= 'A' && c <= 'Z' { return true; }
    if c >= 'a' && c <= 'z' { return true; }
    false
}

/**
 * @returns: true if `c` is a letter in A ... Z, a ... z
 */
pub fn isAlpha (c : c8)-> bool {
    if c >= 'A' && c <= 'Z' { return true; }
    if c >= 'a' && c <= 'z' { return true; }
    false
}

/**
 * @returns: true if `c` is a lower case letter a ... z
 */
pub fn isLower (c : c32)-> bool {
    if c >= 'a' && c <= 'z' { true }
    else { false }
}

/**
 * @returns: true if `c` is a lower case letter a ... z
 */
pub fn isLower (c : c8)-> bool {
    if c >= 'a' && c <= 'z' { true }
    else { false }
}

/**
 * @returns: true if `c` is an upper case letter A ... Z
 */
pub fn isUpper (c : c32)-> bool {
    if c >= 'A' && c <= 'Z' { true }
    else { false }
}

/**
 * @returns: true if `c` is an upper case letter A ... Z
 */
pub fn isUpper (c : c8)-> bool {
    if c >= 'A' && c <= 'Z' { true }
    else { false }
}

/**
 * @returns: true if `c` is ascii char (in range 0 ... 0x7f)
 */
pub fn isAscii (c : c32)-> bool {
    if c <= cast!c32 (cast!c8 (0x7fu8)) { true }
    else { false }
}

/**
 * @returns: true
 */
pub fn isAscii (_ : c8)-> bool {
    true
}

/**
 * @returns: true if `c` is a digit 0..9
 */
pub fn isDigit (c : c32)-> bool {
    if c >= '0' && c <= '9' { true }
    else { false }
}

/**
 * @returns: true if `c` is a digit in decimal 0 ... 9
 */
pub fn isDigit (c : c8)-> bool {
    if c >= '0' && c <= '9' { true }
    else { false }
}

/**
 * @returns: true if `c` is a digit in base 8 (0 ... 7)
 */
pub fn isOctalDigit (c : c32)-> bool {
    if c >= '0' && c <= '7' { true }
    else { false }
}

/**
 * @returns: true if `c` is a digit in base 8 (0 ... 7)
 */
pub fn isOctalDigit (c : c8)-> bool {
    if c >= '0' && c <= '7' { true }
    else { false }
}

/**
 * @returns: true if `c` is a digit in base 16 (0 ... 9, A ... F, a ... f)
 */
pub fn isHexDigit (c : c32)-> bool {
    if c >= '0' && c <= '9' { true }
    else if c >= 'A' && c <= 'F' { true }
    else if c >= 'a' && c <= 'f' { true }
    else { false }
}

/**
 * @returns: true if `c` is a digit in base 16 (0 ... 9, A ... F, a ... f)
 */
pub fn isHexDigit (c : c8)-> bool {
    if c >= '0' && c <= '9' { true }
    else if c >= 'A' && c <= 'F' { true }
    else if c >= 'a' && c <= 'f' { true }
    else { false }
}

/**
 * @returns: true if `c` is a white char (space, tab, vertical tab, form feed, carriage return and linefeed character)
 */
pub fn isWhite (c : c32)-> bool {
    if c == ' ' { true }
    else if c == '\t' { true }
    else if c == '\v' { true }
    else if c == '\f' { true }
    else if c == '\n' { true }
    else if c == '\r' { true }
    else { false }
}

/**
 * @returns: true if `c` is a white char (space, tab, vertical tab, form feed, carriage return and linefeed character)
 */
pub fn isWhite (c : c8)-> bool {
    if c == ' ' { true }
    else if c == '\t' { true }
    else if c == '\v' { true }
    else if c == '\f' { true }
    else if c == '\n' { true }
    else if c == '\r' { true }
    else { false }
}


/**
 * @returns: `c` to lower case if it was an upper case letter, untransformed `c` otherwise
 */
pub fn toLower (c : c32)-> c32 {
    if c >= 'A' && c <= 'Z' {
        cast!c32 (cast!u32 (c) - cast!u32 ('A'c32) + 'a'c32)
    } else { c }
}

/**
 * @returns: `c` to lower case if it was an upper case letter, untransformed `c` otherwise
 */
pub fn toLower (c : c8)-> c8 {
    if c >= 'A' && c <= 'Z' {
        cast!c8 (cast!u8 (c) - cast!u8 ('A') + 'a')
    } else { c }
}

/**
 * @returns: `c` to upper case if it was a lower case letter, untransformed `c` otherwise
 */
pub fn toUpper (c : c32)-> c32 {
    if c >= 'a' && c <= 'z' {
        cast!c32 (cast!u32 (c) - cast!u32 ('a'c32) + 'A'c32)
    } else { c }
}

/**
 * @returns: `c` to upper case if it was a lower case letter, untransformed `c` otherwise
 */
pub fn toUpper (c : c8)-> c8 {
    if c >= 'a' && c <= 'z' {
        cast!c8 (cast!u8 (c) - cast!u8 ('a') + 'A')
    } else { c }
}
