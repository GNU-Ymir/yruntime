/**
 * Some utility functions on ASCII and Unicode characters.
 * There are two sets of functions, checks `isX` and conversions `toX`.
 * @Authors: Emile Cadorel
 * @License: GPLv3
 */

in char;

use std::traits;

/*!
 * ====================================================================================================
 * ====================================================================================================
 * ===================================          COMPARISON          ===================================
 * ====================================================================================================
 * ====================================================================================================
 */

/**
 * @returns: true if `c` is a punctuation
 */
pub fn if isChar!{C} isPunctuation {C} (c : C)-> bool {
    let u = cte if (!is!{C}{X of c8}) {
        let dmut res : [c8 ; 4] = ['\u{0}' ; 4];
        if (std::conv::utf::toUtf8 (c, ref res) != 1) {
            return false;
        }

        cast!u8 (res [0])
    } else {
        cast!u8 (c)
    };

    if (u < 0x20) return u == 0xa;
    if (u >= 0x20 && u <= 0x2f) return true;
    if (u >= 0x3a && u <= 0x40) return true;
    if (u >= 0x5b && u <= 0x60) return true;
    if (u >= 0x7b && u <= 0x7e) return true;

    false
}

/**
 * @returns: true if `c` is a letter in A..Z, a..z
 */
pub fn if isChar!{C} isAlpha {C} (c : C)-> bool {
    let u = cte if (!is!{C}{X of c8}) {
        let dmut res : [c8 ; 4] = ['\u{0}' ; 4];
        if (std::conv::utf::toUtf8 (c, ref res) != 1) {
            return false;
        }

        res [0]
    } else {
        c
    };

    if u >= 'A' && u <= 'Z' { return true; }
    if u >= 'a' && u <= 'z' { return true; }

    false
}

/**
 * @returns: true if `c` is a lower case letter a ... z
 */
pub fn if isChar!{C} isLower {C} (c : C)-> bool {
    let u = cte if (!is!{C}{X of c8}) {
        let dmut res : [c8 ; 4] = ['\u{0}' ; 4];
        if (std::conv::utf::toUtf8 (c, ref res) != 1) {
            return false;
        }

        res [0]
    } else {
        c
    };

    if u >= 'a' && u <= 'z' { return true; }

    false
}

/**
 * @returns: true if `c` is an upper case letter A ... Z
 */
pub fn if isChar!{C} isUpper {C} (c : C)-> bool {
    let u = cte if (!is!{C}{X of c8}) {
        let dmut res : [c8 ; 4] = ['\u{0}' ; 4];
        if (std::conv::utf::toUtf8 (c, ref res) != 1) {
            return false;
        }

        res [0]
    } else {
        c
    };

    if u >= 'A' && u <= 'Z' { return true; }

    false
}

/**
 * @returns: true if `c` is ascii char (in range 0 ... 0x7f)
 */
pub fn if isChar!{C} isAscii {C} (c : C)-> bool {
    cte if (!is!{C}{X of c8}) {
        let dmut res : [c8 ; 4] = ['\u{0}' ; 4];
        return std::conv::utf::toUtf8 (c, ref res) == 1;
    } else {
        return true;
    }
}

/**
 * @returns: true if `c` is a digit 0..9
 */
pub fn if isChar!{C} isDigit {C} (c : C)-> bool {
    let u = cte if (!is!{C}{X of c8}) {
        let dmut res : [c8 ; 4] = ['\u{0}' ; 4];
        if (std::conv::utf::toUtf8 (c, ref res) != 1) {
            return false;
        }

        res [0]
    } else {
        c
    };

    if u >= '0' && u <= '9' { return true; }

    false
}

/**
 * @returns: true if `c` is a digit in base 8 (0 ... 7)
 */
pub fn if isChar!{C} isOctalDigit {C} (c : C)-> bool {
    let u = cte if (!is!{C}{X of c8}) {
        let dmut res : [c8 ; 4] = ['\u{0}' ; 4];
        if (std::conv::utf::toUtf8 (c, ref res) != 1) {
            return false;
        }

        res [0]
    } else {
        c
    };

    if u >= '0' && u <= '7' { return true; }

    false
}

/**
 * @returns: true if `c` is a digit in base 16 (0 ... 9, A ... F, a ... f)
 */
pub fn if isChar!{C} isHexDigit {C} (c : C)-> bool {
    let u = cte if (!is!{C}{X of c8}) {
        let dmut res : [c8 ; 4] = ['\u{0}' ; 4];
        if (std::conv::utf::toUtf8 (c, ref res) != 1) {
            return false;
        }

        res [0]
    } else {
        c
    };

    if u >= '0' && u <= '9' { return true; }
    if u >= 'A' && u <= 'F' { return true; }
    if u >= 'a' && u <= 'f' { return true; }

    false
}

/**
 * @returns: true if `c` is a white char (space, tab, vertical tab, form feed, carriage return and linefeed character)
 */
pub fn if isChar!{C} isWhite {C} (c : C)-> bool {
    let u = cte if (!is!{C}{X of c8}) {
        let dmut res : [c8 ; 4] = ['\u{0}' ; 4];
        if (std::conv::utf::toUtf8 (c, ref res) != 1) {
            return false;
        }

        res [0]
    } else {
        c
    };

    if u == ' ' { return true; }
    if u == '\t' { return true; }
    if u == '\v' { return true; }
    if u == '\f' { return true; }
    if u == '\n' { return true; }
    if u == '\r' { return true; }

    false
}

/*!
 * ====================================================================================================
 * ====================================================================================================
 * ===================================          CONVERSION          ===================================
 * ====================================================================================================
 * ====================================================================================================
 */

/**
 * @returns: `c` to lower case if it was an upper case letter, untransformed `c` otherwise
 */
pub fn if isChar!{C} toLower {C} (c : C)-> C {
    let u = cte if (!is!{C}{X of c8}) {
        let dmut res : [c8 ; 4] = ['\u{0}' ; 4];
        if (std::conv::utf::toUtf8 (c, ref res) != 1) {
            return c;
        }

        res [0]
    } else {
        c
    };

    if u >= 'A' && u <= 'Z' {
        return cast!C (cast!u8 (u) - cast!u8 ('A') + 'a');
    }

    return c;
}

/**
 * @returns: `c` to upper case if it was a lower case letter, untransformed `c` otherwise
 */
pub fn if isChar!{C} toUpper {C} (c : C)-> C {
    let u = cte if (!is!{C}{X of c8}) {
        let dmut res : [c8 ; 4] = ['\u{0}' ; 4];
        if (std::conv::utf::toUtf8 (c, ref res) != 1) {
            return c;
        }

        res [0]
    } else {
        c
    };

    if u >= 'a' && u <= 'z' {
        return cast!C (cast!u8 (u) - cast!u8 ('a') + 'A');
    }

    return c;
}
