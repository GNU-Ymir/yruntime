mod std::conv;

import std::io;
import std::stream;
import core::typeinfo;
import core::exception;
import core::duplication;
import core::array;
import std::traits;

mod Runtime {
    pub extern (C) def _yrt_ulong_to_double (a : usize)-> f64;
    
    pub extern (C) def _yrt_long_to_double (a : isize)-> f64;
    
    pub extern (C) def _yrt_uint_to_float (a : u32)-> f32;
    
    pub extern (C) def _yrt_int_to_float (a : i32)-> f32;

    pub extern (C) def _yrt_double_to_ulong (a : f64)-> u64;
    
    pub extern (C) def _yrt_double_to_long (a : f64)-> i64;
    
    pub extern (C) def _yrt_float_to_uint (a : f32)-> u32;
    
    pub extern (C) def _yrt_float_to_int (a : f32)-> i32;

    pub extern (C) def _yrt_to_utf8_array (s : [c32])-> dmut [c8];

    pub extern (C) def _yrt_to_utf32_array (s : [c8])-> dmut [c32];

    pub extern (C) def _yrt_double_to_s8 (s : f64, prec : u32)-> dmut [c8];

    pub extern (C) def _yrt_double_to_s8_exp (s : f64, prec : u32)-> dmut [c8];

    pub extern (C) def _yrt_s8_to_double (s : [c8], ref mut succ : bool)-> f64;

    pub extern (C) def _yrt_s8_to_float (s : [c8], ref mut succ : bool)-> f32;

}


/**
 * This class can be thrown when a dynamic cast was unsuccessful 
 * It doen't have a real meaning in the language, as it can't really happen
 * But we can force it
 * @example : 
 * ===============
 * class @abstract X { ... }
 * class Y over X { ... }
 * class Z over X { ... }
 * 
 * def enforce_Y  (a : &X) throws &std::conv::CastFailure
 * {
 *    match (a) {
 *        _ : &Y => {
 *             println (\"Success\");
 *        }
 *        _ => {
 *          throw CastFailure::new (a::typeinfo, Y::typeinfo);
 *        }
 *     }
 * } 
 * 
 * def main () {
 *     enforce_Y (Z::new ());
 * } catch {
 *     x : _ => println (x);
 * }
 * 
 * ===============
 */
pub class CastFailure over core::exception::Exception {

    // The type from which we want a cast    
    let _fr : TypeInfo;

    // The type to which we want a cast
    let _to : TypeInfo;

    /**
     * @params: 
     *    - from, the type from which we want a cast
     *    - to, the type to which we want a cast
     */
    pub self (from : TypeInfo, to : TypeInfo) with _fr = from, _to = to {}

    impl stream::Streamable {

        /**
         * Just print the error to stdout
         */
        pub over toStream (self, dmut stream : &StringStream) {
            self::super.toStream (alias stream);
        }
        
    }
    
}

pub {
    
    /**
     * Transform a unsigned int into a string
     * @example: 
     * ==========
     * let x = to![c32] (12u32);
     * assert (x == "12");
     * ==========
     */
    def if (isUnsigned!{F} () && isChar!{U} ()) to {T of [U], U, F} (a : F) -> dmut [U] {
        alias to!{T, F, 10us} (a)
    }

    /**
     * Transform a unsigned int into a string
     * @example: 
     * ==========
     * let x = to![c32] (12u32);
     * assert (x == "12");
     * ==========
     */
    def if (isUnsigned!{F} () && isChar!{U} ()) to {T of [U], U, "x", F} (a : F) -> dmut [U] {
        cte if is!{U}{X of c32} {
            return alias (copy "0x" ~ to!{T, F, 16us} (a));
        } else {
            return alias (copy "0x"s8 ~ to!{T, F, 16us} (a));
        }        
    }

    /**
     * Transform a unsigned int into a string
     * @example: 
     * ==========
     * let x = to![c32] (12u32);
     * assert (x == "12");
     * ==========
     */
    def if (isUnsigned!{F} () && isChar!{U} ()) to {T of [U], U, "b", F} (a : F) -> dmut [U] {
        cte if is!{U}{X of c32} {
            return alias (copy "0b" ~ to!{T, F, 2us} (a));
        } else {
            return alias (copy "0b"s8 ~ to!{T, F, 2us} (a));
        }
    }

    /**
     * Transform a unsigned int into a string
     * @example: 
     * ==========
     * let x = to![c32] (12u32);
     * assert (x == "12");
     * ==========
     */
    def if (isUnsigned!{F} () && isChar!{U} ()) to {T of [U], U, "o", F} (a : F) -> dmut [U] {
        cte if is!{U}{X of c32} {
            return alias (copy "0o" ~ to!{T, F, 8us} (a));
        } else {
            return alias (copy "0o"s8 ~ to!{T, F, 8us} (a));
        }
    }
    
    /**
     * Transform a unsigned int into a string
     * @example: 
     * ==========
     * let x = to!{[c32], u32, 10us} (12u32);
     * assert (x == "12");
     * ==========
     */
    def if (isUnsigned!{F} () && isChar!{U} ()) to {T of [U], U, F, base : usize} (a : F) -> dmut [U] {
        if (cast!usize (a) == 0u64) {
            cte if is!{U}{X of c32} {
                return copy "0";
            } else return copy "0"s8;
        }
        
        let mut n = cast!usize (a);
        let mut len = 0us;
        while n > 0us {
            len += 1us;
            n /= base;
        }
        
        let dmut res = core::duplication::allocArray!(U)(len);
        let mut j = 1us;
        for i in len .. 0us {
            res [i - 1us] = inner::to!U ((cast!usize (a) / j) % base, base);
            j *= base;
        } catch {
            _  => { __pragma!panic (); }

        }        
        
        alias res
    }

    /**
     * Transform a signed int into a string
     * @example:
     * ===========
     * let x = to![c32] (-12);
     * assert (x == "-12");
     * ===========
     */
    def if (isSigned!{F} () && isChar!{U} ()) to {T of [U], U, F} (a : F) -> dmut [U] {
        alias to!{T, F, 10is} (a)
    }

    /**
     * Transform a signed int into a string
     * @example:
     * ===========
     * let x = to!{[c32], i32, 10is} (-12);
     * assert (x == "-12");
     * ===========
     */
    def if (isSigned!{F} () && isChar!{U} ()) to {T of [U], U, F, base : isize} (a : F) -> dmut [U]
    {
        if (cast!isize (a) == 0i64)  {
            cte if is!{U}{X of c32} {
                return copy "0";
            } else return copy "0"s8;
        }
        
        let (mut n, mut len, sign) = if (cast!isize (a) < 0is) {
            (cast!isize (- a), 0us, true)
        } else { (cast!isize (a), 0us, false) }
        
        while n > 0is {
            len += 1us;
            n /= base;
        }
        
        let mut j = 1is;
        if (!sign) {
            let dmut res = core::duplication::allocArray!(U)(len);
            for i in len .. 0us {
                res [i - 1us] = inner::to!U (cast!usize ((cast!isize (a) / j) % base), cast!usize (base));
                j *= base;
            } catch {
                _  => { __pragma!panic (); }
            }
            return alias res;
        } else {
            let dmut res = core::duplication::allocArray!(U)(len + 1us);
            {
                for i in len .. 0us {
                    res [i] = inner::to!U (cast!usize ((cast!isize (-a) / j) % base), cast!usize (base));
                    j *= base;
                }
                cte if is!{U}{X of c32} {
                    res [0] = '-';
                } else res [0] = '-'c8;
            } catch {
                _ => { __pragma!panic (); }
            }
            return alias res;
        }        
    }    
    
    /**
     * Transfrom a utf32 encoded string into a utf8 string
     * @params :
     *   - s: a string in utf32
     */
    def if is!{U}{X of c8} to {T of [U], U, F of [c32]} (s : F)-> dmut [c8] {
        alias Runtime::_yrt_to_utf8_array (s)
    }
    
    /**
     * Transfrom a utf8 encoded string into a utf32 string
     * @params :
     *   - s: a string in utf8
     */
    def if (is!{U}{X of c32} && is!{G}{X of c8}) to {T of [U], U, F of [G], G} (s : F)-> dmut [c32] {
        alias Runtime::_yrt_to_utf32_array (s)
    }

    /**
     * Create a zero terminated string from a [c8]
     */
    def toStringZ (a : [c8])-> &c8 {
        let dmut res = core::duplication::allocArray!(c8)(a.len + 1us);
        core::duplication::memCopy (a, alias res);
        {
            res [$-1us] = '\u{0}'c8;
        } catch {
            _ : &OutOfArray => {}
        }
        res.ptr
    }

    /**
     * @returns: a slice of a where the len is correctly set
     */
    def fromStringZ {U of [c8]} (a : U)-> [c8] {
        let mut len = 0us;
        for i in a {
            if (i == '\u{0}'c8) break {};
            else len += 1us;
        }
        __pragma!trusted ({ a [0us .. len] })
    }

    /**
     * @returns: a slice of a where the len is correctly set
     */
    def fromStringZ {U of &c8} (a : U)-> [c8]
        throws &SegFault
    {
        let mut len = 0us;
        loop {
            if (*(a + len) == '\u{0}'c8) break {};
            else len += 1us;            
        }
        import std::io;
        let dmut res = core::duplication::allocArray!(c8)(len);
        __pragma!trusted ({
            for i in 0us .. len {
                res [i] = *(a + i);
            }
        });
        res
    }


    
    /**
     * Transfrom a utf32 encoded char into a utf8 string
     * @params :
     *   - s: a char in utf32
     */
    def if is!{U}{X of c8} to {T of [U], U, F of c32} (s : F) -> dmut [c8] {
        alias Runtime::_yrt_to_utf8_array ([s])
    }
    
    /**
     * Transform a float into a string
     * @example: 
     * ===========
     * assert (to![c32] (12.8) == "12.8")
     * ===========
     */
    def if (isChar!{U} () && isFloating!{F} ()) to {T of [U], U, F} (a : F, prec : u32 = 6u32) -> T {
        cte if is!{U}{X of c32} {
            to![c32] (Runtime::_yrt_double_to_s8 (cast!f64 (a), prec))
        } else {
            Runtime::_yrt_double_to_s8 (cast!f64 (a), prec)
        }
    }

    /**
     * Transform a float into a string
     * @example: 
     * ===========
     * assert (to![c32] (12.8) == "12.8")
     * ===========
     */
    def if (isChar!{U} () && isFloating!{F} ()) to {T of [U], U, "e", F} (a : F, prec : u32 = 6u32) -> T {
        cte if is!{U}{X of c32} {
            to![c32] (Runtime::_yrt_double_to_s8_exp (cast!f64 (a), prec))
        } else {
            Runtime::_yrt_double_to_s8_exp (cast!f64 (a), prec)
        }
    } 

    /**
     * Convert a bool into a string 
     * @example: 
     * ===========
     * assert (to![c8] (false) == "false"s8)
     * ===========
     */
    def if is!{U}{X of c8} to {T of [U], U, F of bool} (a : F)-> [c8] {
        if (a)
            "true"s8
        else
            "false"s8
    }

    /**
     * Convert a bool into a string 
     * @example: 
     * ===========
     * assert (to![c32] (false) == "false")
     * ===========
     */
    def if is!{U}{X of c32} to {T of [U], U, F of bool} (a : F)-> [c32] {
        if (a)
            "true"
        else
            "false"
    }
   
    /**
     * Transform a class that implement Streamable into a [c8]
     * @example: 
     * =============
     * mod main;
     * class A {
     *     pub self () {}
     *     impl Streamable;
     * }
     * 
     * assert (A::new ().to![c8] () == "main::A()"s8);
     * =============
     */
    def if is!{U}{X of c8} to {T of [U], U, F impl Streamable} (a : F)-> [c8] {
        let dmut stream = StringStream::new ();
        a.toStream (alias stream);
        stream []
    }


    /**
     * Transform a class that implement Streamable into a [c32]
     * @example: 
     * =============
     * mod main;
     * class A {
     *     pub self () {}
     *     impl Streamable;
     * }
     * 
     * assert (A::new ().to![c32] () == "main::A()");
     * =============
     */
    def if is!{U}{X of c32} to {T of [U], U, F impl Streamable} (a : F)-> [c32] {
        let dmut stream = StringStream::new ();
        a.toStream (alias stream);
        stream [].to![c32] ()
    }


    /**
     * Transform a struct into a [c8]
     * @example: 
     * =============
     * mod main;
     * struct
     * | x : i32
     * -> A; 
     * 
     * assert (A (12).to![c8] () == "main::A(12)"s8);
     */
    def if is!{U}{X of c8} to {T of [U], U, struct S} (a : S)-> [c8] {
        let dmut stream = StringStream::new ();
        stream:.write (a);
        stream []
    }

    /**
     * Transform a struct into a [c32]
     * @example: 
     * =============
     * mod main;
     * struct
     * | x : i32
     * -> A; 
     * 
     * assert (A (12).to![c32] () == "main::A(12)");
     */
    def if is!{U}{X of c32} to {T of [U], U, struct S} (a : S)-> [c32] {
        let dmut stream = StringStream::new ();
        stream:.write (a);
        stream [].to![c32] ()
    }
    
    
    /**
     * Transform a unsigned integer into a float
     * @example: 
     * ==========
     * let x = to!f64 (12u64);
     * assert (x == 12.0);
     * ==========
     */
    def if (isFloating!{F} () && isUnsigned!{U} ()) to {F, U} (a : U) -> F {
        cast!F (Runtime::_yrt_ulong_to_double (cast!usize (a)))
    }

    /**
     * Transform a signed into a float
     * @example: 
     * ==========
     * let x = to!f64 (12i64);
     * assert (x == 12.0);
     * ==========
     */
    def if (isFloating!{F} () && isSigned!{I} ()) to {F, I} (a : I) -> F {
        cast!F (Runtime::_yrt_long_to_double (cast!isize (a)))
    }

    /**
     * Transform a float into a unsigned integer
     * @example: 
     * ==========
     * let x = to!u64 (12.0);
     * assert (x == 12u64);
     * ==========
     */
    def if (isFloating!{F} () && isUnsigned!{U} ()) to {U, F} (a : F) -> U {
        cast!U (Runtime::_yrt_double_to_ulong (cast!f64 (a)))
    }

    /**
     * Transform a float into a signed integer
     * @example: 
     * ==========
     * let x = to!i64 (12.0);
     * assert (x == 12i64);
     * ==========
     */
    def if (isFloating!{F} () && isSigned!{I} ()) to {I, F} (a : F) -> I {
        cast!I (Runtime::_yrt_double_to_long (cast!f64 (a)))
    }


    /**
     * Transform a string into a unsigned int
     * @throws: 
     *    - &CastFailure: if the string does not contain a valid u32 literal
     * @example:
     * ===============
     * let x = ("12").to!u64 ();
     * assert (x == 12u64);
     * ===============
     * @assume: the string is stripped, so the only possible char are [0-9]
     * @known_bug: does not check the overflow capacity
     */
    def if (isUnsigned!{T} () && isChar!{U} ()) to {T, F of [U], U} (str : F)-> T
        throws &CastFailure
    {
        to!{T, F, 10us} (str)
    }

    /**
     * Transform an hexadecimal string into a unsigned integer
     * @throws: 
     *    - &CastFailure: if the string does not contain a valid u32 literal
     * @example:
     * ===============
     * let x = ("0xff").to!u64 ();
     * assert (x == 255u64);
     * ===============
     * @assume: the string is stripped, so the only possible char are [0-9]
     * @known_bug: does not check the overflow capacity
     */
    def if (isUnsigned!{T} () && isChar!{U} ()) to {T, "x", F of [U], U} (str : F)-> T
        throws &CastFailure
    {
        cte if is!{U}{X of c32} {
            if (str.len < 2us || __pragma!trusted ({str [0us] != '0'}) || __pragma!trusted ({str [1us] != 'x'})) {
                throw CastFailure::new (T::typeinfo, [U]::typeinfo);
            }
        } else {
            if (str.len < 2us || __pragma!trusted ({str [0us] != '0'c8}) || __pragma!trusted ({str [1us] != 'x'c8})) {
                throw CastFailure::new (T::typeinfo, [U]::typeinfo);
            }
        }
        
        to!{T, F, 16us} (__pragma!trusted ({str[2us .. $]}))
    }


    /**
     * Transform an hexadecimal string into a unsigned integer
     * @throws: 
     *    - &CastFailure: if the string does not contain a valid u32 literal
     * @example:
     * ===============
     * let x = ("0b1001").to!u64 ();
     * assert (x == 5u64);
     * ===============
     * @assume: the string is stripped, so the only possible char are [0-9]
     * @known_bug: does not check the overflow capacity
     */
    def if (isUnsigned!{T} () && isChar!{U} ()) to {T, "b", F of [U], U} (str : F)-> T
        throws &CastFailure
    {
        cte if is!{U}{X of c32} {
            if (str.len < 2us || __pragma!trusted ({str [0us] != '0'}) || __pragma!trusted ({str [1us] != 'b'})) {
                throw CastFailure::new (T::typeinfo, [U]::typeinfo);
            }
        } else {
            if (str.len < 2us || __pragma!trusted ({str [0us] != '0'c8}) || __pragma!trusted ({str [1us] != 'b'c8})) {
                throw CastFailure::new (T::typeinfo, [U]::typeinfo);
            }        
        }
        
        to!{T, F, 2us} (__pragma!trusted ({str[2us .. $]}))
    }


    /**
     * Transform an hexadecimal string into a unsigned integer
     * @throws: 
     *    - &CastFailure: if the string does not contain a valid u32 literal
     * @example:
     * ===============
     * let x = ("0o7777").to!u64 ();
     * assert (x == 255u64);
     * ===============
     * @assume: the string is stripped, so the only possible char are [0-9]
     * @known_bug: does not check the overflow capacity
     */
    def if (isUnsigned!{T} () && isChar!{U} ()) to {T, "o", F of [U], U} (str : F)-> T
        throws &CastFailure
    {
        cte if is!{U}{X of c32} {
            if (str.len < 2us || __pragma!trusted ({str [0us] != '0'}) || __pragma!trusted ({str [1us] != 'o'})) {
                throw CastFailure::new (T::typeinfo, [U]::typeinfo);
            }
        } else {
            if (str.len < 2us || __pragma!trusted ({str [0us] != '0'c8}) || __pragma!trusted ({str [1us] != 'o'c8})) {
                throw CastFailure::new (T::typeinfo, [U]::typeinfo);
            }
        }
        
        to!{T, F, 8us} (__pragma!trusted ({str[2us .. $]}))
    }

    
    /**
     * Transform a string into a unsigned integer
     * @throws: 
     *    - &CastFailure: if the string does not contain a valid u32 literal
     * @example:
     * ===============
     * let a = ("12").to!{u64, [c32], 10us} ();
     * assert (a == 12u64);
     *    
     * let x = ("12").to!{u64, [c32], 16us} ();
     * assert (x == 18u64);
     * ===============
     * @assume: the string is stripped, so the only possible char are [0-9]
     * @known_bug: does not check the overflow capacity
     */
    def if (isUnsigned!{T} () && isChar!{U} ()) to {T, F of [U], U, base : usize} (str : F)-> T
        throws &CastFailure
    {
        let mut j = 1us;
        let mut res = 0us;
        for i in str.len .. 0us {
            res = res + (j * inner::to!usize (str [i - 1us]));            
            j *= base;
        } catch {
            _ : &OutOfArray => { __pragma!panic (); } // Can't happen
            _ : &CastFailure => {
                throw CastFailure::new (T::typeinfo, [U]::typeinfo);
            }
        }
        
        cast!T (res)
    }

    /**
     * Transform a string into a signed integer
     * @throws: 
     *    - &CastFailure: if the string does not contain a valid i64 literal
     * @example:
     * ===============
     * let x = ("-12").to!i64 ();
     * assert (x == -12i64);
     * ===============
     * @assume: the string is stripped, so the only possible char are [0-9] and '-'
     * @known_bug: does not check the overflow capacity
     */
    def if (isSigned!{T} () && isChar!{U} ()) to {T, F of [U], U} (str : F)-> T
        throws &CastFailure
    {
        to!{T, F, 10us} (str)
    }    

    /**
     * Transform a string into a signed integer
     * @throws: 
     *    - &CastFailure: if the string does not contain a valid i64 literal
     * @example:
     * ===============
     * let x = ("-12").to!{i64, [c32], 10us} ();
     * assert (x == -12i64);
     * ===============
     * @assume: the string is stripped, so the only possible char are [0-9] and '-'
     * @known_bug: does not check the overflow capacity
     */
    def if (isSigned!{T} () && isChar!{U} ()) to {T, F of [U], U, base : usize} (str : F)-> T
        throws &CastFailure
    {
        let mut j = 1us;
        let mut res = 0is;
        for i in str.len .. 0us {
            cte if is!{U} {X of c32} {
                if (i == 1us && str [i - 1us] == '-') {
                    res = -res;
                } else {                    
                    res = res + cast!isize ((j * inner::to!usize (str [i - 1us])));
                }
            } else {
                if (i == 1us && str [i - 1us] == '-'c8) {
                    res = -res;
                } else {
                    res = res + cast!isize ((j * inner::to!usize (str [i - 1us])));
                }
            }
            j *= base;
        } catch {
            _ : &OutOfArray => { __pragma!panic (); } // Can't happen
            x : &CastFailure => {
                throw x;
            }
        }
        
        cast!T (res)
    }

    /**
     * Transform a string into a float
     * @throws: 
     *    - &CastFailure: if the string does not contain a valid f64 literal
     * @example:
     * ===============
     * let x = ("-12.89").to!f64 ();
     * assert (x == -12.89);
     * ===============
     * @assume: the string is stripped, so the only possible char are [0-9], '-' and '.'
     */
    def if (isFloating!{T} ()) to {T, F of [U], U} (str : F)-> T
        throws &CastFailure
    {
        let mut succ = false;
        let res = cte if is!{T} {V of f32} {
            cte if is!{U}{X of c8} {
                Runtime::_yrt_s8_to_float (str, ref succ)
            } else {
                Runtime::_yrt_s8_to_float (str.to![c8] (), ref succ)
            }
        } else {
            cte if is!{U}{X of c8} {
                Runtime::_yrt_s8_to_double (str, ref succ)
            } else {
                Runtime::_yrt_s8_to_double (str.to![c8] (), ref succ)
            }
        }
        
        if !succ {
            throw CastFailure::new (T::typeinfo, [U]::typeinfo);
        }

        res
    }

    /**
     * Unwrap the content of an option type
     * @example: 
     * ==============
     * def foo (i : i32)-> i32
     *     throws &AssertError
     * {
     *     assert (i != 0);
     *     144 / i
     * }
     * 
     * let j = foo (12)?
     * let k = foo (0)?
     * {
     *     println (j.unwrap ()); // prints "12"
     *     let x = j.unwrap () 
     *             + k.unwrap (); // throw an exception
     *     println (x); 
     * } catch {
     *    err : &CastFailure => {
     *          println (err);
     *    }
     * }
     * ==============
     * @throws : &CastFailure, if the option is empty
     */
    def unwrap {T} (a : T?) -> T
        throws &CastFailure
    {
        match a {
            Ok (x : _) => {
                return x;
            }
            _ => {
                throw CastFailure::new (void::typeinfo, T::typeinfo);
            }
        }
    }

    /**
     * Unwrap the content of an option type containing a class type
     * This function, unlike simple unwrap allows to cast the content of the option into the type of an child class
     * @example: 
     * ==================
     * class @abstract A {
     *   prot self () {}
     *   impl Streamable;
     * }
     * 
     * class B over A {
     *   pub self () {}
     *   impl Streamable;
     * }
     *
     * class C over A {
     *   pub self () {}
     *   impl Streamable;
     * }
     *
     * def foo (i : i32) -> (&A)? {
     *     if (i < 10) { (B::new ()?).to!(&A?} () }
     *     else if (i < 20) { (C::new ()?).to!(&A?} () }
     *     else (&A?)::__err__
     * }
     * 
     * let x = foo (1);
     * let y = foo (14);
     * let z = foo (120);
     * {
     *    println (x.unwrap!(&B} ()); // prints "main::B ()"
     *    println (y.unwrap!(&C} ()); // prints "main::C ()"
     *    println (y.unwrap!(&A} ()); // prints "main::C ()"
     *    println (z.unwrap!(&A} ()); // throw an exception
     * } catch {
     *     err : &CastFailure => {
     *         println (err);
     *     }
     *}
     * ==================
     * @throws : &CastFailure, if the option is empty, or the option does not contain a value of type U
     */
    def if (is!U {J over T}) unwrap {U, T} (a : T?) -> U
        throws &CastFailure
    {
        match a {
            Ok (x : U) => {
                return x;
            }
            Ok (z : _) => {
                throw CastFailure::new (typeof (z)::typeinfo, T::typeinfo);
            }
            _ => {
                throw CastFailure::new (void::typeinfo, T::typeinfo);
            }
        }
    }

    /**
     * Transform a U? into a T? if U is over T
     * @example: 
     * ================
     * class @abstract A {
     *   prot self () {}
     *   impl Streamable;
     * }
     * 
     * class B over A {
     *   pub self () {}
     *   impl Streamable;
     * }
     *
     * class C over A {
     *   pub self () {}
     *   impl Streamable;
     * }
     * 
     * def foo (i : i32) -> (&A)? {
     *     if (i < 10) { (B::new ()?).to!(&A?} () }
     *     else if (i < 20) { (C::new ()?).to!(&A?} () }
     *     else (&A?)::__err__
     * }
     * ================
     */
    def to {T of I?, I, U over I} (a : U?)-> T {
        match a {
            Ok (x: _) => {
                (cast!I (x))?
            }
            _ => {
                (T)::__err__
            }
        }
    }


    /**
     * This function is the standard cast from base class to heir class
     * It is used instead of cast, that is not safe
     * @example
     * ==================
     * import std::conv;
    
     * class Foo {
     *    pub self () {}
     * }

     * class Bar over Foo {
     *     pub self () {}
     * }
     *
     *
     * let x : &Foo = Bar::new ();
     *  
     * let _ : &Bar = { 
     *      x.to!(&Bar) ()
     * } catch {
     *    CastFailure () => { Bar::new () }
     * }
     * ==================
     */
    def if (is!U{J over T}) to {U, T} (x : T)-> U
        throws &CastFailure
    {
        match x {
            z : U => return z;
            _ => {
                throw CastFailure::new (x::typeinfo, U::typeinfo);
            }
        }        
    }

    /**
     * This function is the standard cast from base class to heir class
     * It is used instead of cast, that is not safe
     * @example
     * ==================
     * import std::conv;
    
     * class Foo {
     *    pub self () {}
     * }

     * class Bar over Foo {
     *     pub self () {}
     * }
     *
     *
     * let dmut x : &Foo = Bar::new ();
     *  
     * let _ : &Bar = { 
     *      x:.to!(&Bar) ()
     * } catch {
     *    CastFailure () => { Bar::new () }
     * }
     * ==================
     */
    def if (is!U{J over T}) to {U, T} (dmut x : T)-> dmut U
        throws &CastFailure
    {
        match ref x {
            dmut z : U => return alias z;
            _ => {
                throw CastFailure::new (x::typeinfo, U::typeinfo);
            }
        }        
    }
    
}

mod inner {

    /**
     * @assume: a < 10
     * Transform a u64 into a c8
     */
    pub def to {T of c8} (a : usize, base : usize) -> c8
        throws &CastFailure
    {
        match a {
            0us => { return '0'c8; }
            1us => { return '1'c8; }
            2us => { if base < 3us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return '2'c8; }
            3us => { if base < 4us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return '3'c8; }
            4us => { if base < 5us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return '4'c8; }
            5us => { if base < 6us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return '5'c8; }
            6us => { if base < 7us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return '6'c8; }
            7us => { if base < 8us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return '7'c8; }
            8us => { if base < 9us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return '8'c8; }
            9us => { if base < 10us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return '9'c8; }
            10us => { if base < 11us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return 'a'c8; }
            11us => { if base < 12us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return 'b'c8; }
            12us => { if base < 13us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return 'c'c8; }
            13us => { if base < 14us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return 'd'c8; }
            14us => { if base < 15us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return 'e'c8; }
            15us => { if base < 16us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return 'f'c8; }
            _ => { throw CastFailure::new (u64::typeinfo, T::typeinfo); }
        }
    }

    /**
     * @assume: a < 10
     * Transform a u64 into a c8
     */
    pub def to {T of c32} (a : usize, base : usize) -> c32
        throws &CastFailure
    {
        match a {
            0us => { return '0'; }
            1us => { return '1'; }
            2us => { if base < 3us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return '2'; }
            3us => { if base < 4us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return '3'; }
            4us => { if base < 5us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return '4'; }
            5us => { if base < 6us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return '5'; }
            6us => { if base < 7us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return '6'; }
            7us => { if base < 8us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return '7'; }
            8us => { if base < 9us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return '8'; }
            9us => { if base < 10us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return '9'; }
            10us => { if base < 11us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return 'a'; }
            11us => { if base < 12us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return 'b'; }
            12us => { if base < 13us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return 'c'; }
            13us => { if base < 14us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return 'd'; }
            14us => { if base < 15us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return 'e'; }
            15us => { if base < 16us { throw CastFailure::new (u64::typeinfo, T::typeinfo); } return 'f'; }
            _ => { throw CastFailure::new (u64::typeinfo, T::typeinfo); }
        }
    }

    /**
     * Transform a c8 into a usize
     * @assume: a >= '0' and a <= '9' or a >= 'a' and a <= 'f'
     */
    pub def to {T of usize} (a : c8) -> T
        throws &CastFailure
    {
        match a {
            '0'c8 => { return 0us; }
            '1'c8 => { return 1us; }
            '2'c8 => { return 2us; }
            '3'c8 => { return 3us; }
            '4'c8 => { return 4us; }
            '5'c8 => { return 5us; }
            '6'c8 => { return 6us; }
            '7'c8 => { return 7us; }
            '8'c8 => { return 8us; }
            '9'c8 => { return 9us; }
            'a'c8 => { return 10us; }
            'b'c8 => { return 11us; }
            'c'c8 => { return 12us; }
            'd'c8 => { return 13us; }
            'e'c8 => { return 14us; }
            'f'c8 => { return 15us; }
            'A'c8 => { return 10us; }
            'B'c8 => { return 11us; }
            'C'c8 => { return 12us; }
            'D'c8 => { return 13us; }
            'E'c8 => { return 14us; }
            'F'c8 => { return 15us; }
            _ => { throw CastFailure::new (c8::typeinfo, usize::typeinfo); }            
        }
    }


    /**
     * Transform a c32 into a usize
     * @assume: a >= '0' and a <= '9' or a >= 'a' and a <= 'f'
     */
    pub def to {T of usize} (a : c32) -> T
        throws &CastFailure
    {
        match a {
            '0' => { return 0us; }
            '1' => { return 1us; }
            '2' => { return 2us; }
            '3' => { return 3us; }
            '4' => { return 4us; }
            '5' => { return 5us; }
            '6' => { return 6us; }
            '7' => { return 7us; }
            '8' => { return 8us; }
            '9' => { return 9us; }
            'a' => { return 10us; }
            'b' => { return 11us; }
            'c' => { return 12us; }
            'd' => { return 13us; }
            'e' => { return 14us; }
            'f' => { return 15us; }
            'A' => { return 10us; }
            'B' => { return 11us; }
            'C' => { return 12us; }
            'D' => { return 13us; }
            'E' => { return 14us; }
            'F' => { return 15us; }
            _ => { throw CastFailure::new (c32::typeinfo, usize::typeinfo); }            
        }
    }
}
