in iteration;
use std::collection::list::nodes;

pub record ListIterator {T} {

    let mut _current : (&ListNode!T)?;

    let mut _index : usize;

    pub self (i : usize, node : (&ListNode!T)?)
        with _current = node
        , _index = i
    {}

    pub fn get {0, 1} (self) -> T {
        match self._current {
            Ok (x) =>
                return x.value;
        }

        panic;
    }

    pub fn get {1, 2} (self) -> T {
        match self._current {
            Ok (x) =>
                return x.value;
        }

        panic;
    }

    pub fn get {0, 2} (self) -> usize {
        return self._index;
    }

    pub fn opEquals (self, o : usize) -> bool {
        self._index == o
    }

    impl core::iterate::Iterable {
        pub over next (mut self) {
            match self._current {
                Ok (x) => {
                    self._index += 1us;
                    self._current = x.next;
                }
            }
        }
    }

}
