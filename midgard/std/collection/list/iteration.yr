in iteration;
use std::collection::list::nodes;

@final
pub class ListIterator {T} {

    let mut _current : &ListNode!T;

    let mut _index : usize;

    pub self (i : usize, node : &ListNode!T)
        with _current = node, _index = i
    {}

    pub fn next (mut self) -> dmut &ListIterator!{T} {
        match self._current {
            x: &ListValue!T => {
                self._index += 1us;
                self._current = x.next;
            }
        }

        alias self
    }

    pub fn get {0, 1} (self) -> T {
        match self._current {
            x : &ListValue!{T} =>
                return x.value;
        }

        panic;
    }


    pub fn get {1, 2} (self) -> T {
        match self._current {
            x : &ListValue!{T} =>
                return x.value;
        }

        panic;
    }

    pub fn get {0, 2} (self) -> usize {
        return self._index;
    }

    pub fn opEquals (self, o : usize) -> bool {
        self._index == o
    }

}
