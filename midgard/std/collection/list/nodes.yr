in nodes;

/**
 * The content of a linked list
 * Those nodes are only used in List, and there is no way to access them from outside
 */
@abstract
pub class ListNode {T} {
    prot self () {}
}

/**
 * Encode a node of the linked list, containing a value
 */
@final
pub class ListValue {T} over ListNode!{T} {

    /// The reference to the previous node
    pub let dmut prev : &ListNode!{T};

    /// The reference to the next node
    pub let dmut next : &ListNode!{T};

    /// The value contained in the node
    pub let value : T;

    /**
     * Create a new node of the list
     * @params:
     *    - val: the value to store
     *    - prev: the reference to the previous node in the list
     *    - next: the reference to the next node in the list
     */
    pub self (val : T, dmut prev : &ListNode!T, dmut next : &ListNode!T)
        with prev = alias prev
        , next = alias next
        , value = val
    {}


}

/**
 * This class encode the end of a list (in both ways previous, or next)
 */
@final
pub class Empty {T} over ListNode!T {
    pub self () {}
}
