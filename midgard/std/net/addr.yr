/**
 * This module declares classes and functions to manage IPv4 and IPv6 addresses.
 * @Authors: Emile Cadorel
 * @License: GPLv3
 * <hr>
 * @example:
 * ===
 * use std::net::addr::_;
 *
 * let localhost_v4 = Ipv4Address ([127, 0, 0, 1]);
 * let localhost_v6 = Ipv6Address ([0, 0, 0, 0, 0, 0, 0, 1]);
 *
 * let ip_v4 = ("127.0.0.1").to!{&IpAddr} ();
 * assert (ip_v4 == localhost_v4 && localhost_v4 == Ipv4::LOCALHOST);
 *
 * let ip_port_v6 = ("[::1]:8080").to!{SockAddr} ();
 * assert (ip_port_v6.ip == localhost_v6 && ip_port_v6.ip == Ipv6::LOCALHOST);
 * assert (ip_port_v6.port == 8080);
 * ===
 */

in addr;

mod ::v4;
mod ::v6;

/**
 * Ancestor class of ipv4 and ipv6 addresses
 * */
@abstract
pub class IpAddr {
    pub self () {}

    pub fn isLoopback (self)-> bool;
    pub fn isUnspecified (self)-> bool;

    pub fn opEquals (self, o : &IpAddr)-> bool;

    impl std::stream::Streamable;
    impl core::types::Hashable;
}

/**
 * An address associated to a port
 * */
pub record SockAddr {
    // The port
    let _port : u16;

    // The address
    let _addr : &IpAddr;

    /**
     * @params:
     *    - addr: an ipv6 or ipv4 address
     * */
    pub self (addr : &IpAddr, port : u16)
        with _addr = addr
        , _port = port
    {}

    @field
    pub fn port (self)-> u16 {
        self._port
    }

    @field
    pub fn ip (self)-> &IpAddr {
        self._addr
    }

    /**
     * Compare two addresses
     * */
    pub fn opEquals (self, o : SockAddr)-> bool {
        if (self._port != o._port) return false;

        return (self._addr == o._addr);
    }

    impl std::stream::Streamable;
    impl core::types::Hashable;
}

pub def Ipv4Addr : std::net::addr::v4::Ipv4Addr;
pub def Ipv6Addr : std::net::addr::v6::Ipv6Addr;


/**
 * Common Ipv4 addresses
 */
pub enum
| LOCALHOST   = copy Ipv4Addr ([127, 0, 0, 1])
| UNSPECIFIED = copy Ipv4Addr ([0, 0, 0, 0])
| BROADCAST   = copy Ipv4Addr ([255, 255, 255, 255])
 -> Ipv4;

/**
 * Common Ipv6 addresses
 */
pub enum
| LOCALHOST   = copy Ipv6Addr ([0, 0, 0, 0, 0, 0, 0, 1])
| UNSPECIFIED = copy Ipv6Addr ([0, 0, 0, 0, 0, 0, 0, 0])
 -> Ipv6;
