mod std::fs::path;

import core::object, core::typeinfo, core::exception;
import core::duplication, core::array, core::dispose;

import etc::c::files;
import std::conv;
import std::collection::vec;
import std::stream;
import std::hash;

pub class @final Path {

    prv let dmut _parts = Vec!{[c8]}::new ();

    /**
     * Create a new path from a utf32 path (simply converts it into a [c8])
     * @example: 
     * =========
     * let dmut path = Path::new ("foo/bar/baz.txt");
     * assert (path.parts () == ["foo"s8, "bar"s8, "baz.txt"s8]);
     * =========
     */    
    pub self (path : [c32]) with self (path.to![c8] ()) {}
    
    /**
     * Create a new path from a utf8 path
     * @example: 
     * =========
     * let dmut path = Path::new ("foo/bar/baz.txt"s8);
     * assert (path.parts () == ["foo"s8, "bar"s8, "baz.txt"s8]);
     * =========
     */
    pub self (path : [c8], sep : c8 = '/'c8) {
        let mut last = 0us;
        for i in 0us .. path.len {
            if (path[i] == sep) {
                self._parts:.push (copy (path[last .. i]));
                last = i + 1us;
            }
        }
        if (last != path.len)
            self._parts:.push (copy (path [last..$]));
    } catch {
        _ : &OutOfArray => {} 
    }

    prv self (dmut path : &Vec!([c8])) with _parts = alias path {}

    prv self (path : [[c8]]) {
        for i in path {
            self._parts:.push (copy i);
        }
    }
    
    /**
     * Transform the path into a os usable path
     * @example: 
     * ============
     * let dmut path = Path::new ("/"s8);
     * path:.push ("foo"s8);
     * path:.push ("test.txt"s8)
     * assert (path.toStr () == "/foo/test.txt"s8);
     * ============
     */
    pub def toStr (self, sep : c8 = '/'c8)-> dmut [c8] {
        let dmut res = Vec!(c8)::new ();
        let mut fst = true;
        for i in self._parts {
            if !fst {
                res:.push (sep);
            }
            fst = false;
            for j in i {
                res:.push (j);
            }                    
        }
        return copy res[];
    }

    /**
     * Append a path to the current path
     * @example: 
     * ===========
     * let dmut path = Path::new ("/"s8);
     * path:.push ("foo/bar/"s8);
     * path:.push ("test.txt"s8)
     * assert (path.toStr () == "/foo/bar/test.txt"s8);
     * ===========
     */
    pub def push (self, path : [c8], sep : c8 = '/'c8) -> dmut &Path {
        let dmut aux = Path::new (self._parts[]);
        {            
            let mut last = 0us;
            for i in 0us .. path.len {
                if (path[i] == sep) {
                    aux._parts:.push (copy (path[last .. i]));
                    last = i + 1us;
                }
            }
            if (last != path.len) {
                aux._parts:.push (copy (path [last..$]));
            }
        } catch {
            _ : &OutOfArray => {
            } 
        }
        
        return alias aux;
    }


    /**
     * Append a path to the current path
     * @example: 
     * ===========
     * let dmut path = Path::new ("/"s8);
     * path:.push (Path::new ("foo/bar/"s8));
     * path:.push (Path::new ("test.txt"s8))
     * assert (path.toStr () == "/foo/bar/test.txt"s8);
     * ===========
     */
    pub def push (self, path : &Path) -> dmut &Path {
        let dmut aux = Path::new (self._parts[]);
        for i in path._parts {
            aux._parts:.push (copy i);
        }
        return alias aux;
    }

    
    /**
     * @returns: the parts composing the path
     * @example: 
     * ==========
     * let dmut path = Path::new ("/"s8);
     * path:.push ("foo/bar/"s8);
     * path:.push ("test.txt"s8)
     * assert (path.parts () == [""s8, "foo"s8, "bar"s8, "test.txt"s8]);
     * ==========
     */
    pub def parts (self)-> [[c8]] {
        return self._parts[];
    }

    /**
     * Create a new path pointing to the parent directory of the current path
     * @info: if self points to the root dir, its parent will also point to root
     * @example: 
     * ===========
     * let path = Path::new ("/foo/bar/baz.txt"s8);
     * let parent = path.parent ();
     * assert (parent.toStr () == "/foo/bar"s8);
     * ===========
     */
    pub def parent (self)-> dmut &Path {
        if (self._parts.len () == 0us) {
            return Path::new ("");
        } else {
            let dmut aux = Vec!([c8])::new ();
            for i in 0us .. self._parts.len () - 1us {
                match (self._parts [i])? {
                    Ok (x:_) => 
                        aux:.push (x);
                }
            }
            return Path::new (alias aux);
        }
    }
    
    /**
     * @returns: the file name of the current path
     * @example: 
     * =============
     * let path = Path::new ("/foo/bar/baz.txt"s8);
     * assert (path.file () == "baz.txt"s8);
     * let path2 = Path::new (""s8);
     * assert (path2.file () == ""s8);
     * =============
     */
    pub def file (self)-> [c8] {
        if (self._parts.len () > 0us) {
            return self._parts[self._parts.len () -1us]
        }
        ""s8
    } catch {
        _ => __pragma!panic ();
    }


    /**
     * @returns: the root name of the current path
     * @example: 
     * =============
     * let path = Path::new ("/foo/bar/baz.txt"s8);
     * assert (path.root () == "/"s8);
     * let path2 = Path::new ("foo/bar"s8);
     * assert (path2.root () == "foo"s8);
     * =============
     */
    pub def root (self)-> [c8] {
        if (self._parts.len () > 0us) {
            self._parts [0us]
        } else {
            ""s8
        }
    } catch {
        _ => __pragma!panic ();
    }

    /**
     * @returns: a new path where the extension of the file has been removed
     * @example: 
     * ============
     * let path = Path::new ("/foo/bar/baz.txt"s8).stripExtension ();
     * assert (path.file () == "baz"s8);
     *
     * let path2 = Path::new ("/foo/bar/baz.tar.gz"s8).stripExtension ();
     * assert (path2.file () == "baz.tar"s8);
     *
     * let path3 = Path::new ("/foo/bar/baz"s8).stripExtension ();
     * assert (path3.file () == "baz"s8);
     * ============
     */
    pub def stripExtension (self)-> dmut &Path {
        let dmut res = self.parent ();
        if (self._parts.len () > 0us) {
            let mut file = self.file ();
            
            for i in file.len - 1us ... 0us {
                if (file [i] == '.'c8) {
                    file = file[0us..i];
                    break {}
                }
            } catch {
                _ => { }
            }
            res._parts:.push (file);
        }         
        alias res
    }

    /**
     * @returns: the extension of the file of the path
     * @example: 
     * ==============
     * let path = Path::new ("/foo/bar/baz.txt"s8);
     * assert (path.extension () == "txt"s8);
     *
     * let path2 = Path::new ("/foo/bar/baz.tar.gz"s8);
     * assert (path2.extension () == "gz"s8);
     *
     * let path3 = Path::new ("/foo/bar/baz"s8);
     * assert (path3.extension () == ""s8);
     * ==============
     */
    pub def extension (self)-> [c8] {
        if (self._parts.len () > 0us) {
            let file = self.file ();
            if (file.len != 0us) {
                for i in file.len - 1us ... 0us {
                    if (file [i] == '.'c8) {
                        return file [i+1us .. $];
                    }
                }
            } catch {
                _ => { }
            }            
        }         
        []
    }

    /**
     * @returns: a new path where the extension of the file has been removed
     * @example: 
     * ============
     * let path = Path::new ("/foo/bar/baz"s8).addExtension ("txt"s8);
     * assert (path.file () == "baz.txt"s8);
     *
     * let path2 = Path::new ("/foo/bar/baz.tar"s8).addExtension ("gz"s8);
     * assert (path2.file () == "baz.tar.gz"s8);
     * ============
     */
    pub def addExtension (self, ext : [c8])-> dmut &Path {
        let dmut res = self.parent ();
        if (self._parts.len () > 0us) {
            let mut file = self.file ();
            res._parts:.push (file ~ "."s8 ~ ext);
        } else {
            res._parts:.push ("."s8 ~ ext);
        }
        alias res
    }

    /**
     * @returns: a new path with the prefix removed
     * @example: 
     * =====================
     * let path = Path::new ("/foo/bar/baz/file.txt"s8).removePrefix (Path::new ("/foo/bar"s8));
     * assert (path.toStr () == "baz/file.txt"s8);
     * =====================
     */
    pub def removePrefix (self, prefix : &Path)-> dmut &Path {
        import std::algorithm::comparison;
        let mut j = 0us;

        for i in 0us .. comparison::min (prefix._parts.len (), self._parts.len ()) {
            if (prefix._parts [i] != self._parts [i]) {
                j = i + 1us ;
                break { }
            }
            j = i + 1us;
        }
        
        let dmut res = Vec!{[c8]}::new ();
        for i in j .. self._parts.len () {            
            res:.push (copy self._parts [i]);
        }
        
        return Path::new (alias res);
    } catch {
        _ => {
            return Path::new (""s8);
        }
    }


    /**
     * Remove the root of the path 
     * @example: 
     * ====================
     * assert (Path::new ("/path/to/somewhere"s8).removeRoot ().toStr () == "path/to/somewhere");
     * assert (Path::new ("path/to/somewhere"s8).removeRoot ().toStr () == "to/somewhere");
     * ====================
     */
    pub def removeRoot (self)-> dmut &Path {
        if (self._parts.len () != 0us) {
            let dmut res = Vec!{[c8]}::new ();
            for i in 1us .. self._parts.len () {
                res:.push (copy self._parts [i]);
            }

            return Path::new (alias res);
        } else {
            return Path::new (""s8);
        }
    } catch {
        _ => {
            return Path::new (""s8);
        }
    }

    
    impl Streamable;
    impl Hashable;
}
