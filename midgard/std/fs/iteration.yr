/**
 * This module implements iterators, to iterate through directories and files.
 * @Authors: Emile Cadorel
 * @License: GPLv3
 * <hr>
 * @example:
 * ```
 * use std::fs::path;
 * use std::fs;
 *
 * // Iteration through the directory ./some/dir
 * for entry in sys::readDir (Path ("./some/dir"s8)) {
 *     match entry {
 *         // path field is public, so it can be used in pattern deconstruction
 *         FsEntry (path-> p, kind-> FsEntryKind::DIR) => println ("Directory : ", p.toStr ());
 *         FsEntry (path-> p, kind-> FsEntryKind::FILE)-> println ("File : ", p.toStr ());
 *     }
 * }
 * ```
 */
in iteration;

use std::fs::{errors, path};
use std::{io, stream, conv};

use etc::runtime::errno;
use etc::c::dirent;
use core::exception;

extern (C) fn printf (c : *c8, ...);

pub enum : u8
| FILE = 1
| DIR = 2
| LINK = 3
| UNKNOWN = 4
 -> FsEntryKind;

/**
 * A FsEntry is a entry of a file system element, ancestor of DirEntry and FileEntry
 * A FsEntry is also used to represent unknwon entries
 */
pub record FsEntry {

    // The path of the fs entry
    let _path : Path;

    // The kind of fs entry
    let _kind : FsEntryKind;

    /**
     * @params:
     *    - path: the path of the fs entry (absolute or relative to the cwd).
     */
    pub self (path : Path, kind : FsEntryKind)
        with _path = path
        , _kind = kind
    {}

    @field
    pub fn kind (self)-> FsEntryKind {
        self._kind
    }

    @field
    pub fn path (self)-> Path {
        self._path
    }

    /**
     * Direntries are iterable.
     * @example:
     * ```
     * use std::fs::_;
     *
     * /*
     *  * Verify that a directory contains a file named fName (recursively)
     * */
     * fn exists (fName : [c8], dir : FsEntry)-> bool
     *    throws &FsError
     * {
     *    for e in dir {
     *        match e {
     *            FsEntry (kind-> FsEntryKind::FILE, path-> p) => {
     *                if p.file () == fName { return true; }
     *            }
     *            subDir = FsEntry (kind-> FsEntryKind::DIR) => {
     *                if (exists (fName, subDir)) return true;
     *            }
     *        }
     *    }
     *
     *    false
     * }
     *
     * exists ("foo", fs::sys::readDir (Path ("./some/dir")));
     * ```
     */
    pub fn begin (self)-> DirIterator {
        if (self._kind == FsEntryKind::DIR) {
            DirIterator (opendir (self._path.toStr ().toStringZ ()), self._path)
        } else {
            DirIterator (null, self._path)
        }
    }

    /**
     * @returns: the iterator to the end of the directory, to know when to stop the iteration.
     */
    pub fn end (self)-> *void {
        null
    }

    /**
     * Follow the link, and return the path
     * @returns:
     *   - if the entry is a link => the path where the link leads
     *   - else => the path
     */
    pub fn follow (self)-> Path {
        if self._kind == FsEntryKind::LINK {
            let dmut path = ['\u{0}'c8 ; 256];
            let size = readlink (self._path.toStr ().toStringZ (), alias path.ptr, cast!i32 (path.len));
            if (size == -1) {
                return self._path;
            }

            Path (copy path [0 .. size])
        } else {
            self._path
        }
    }

    impl std::stream::Streamable {
        pub over toStream (self, dmut stream : &StringStream) {
            match self._kind {
                FsEntryKind::FILE => {
                    stream:.write ("file (", self._path.toStr (), ")");
                }
                FsEntryKind::DIR => {
                    stream:.write ("dir (", self._path.toStr (), ")");
                }
                FsEntryKind::LINK => {
                    stream:.write ("link (", self._path.toStr (), ")");
                }
                _ => {
                    stream:.write ("unk (", self._path.toStr (), ")");
                }
            }
        }
    }
}

/**
 * Dir iterator, instantiated by DirEntry::begin, and used to iterate through the entries of a directory.
 */
entity DirIterator {

    // The directory being read (C dir iteration)
    let mut _dir : *(void) = null;

    // The path of the directory being iterated
    let _root : Path = Path ();

    // The iterator on the directory (C dir iteration)
    let mut _curr : *(dirent) = null;

    /**
     * @params:
     *    - dir: the opendir handle
     *    - root: the path of the directory being iterated
     */
    pub self (dir : *void, root : Path)
        with _dir = dir
        , _curr = null
        , _root = root
    {
        self:.next ();
    }

    /**
     * @returns: true if the iterators point to the same entry
     */
    pub fn opEquals (self, end : *void) -> bool {
        self._dir == end
    }

    impl core::types::Iterable {

        /**
         * Advance the iterator to the next element.
         */
        pub over next (mut self)  {
            if (self._dir != null) {
                self._curr = readdir (self._dir);
                if (self._curr == null) {
                    self:.dispose ();
                } else {
                    let c = unsafe {
                        *self._curr
                    };

                    match c.d_type {
                        DirEntryTypes::DT_DIR => { // ignore current and rewind dir
                            if (c.d_name[0 .. 2] == ".."s8 && c.d_name [2] == '\u{0}') ||
                                (c.d_name[0 .. 1] == "."s8 && c.d_name [1] == '\u{0}')
                                self:.next ();
                        }
                    }
                }
            }
        }
    }

    /**
     * @returns: the entry being pointed by the iterator.
     * @warning: panic if the iterator is invalid
     */
    pub fn get {0, 1} (self)-> FsEntry {
        let c = unsafe {
            *self._curr
        };

        let path = self._root.push (unsafe { c.d_name.ptr.fromStringZ () });
        match c.d_type {
            DirEntryTypes::DT_DIR => { FsEntry (path, kind-> FsEntryKind::DIR) }
            DirEntryTypes::DT_REG => { FsEntry (path, kind-> FsEntryKind::FILE) }
            DirEntryTypes::DT_LNK => { FsEntry (path, kind-> FsEntryKind::LINK) }
            _ => { FsEntry (path, kind-> FsEntryKind::UNKNOWN) }
        }
    }

    fn dispose (mut self) {
        if (self._dir != null) {
            closedir (self._dir);
            self._dir = null;
        }
    }

    /**
     * Not needed, if the iterator is used to iterate, but can be used
     * if the begin method is called outside a for loop (which is totally deprecated, but not easy to ensure)
     */
    __dtor (mut self) {
        self:.dispose ();
    }

}
