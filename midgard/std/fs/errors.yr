/**
 * Error module for the errors that can occur when dealing with filesystem.
 * @Authors: Emile Cadorel
 * @License: GPLv3
 */

in errors;

use etc::runtime::errno;
use std::stream;

/**
 * Error code used to identify a specific filesystem error
 */
pub enum : u8
| FILE_CLOSED       = 1u8
| NOT_READABLE      = 2u8
| NOT_WRITABLE      = 3u8
| PERMISSION_DENIED = 4u8
| PARENT_DONT_EXIST = 5u8
| NOT_FOUND         = 6u8
| ALREADY_EXISTS    = 7u8
| IO_ERROR          = 8u8
| LINK_LOOP         = 9u8
| PATH_TOO_LONG     = 10u8
| DIR_NOT_EMPTY     = 11u8
| NOT_A_FILE        = 12u8
 -> FsErrorCode;


/**
 * Error thrown when an error occur in the std::fs module.
 */
@final
pub class FsError over core::exception::io::IOError {

    // The message of the error
    pub let msg : [c8];

    // The error code to identify the error
    pub let code : FsErrorCode;

    /**
     * @params:
     *    - code: the error code to identify the error
     *    - msg: the message to explain the reason of the error
     */
    pub self (code : FsErrorCode, msg : [c8]) with msg = msg, code = code {}

    impl Streamable {
        pub over toStream (self, dmut stream : &StringStream) {
            stream:.write (self.__typeinfo__.name);
            if (self.trace.len != 0u64) {
                stream:.write (" ("):.write (fs::errors::to![c8] (self.code)):.write (") : "):.writeln (self.msg);
                stream:.write (self.getStackTrace ());
            } else {
                stream:.write (" ("):.write (fs::errors::to![c8] (self.code)):.write (") : "):.writeln (self.msg);
            }
        }
    }
}

/**
 * Transform an errno error into an FsErrorCode
* @params:
 *   - err: the error returned by errno
 * @returns: a FsErrorCode usable by FsError exception
 */
pub fn if is!{T}{X of FsErrorCode} to {T} (err : ErrnoValue) -> FsErrorCode {
    match err {
        ErrnoValue::EACCES => { FsErrorCode::PERMISSION_DENIED }
        ErrnoValue::ENOTDIR => { FsErrorCode::PARENT_DONT_EXIST }
        ErrnoValue::ENOENT => { FsErrorCode::NOT_FOUND }
        ErrnoValue::EBADF  => { FsErrorCode::FILE_CLOSED }
        ErrnoValue::ELOOP  => { FsErrorCode::LINK_LOOP }
        ErrnoValue::EEXIST  => { FsErrorCode::ALREADY_EXISTS }
        ErrnoValue::ENAMETOOLONG  => { FsErrorCode::PATH_TOO_LONG }
        ErrnoValue::ENOTEMPTY => { FsErrorCode::DIR_NOT_EMPTY }
        _ => { FsErrorCode::IO_ERROR }
    }
}

/**
 * Transform an error code into a readable string
 * @params:
 *    - err: the error code to transform into a readable string
 * @returns: a readable string
 */
pub fn if is!{U}{X of c8} to {C of [U], U, T of FsErrorCode} (err : T) -> [c8] {
    match err {
        FsErrorCode::FILE_CLOSED  => { "FILE_CLOSED" }
        FsErrorCode::NOT_READABLE => { "NOT_READABLE" }
        FsErrorCode::NOT_WRITABLE => { "NOT_WRITABLE" }
        FsErrorCode::PERMISSION_DENIED => { "PERMISSION_DENIED" }
        FsErrorCode::PARENT_DONT_EXIST => { "PARENT_DONT_EXIST" }
        FsErrorCode::NOT_FOUND => { "NOT_FOUND" }
        FsErrorCode::ALREADY_EXISTS => { "ALREADY_EXISTS" }
        FsErrorCode::IO_ERROR => { "IO_ERROR" }
        FsErrorCode::LINK_LOOP => { "LINK_LOOP" }
        FsErrorCode::PATH_TOO_LONG => { "PATH_TOO_LONG" }
        FsErrorCode::DIR_NOT_EMPTY => { "DIR_NOT_EMPTY" }
        FsErrorCode::NOT_A_FILE => { "NOT_A_FILE" }
        _ => { "" }
    }
}
