/**
 * This modules defines functions with `cte` values that can be used
 * to simplify template specialization. This module has nothing to do
 * with the `trait` semantic, so maybe we should rename it.
 *
 * @Authors: Emile Cadorel
 * @License: GPLv3
 * <hr>
 * @example:
 * ===
 * import std::traits;
 *
 * /*
 *   This function accept every integral type for T (u8 to usize, and i8 to isize)
 * */
 * fn if (isIntegral!{T} ()) foo {T} (a : T)-> T {
 *     a + cast!T (12)
 * }
 *
 * let a = foo ();
 *
 * cte if isFloating!{typeof (a)} () {
 *     println ("a is either a f32 or a f64");
 * } else {
 *     println ("a is something else");
 * }
 * ===
 */
in traits;

/**
 * @CTE
 * @returns: true if T is f32 or f64, false otherwise
 */
pub fn isFloating {T} ()-> bool {
    cte (is!{T} {U of f32} || is!{T} {U of f64})
}

/**
 * @CTE
 * @returns: true if T is an integer (signed or unsigned) false otherwise
 */
pub fn isIntegral {T} ()-> bool {
    cte (is!{T}{U of i8} || is!{T}{U of u8} ||
         is!{T}{U of i16} || is!{T}{U of u16} ||
         is!{T}{U of i32} || is!{T}{U of u32} ||
         is!{T}{U of i64} || is!{T}{U of u64} ||
         is!{T}{U of isize} || is!{T}{U of usize}
         )
}

/**
 * @CTE
 * @returns: true if T is a signed integer, false otherwise
 */
pub fn isSigned {T} ()-> bool {
    cte (is!{T}{U of i8} ||
         is!{T}{U of i16} ||
         is!{T}{U of i32} ||
         is!{T}{U of i64} ||
         is!{T}{U of isize}
         )
}

/**
 * @CTE
 * @returns: true if T is a unsigned integer, false otherwise
 */
pub fn isUnsigned {T} ()-> bool {
    cte (is!{T}{U of u8} ||
         is!{T}{U of u16} ||
         is!{T}{U of u32} ||
         is!{T}{U of u64} ||
         is!{T}{U of usize}
         )
}

/**
 * @CTE
 * @returns: true if T is a char type, false otherwise
 */
pub fn isChar {T} ()-> bool {
    cte (is!{T}{U of c8} || is!{T}{U of c32})
}

/**
 * @CTE
 * @returns: true
 */
pub fn isTuple{T, U...}()-> bool {
    true
}

/**
 * @CTE
 * @returns: false
 */
pub fn isTuple {T}()-> bool {
    false
}

/**
 * @CTE
 * @returns: true if the type 'T' has a field named 'name'
 * */
pub fn hasField {record T, name : [c8]} ()-> bool {
    cte __pragma!compile (__pragma!field_type (T, name))
}

/**
 * @CTE
 * @returns: true if the type 'T' has a field named 'name'
 * */
pub fn hasField {entity T, name : [c8]} ()-> bool {
    cte __pragma!compile (__pragma!field_type (T, name))
}

/**
 * @CTE
 * @returns: true if the type 'T' has a field named 'name'
 * */
pub fn hasField {class T, name : [c8]} ()-> bool {
    cte __pragma!compile (__pragma!field_type (T, name))
}
