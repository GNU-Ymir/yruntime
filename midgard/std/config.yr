mod std::config;

import core::object, core::typeinfo, core::exception;
import core::array;
import core::dispose;

import std::io, std::stream;
import std::collection::vec;
import std::collection::map;


pub import std::config::conv;
pub import std::config::error;

/**
 * A configuration file is composed of nodes
 * Each node contains a different type of information
 */
pub class @abstract Config {

    prot self () {}

    pub def opIndex (self, i : i32) -> &Config
        throws &OutOfArray
    {
        if i >= 0
            self.opIndex (cast!usize (i))
        else {
            throw OutOfArray::new ();
        }
    }

    pub def opIndex (self, _ : usize)-> &Config
        throws &OutOfArray
    {
        throw OutOfArray::new ();
    }
    
    pub def opIndex (self, _ : [c32])-> &Config
        throws &OutOfArray
    {
        throw OutOfArray::new ();
    }

    pub def opIndexAssign (mut self, _ : usize, _ : &Config)-> void
        throws &OutOfArray
    {
        throw OutOfArray::new ();
    }
    
    pub def opIndexAssign (mut self, _ : [c32], _ : &Config)-> void
        throws &OutOfArray
    {
        throw OutOfArray::new ();
    }

    pub def opContains (self, _ : [c32])-> bool {
        false
    }
    
    impl Streamable;
    
}

/**
 * An array is a list of nodes
 * It has the same properties as a Vec!(&Config)
 * @example: 
 * ===============
 * let dmut array = Array::new ();
 * array:.push (Str::new ("foo"));
 * array:.push (Int::new (42));
 * ===============
 */
pub class @final Array over Config {

    let dmut _content = Vec!(&Config)::new ();

    /**
     * Creates a new Array of nodes, containing a pre constructed list of Configs
     * @params: 
     *    - nodes: some nodes to put in the array     
     */
    pub self (nodes : [&Config]) {
        for i in nodes
            self._content:.push (i);
    }

    /**
     * Creates a new empty Array
     */
    pub self () {}


    /**
     * Add a node at the end of the Array
     * @example: 
     * ==============
     * let dmut array = Array::new ();
     * array:.push (Int::new (1));
     * array:.push (Int::new (2));
     * match array [$ - 1u64] {// access the last element of the array
     *    Int(x:_) => assert (x == 2);
     * }
     * ==============
     */
    pub def push (mut self, node : &Config) -> void {
        self._content:.push (node);
    }
    
    /**
     * Access an element at a given Index in the array
     * @throws: 
     *   - &OutOfArray: if the index is not in the array
     * @example: 
     * =================
     * let i : &Config = Int::new (12);
     * let j : &Config = Int::new (42);
     * let dmut array = Array::new ([i, j]);
     * {
     *     match array [0] {
     *         Int (x:_)  => println ("index 0 contains : ", x);
     *     }
     * } catch {
     *    _: &OutOfArray => println ("Array does not contain elements");
     * }
     * =================
     */
    pub over opIndex (self, i : usize) -> &Config
        throws &OutOfArray
    {
        self._content[i]
    }

    /**
     * @returns: a slice of the elements contained in the array
     * @example: 
     * ====================
     * let i : &Config = Int::new (12);
     * let j : &Config = Int::new (42);
     * let dmut array = Array::new ([i, j]);
     * 
     * let slc : [&Config] = array [];
     * ====================
     */
    pub def opIndex (self)-> [&Config] {
        self._content []
    }

    /**
     * Change the element at index i
     * throws: 
     *   - &OutOfArray: if i is not a valid index of the array
     * @example: 
     * ===========
     * let i : &Config = Int::new (12);
     * let j : &Config = Int::new (42);
     * let dmut array = Array::new ([i]);
     * {
     *    (alias array) [0] = j;
     * } catch {
     *    _: &OutOfArray => println ("Array does not contain elements");
     * }
     */
    pub over opIndexAssign (mut self, i : usize, node : &Config) -> void
        throws &OutOfArray
    {
        (alias self._content) [i] = node
    }

    /**
     * An alias to get the length of the array
     * @example: 
     * ===========
     * let i : &Config = Int::new (12);
     * let j : &Config = Int::new (42);
     * let dmut array = Array::new ([i, j]);
     * {
     *    // print the last element of the array
     *    println (array [$ - 1u64]);
     * } catch {
     *    _: &OutOfArray => println ("Array does not contain elements");
     * }
     * ===========
     */
    pub def opDollar (self) -> usize {
        self._content.len ()
    }

    /**
     * @returns: the number of element contained in the array
     * @example: 
     * ==================
     * let i : &Config = Int::new (12);
     * let j : &Config = Int::new (42);
     * let dmut array = Array::new ([i, j]);
     * assert (array.len () == 2us);
     * ==================
     */
    pub def len (self) -> usize {
        self._content.len ()
    }

    /**
     * Used to iterate over the array, (similar iteration as Vec!(&Config)).
     * @example: 
     * =============
     * let a : &Config = Int::new (12);
     * let b : &Config = Int::new (42);
     * let dmut array = Array::new ([a, b]);
     * for i, j in array {
     *     println ("At ", j, " => ", i); // At 0 => Ok (Int (12)), At 1 => Ok (Int (42))
     * }
     * =============
     */
    pub def begin (self) -> dmut &VecIterator!(&Config) {
        alias self._content.begin ()
    }

    /**
     * Used to iterate over the array, (similar iteration as Vec!(&Config))
     * @cf: begin
     */
    pub def end (self) -> &VecIterator!(&Config) {
        self._content.end ()
    }

    impl Streamable {

        /**
         * Arrays are printable
         */
        pub over toStream (self, dmut stream : &StringStream) -> void {
            stream:.write ("Array ("s8);
            for i, j in self._content {
                if j != 0u64 { stream:.write (", "s8); }
                stream:.write (i);
            }
            stream:.write (")");
        }
    }
}

/**
 * A dictionnary associates to values to string keys
 * It has the same properties as HashMap!([c32], &Config)
 * @example: 
 * ============
 * let dmut dict = Dict::new ();
 * dict:.insert ("foo", Str::new ("foo"));
 * dict:.insert ("bar", Int::new (42));
 * dict:.insert ("baz", Array::new ());
 * ============
 */
pub class @final Dict over Config {

    let dmut _content = HashMap!{[c32], &Config}::new ();

    /**
     * Creates a new empty dictionnary
     */
    pub self () {}

    /**
     * Insert a new value in the dict
     * @info: if the key was already in the dict, its old value is replaced by the new one
     * @params: 
     *    - k: the index key 
     *    - value: the value to insert
     * @example: 
     * =============
     * let dmut dict = Dict::new ();
     * dict:.insert ("foo", Str::new ("foo"));
     * dict:.insert ("foo", Int::new (42));
     * println (dict); // Dict (foo=> Int (42))
     * =============
     */
    pub def insert (mut self, k : [c32], value : &Config)-> void {
        self._content:.insert (k, value);
    }

    /**
     * Access the element at index k
     * @throws: 
     *    - &OutOfArray: if the index is not found in the dictionnary
     * @params: 
     *    - k: a key index
     * @example: 
     * ================
     * let dmut dict = Dict::new ();
     * dict:.insert ("foo", Str::new ("foo"););
     * dict:.insert ("bar", Int::new (42));
     * {
     *     println (dict["foo"]);
     * } catch {
     *     _ : &OutOfArray => {
     *         println ("foo not found in ", dict);
     *     }
     * }
     * 
     * println (dict["bar"]?); // put it in an option type
     * ================
     */
    pub over opIndex (self, k : [c32])-> &Config
        throws &OutOfArray
    {
        self._content [k]
    }

    /**
     * Change the value at index k 
     * @info: if the value was not in the dictionnary it is inserted
     * @params: 
     *    - k: a index key
     *    - value: the value to insert
     * @example: 
     * ==============
     * let dmut dict = Dict::new ();
     * (alias dict) ["foo"] = Str::new ("foo");    
     * (alias dict) ["bar"] = Int::new (42);
     * 
     * // replace the value at foo index
     * (alias dict) ["foo"] = Int::new (12);
     * ==============
     */
    pub over opIndexAssign (mut self, k : [c32], value : &Config) -> void {
        self._content:.insert (k, value);
    }


    /**
     * @return: the value at index k, if it exists, otherwise return value
     * @params: 
     * - k: an index key
     * - value: the value to return if the key is not found, or of the wrong type
     * @example: 
     * ================
     * let dmut dict = Dict::new ();
     * (alias dict) ["foo"] = Str::new ("foo");    
     * (alias dict) ["bar"] = Int::new (42);
     *
     * assert (dict.getOr ("bar", 56) == 42);
     * assert (dict.getOr ("baz", 56) == 56);
     * ================
     */
    pub def getOr {T} (self, k : [c32], value : T)-> T {
        if (k in self._content) {
            {
                import std::config::conv;
                return self._content [k].to!{T} ();                
            } catch {
                _ => return value;
            }
        } else return value;
    }
    
    /**
     * Check if a key can be found in the dictionnary 
     * @params: 
     *   - k: the key to find
     * @example: 
     * =================
     * let dmut dict = Dict::new ();
     * (alias dict) ["foo"] = Str::new ("foo");    
     * (alias dict) ["bar"] = Int::new (42);
     * 
     * assert ("foo" in dict);     
     * =================    
     */
    pub over opContains (self, k : [c32])-> bool {
        k in self._content
    }

    /**
     * Used to iterate over the dictionnary
     * @example: 
     * ==============
     * let dmut dict = Dict::new ();
     * (alias dict) ["foo"] = Str::new ("foo");    
     * (alias dict) ["bar"] = Int::new (42);
     * for i, j in dict {
     *     println ("At ", i " => ", j); // At Ok(foo) => Ok (Str (foo)), At Ok (bar) => Ok (Int (42))
     * }
     * ==============
     */
    pub def begin (self) -> dmut &MapIterator!{[c32], &Config} {
        alias self._content.begin ()
    }

    /**
     * Used to iterate over the dictionnary
     * @cf: begin
     */
    pub def end (self) -> &MapIterator!{[c32], &Config} {
        self._content.end ()
    }

    
    impl Streamable {

        /**
         * Dictionnary are printable 
         */
        pub over toStream (self, dmut stream : &StringStream) -> void {
            stream:.write ("Dict ("s8);
            let mut k = 0us;
            for i, j in self._content {
                if k != 0us { stream:.write (", "s8); }
                stream:.write (i):.write ("=> "s8):.write (j);
                k += 1us;
            }
            stream:.write (")"s8);
        }
    }    
}

/**
 * Configuration encoding of an int 
 * @example: 
 * ============
 * let node : &Config = Int::new (12);
 * match node {
 *    Int (i-> i:_) => assert (i == 42);
 * }
 * ============
 */
pub class @final Int over Config {

    pub let i : i64;

    pub self (i : i64) with i = i {}

    pub self (i : i32) with i = cast!i64 (i) {}

    impl Streamable {
        pub over toStream (self, dmut stream : &StringStream) -> void {
            stream:.write ("Int ("s8):.write (self.i):.write (")"s8);
        }
    }
}


/**
 * Configuration encoding of a String
 * It contains a [c32] 
 * @example: 
 * ============
 * let node : &Config = Str::new ("foo");
 * match node {
 *    Int (str-> str:_) => assert (str == "foo");
 * }
 * ============
 */
pub class @final Str over Config {

    pub let str : [c32];

    pub self (str : [c32]) with str = str {}

    impl Streamable {
        pub over toStream (self, dmut stream : &StringStream) -> void {
            stream:.write ("Str ("s8):.write (self.str):.write (")"s8);
        }
    }
}

/**
 * Configuration encoding of a bool
 * @example: 
 * ===========
 * let node : &Config = Bool::new (true);
 * match node {
 *    Bool (b-> b:_) => assert (b == true);
 * }
 * ===========
 */
pub class @final Bool over Config {
    pub let b : bool;

    pub self (b : bool) with b = b {}

    impl Streamable {
        pub over toStream (self, dmut stream : &StringStream)-> void {
            stream:.write ("Bool ("s8):.write (self.b):.write (")"s8);
        }
    }
}


/**
 * Configuration encoding of a float
 * @example: 
 * ============
 * let node : &Config = Float::new (12.48)
 * match node {
 *    Float (f-> f:_) => assert (f == 12.48);
 * }
 * ============
 */
pub class @final Float over Config {
    pub let f : f64;

    pub self (f : f64) with f = f {}

    impl Streamable {
        pub over toStream (self, dmut stream : &StringStream)-> void {
            stream:.write ("Float ("s8):.write (self.f):.write (")"s8);
        }
    }
}

/**
 * Configuration encoding of nothing
 * @example:
 * ===========
 * let node : &Config = None::new ();
 * match node {
 *    None () => {}
 * }
 * ===========
 */
pub class @final None over Config {
    pub self () {}

    impl Streamable {
        pub over toStream (self, dmut stream : &StringStream)-> void {
            stream:.write ("None ()"s8);
        }
    }
}
