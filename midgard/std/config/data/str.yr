in str;

use std::{stream, conv};

/**
 * Configuration encoding of a String ([c8]).
 * @example:
 * ============
 * let node : &Config = copy Str ("foo");
 *
 * match node {
 *    Int (value-> str : _) => assert (str == "foo");
 * }
 * ============
 */
@final
pub class Str over Config {

    let _str : [c8];

    /**
     * Create a string containing the value `str`
     */
    pub self (str : [c8])
        with _str = str
    {}

    /**
     * @returns: the value contained in the config
     * */
    @field
    pub fn value (self)-> [c8] {
        self._str
    }

    impl Streamable {
        pub over toStream (self, dmut stream : &StringStream) -> void {
            stream:.write ("Str ("s8):.write (self._str):.write (")"s8);
        }
    }
}
