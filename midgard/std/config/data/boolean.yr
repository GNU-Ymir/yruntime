in boolean;

use std::{stream, conv};

/**
 * Configuration encoding of a bool
 * @example:
 * ===========
 * let node : &Config = copy Bool (true);
 *
 * match node {
 *    Bool (value-> b) => assert (b == true);
 * }
 * ===========
 */
@final
pub class Bool over Config {

    let _b : bool;

    /**
     * Create a Bool containing the value `b`
     */
    pub self (b : bool)
        with _b = b
    {}

    /**
     * @returns: the value contained in the config
     * */
    @field
    pub fn value (self)-> bool {
        self._b
    }

    impl Streamable {
        pub over toStream (self, dmut stream : &StringStream)-> void {
            stream:.write ("Bool ("s8):.write (self._b):.write (")"s8);
        }
    }
}
