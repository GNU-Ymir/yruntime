in int;

use std::{stream, conv};

/**
 * Configuration encoding of an int (i64).
 * @example:
 * ============
 * let node : &Config = copy Int (12);
 *
 * match node {
 *    Int (value-> i) => assert (i == 12);
 * }
 * ============
 */
@final
pub class Int over Config {

    let _i : i64;

    /**
     * Creates an Int containing the value `i`
     */
    pub self (i : i64)
        with _i = i
    {}

    /**
     * @returns: the value contained in the config
     * */
    @field
    pub fn value (self)-> i64 {
        self._i
    }

    impl Streamable {
        pub over toStream (self, dmut stream : &StringStream) -> void {
            stream:.write ("Int ("s8):.write (self._i):.write (")"s8);
        }
    }
}
