/**
 * Error module for the errors that can occur when dealing with configs.
 * @Authors: Emile Cadorel
 * @License: GPLv3
 */

in errors;

use core::{types::info, exception};
use std::stream;

pub class ConfigError over core::exception::Exception {
    pub self () {}
}


/*!
 * ====================================================================================================
 * ====================================================================================================
 * =====================================          ARRAY          ======================================
 * ====================================================================================================
 * ====================================================================================================
 */

/**
 * Error thrown when an array was index outside its range
 * */
@final
pub class ConfigOutError over ConfigError {

    // The length of the array
    let _len : usize;

    // The index of the access
    let _index : u32;

    pub self (len : usize, index : u32)
        with _len = len
        , _index = index
    {}

    impl stream::Streamable {
        pub over toStream (self, dmut stream : &StringStream) {
            stream:.write (self.__typeinfo__.name):.write (" ("s8);
            stream:.write (self._len, " <= ", self._index, ')');

            if (self.hasTrace ()) {
                stream:.writeln (""):.write (":"s8):.write (self.getStackTrace ());
            }
        }
    }
}

/*!
 * ====================================================================================================
 * ====================================================================================================
 * ======================================          DICT          ======================================
 * ====================================================================================================
 * ====================================================================================================
 */

/**
 * Error thrown when a dict is indexed by a key that it does not contain
 * */
@final
pub class ConfigKeyError over ConfigError {

    // The index of the access
    let _key : [c8];

    pub self (key : [c8])
        with _key = key
    {}

    impl stream::Streamable {
        pub over toStream (self, dmut stream : &StringStream) {
            stream:.write (self.__typeinfo__.name):.write (" ("s8);
            stream:.write (self._key, ')');

            if (self.hasTrace ()) {
                stream:.writeln (""):.write (":"s8):.write (self.getStackTrace ());
            }
        }
    }
}
