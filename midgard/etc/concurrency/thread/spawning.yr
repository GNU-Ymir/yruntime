in spawning;

/**
 * Create a new thread that will executed a function
 * @params:
 *    - attr: the attribute of the thread (see libpthread )
 *    - call: the function to call
 *    - data: the parameters to pass to the function
 * @returns:
 *    - id: the id of the created thread
 */
pub mod Runtime {class T} {
    pub extern (C) fn _yrt_thread_create (id : *usize, attr : *void, func : fn (T)-> void, data : T);
}

/**
 * Wait for the completion of a thread
 * @params:
 *    - p: the id of the thread to wait
 * @returns:
 *    - retval: the return value of the thread
 */
pub extern (C) fn _yrt_thread_join (id : usize, retVal : *(*void));

/**
 * Detach a thread from the main thread, but does not kill it
 * @params:
 *    - p: the id of the thread
 */
pub extern (C) fn _yrt_thread_detach (id : usize);

/**
 * Kill a thread
 * @params:
 *    - p: the id of the thread
 */
pub extern (C) fn _yrt_thread_cancel (id : usize);

/**
 * Exit the current thread and return a value
 * @params:
 *    - p: the value to return
 */
pub extern (C) fn _yrt_thread_exit (val : *void);


@final
pub class FnThreadLauncher {

    // The data to send to the thread at start
    pub let dmut thContent : Thread;

    // THe function to launch
    let _func : fn (Thread)-> void;

    /**
     * New thread launcher
     * */
    pub self (func : fn (Thread)-> void, withPipes : bool)
        with thContent = Thread (0us, withPipes)
        , _func = func
    {}

    /**
     * Launch the thread function
     * */
    pub fn start (self) {
        self._func (self.thContent)
    }
}

@final
pub class DgThreadLauncher {

    // The data to send to the thread at start
    pub let dmut thContent : Thread;

    // THe function to launch
    let _func : dg (Thread)-> void;

    /**
     * New thread launcher
     * */
    pub self (func : dg (Thread)-> void, withPipes : bool)
        with thContent = Thread (0us, withPipes)
        , _func = func
    {}

    /**
     * Launch the thread function
     * */
    pub fn start (self) {
        self._func (self.thContent)
    }
}

/**
 * Pthread takes a void (void*) function pointer
 * */
pub fn thread_fn_main (what : &FnThreadLauncher)-> void {
    what.start ();
}

/**
 * Pthread takes a void (void*) function pointer
 * */
pub fn thread_dg_main (what : &DgThreadLauncher)-> void {
    what.start ();
}
