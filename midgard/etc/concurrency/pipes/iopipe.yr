in iopipe;

use pipes::{opipe, ipipe};
use etc::c::{files, socket};
use core::exception;

/**
 * IO Pipes
 * */
@final
pub class IOPipe {

    // The pipe used to read
    let dmut _in = copy IPipe (pipe-> -1);

    // The pipe used to write
    let dmut _out = copy OPipe (pipe-> -1);

    /**
     * Empty IOPipe
     * */
    pub self empty () {}

    /**
     * Create a new io pipe
     * */
    pub self new ()
        throws IOError
    {
        let dmut pipes : [i32 ; 2] = [0, 0];
        if (files::pipe (pipes.ptr) != 0) {
            throw copy IOError ();
        }

        self._in = copy IPipe (pipe-> pipes [0]);
        self._out = copy OPipe (pipe-> pipes [1]);
    }

    /**
     * @returns: the reading pipe
     * */
    @field
    pub fn ipipe (mut self)-> dmut &(ipipe::IPipe) {
        alias self._in
    }

    /**
     * @returns: the writing pipe
     * */
    @field
    pub fn opipe (mut self)-> dmut &(opipe::OPipe) {
        alias self._out
    }

    /**
     * Dispose the input/output pipes
     * */
    pub fn dispose (mut self) {
        self._in:.dispose ();
        self._out:.dispose ();
    }

}
