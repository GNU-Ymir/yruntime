/**
 * This module defines C binding functions to manage socket and tcp/ip binding and connections.
 * @Authors: Emile Cadorel
 * @License: GPLv3
 */

in socket;

pub record sockaddr_in {
    pub let mut sin_family : u16;
    pub let mut sin_port   : u16;
    pub let mut sin_addr   : in_addr;
    pub let mut aux : [u8 ; 8];

    pub self (sin_family : u16 = 0,
              sin_port : u16 = 0,
              sin_addr : in_addr = in_addr (s_addr-> 0),
              aux : [u8 ; 8] = [0 ; 8])
        with sin_family = sin_family
        , sin_port = sin_port
        , sin_addr = sin_addr
        , aux = aux
    {}
}

pub record sockaddr_in6 {
    pub let mut sin6_family : u16;
    pub let mut sin6_port : u16;
    pub let mut sin6_flowinfo : u32;
    pub let mut sin6_addr : in6_addr;
    pub let mut sin6_scope_id : u32;

    pub self (sin6_family : u16 = 0,
              sin6_port : u16 = 0,
              sin6_flowinfo : u32 = 0,
              sin6_addr : in6_addr = in6_addr (),
              sin6_scope_id : u32 = 0)
        with sin6_family = sin6_family
        , sin6_port = sin6_port
        , sin6_flowinfo = sin6_flowinfo
        , sin6_addr = sin6_addr
        , sin6_scope_id = sin6_scope_id
    {}
}

pub record in_addr {
    pub let mut s_addr : u32 ;
    pub self (s_addr : u32 = 0)
        with s_addr = s_addr
    {}
}

pub record in6_addr {
    pub let mut s6_addr : [u8 ; 16u32];

    pub self (s6_addr : [u8 ; 16] = [0 ; 16])
        with s6_addr = s6_addr
    {}
}

pub record fd_set {
    pub let padd : [u8 ; 128u32];
    pub self (padd : [u8 ; 128] = [0 ; 128])
        with padd = padd
    {}
}


pub record pollfd_t {
    pub let fd : i32;
    pub let event : PollEvent;
    pub let revents : PollEvent;

    pub self (fd : i32, event : PollEvent, revents : PollEvent = PollEvent::NONE)
        with fd = fd
        , event = event
        , revents = revents
    {}
}

pub record linger {
    pub let l_onoff : i32;
    pub let l_linger : i32;

    pub self (onoff : i32, linger : i32)
        with l_onoff = onoff
        , l_linger = linger
    {}
}

pub extern (C) fn htons (i : u16)-> u16;
pub extern (C) fn htonl (i : u32)-> u32;
pub extern (C) fn ntohs (i : u16)-> u16;
pub extern (C) fn ntohl (i : u32)-> u32;

pub extern (C) fn socket (fam : AddressFamily, sock : SocketType, i : i32)-> i32;
pub extern (C) fn bind (i : i32, servaddr : *sockaddr_in, size : usize)-> i32;
pub extern (C) fn bind (i : i32, servaddr : *sockaddr_in6, size : usize)-> i32;
pub extern (C) fn listen (sock : i32, nb : i32)-> i32;
pub extern (C) fn connect (sock : i32, servaddr : *sockaddr_in, size : u32)-> i32;
pub extern (C) fn connect (sock : i32, servaddr : *sockaddr_in6, size : u32)-> i32;
pub extern (C) fn accept (sock : i32, dmut clientaddr : *sockaddr_in, dmut size : *u32)-> i32;
pub extern (C) fn accept (sock : i32, dmut clientaddr : *sockaddr_in6, dmut size : *u32)-> i32;
pub extern (C) fn getsockname (sock : i32, dmut servaddr : *sockaddr_in, dmut size : *u32)-> i32;
pub extern (C) fn getsockname (sock : i32, dmut servaddr : *sockaddr_in6, dmut size : *u32)-> i32;
pub extern (C) fn setsockopt (sock : i32, level : i32, optname : SocketOptions, optval : *void, optlen : u32)-> i32;


pub extern (C) fn write (sock : i32, ptr : *(void), size : usize)-> i32;
pub extern (C) fn read (sock : i32, ptr : *(void), size : usize)-> i32;
pub extern (C) fn send (sock : i32, ptr : *(void), size : u32, flag : i32)-> i32;
pub extern (C) fn recv (sock : i32, ptr : *(void), size : u32, flag : i32)-> i32;
pub extern (C) fn close (sock : i32);

pub extern (C) fn shutdown (sock : i32, how : ShutdownCodes);

pub enum : u32
| SOCK_STREAM	 = 1u32
| SOCK_DGRAM	 = 2u32
| SOCK_RAW	     = 3u32
| SOCK_RDM	     = 4u32
| SOCK_SEQPACKET = 5u32
| SOCK_PACKET	 = 10u32
 -> SocketType;

pub enum : u16
| AF_UNSPEC           = 0u16
| AF_UNIX  	          = 1u16
| AF_INET             = 2u16
| AF_AX25             = 3u16
| AF_IPX              = 4u16
| AF_APPLETALK        = 5u16
| AF_NETROM           = 6u16
| AF_BRIDGE           = 7u16
| AF_AAL5             = 8u16
| AF_X25              = 9u16
| AF_INET6            = 10u16
| AF_MAX              = 12u16
 -> AddressFamily;

pub enum
| FD_SETSIZE = 1024u32
 -> FDConsts;

pub enum
| O_NONBLOCK = 2048u32
| MSG_PEEK   = 2u32
 -> SocketFlag;

pub enum : u16
| NONE    = 0u16
| POLLIN  = 1u16
| POLLOUT = 4u16
 -> PollEvent;


pub enum : i32
| SHUT_RD = 0
| SHUT_WR = 1
| SHUT_RDWR = 2
 -> ShutdownCodes;

pub enum : i32
| SOL_SOCKET      = 1
| SO_ACCEPTCONN   = 30
| SO_BINDTODEVICE = 25
| SO_BROADCAST    = 6
| SO_BSDCOMPAT    = 14
| SO_DEBUG        = 1
| SO_DOMAIN       = 39
| SO_ERROR        = 4
| SO_DONTROUTE    = 5
| SO_KEEPALIVE    = 9
| SO_LINGER       = 13
| SO_MARK         = 36
| SO_OOBINLINE    = 10
| SO_PASSCRED     = 16
| SO_PEERCRED     = 17
| SO_PRIORITY     = 12
| SO_PROTOCOL     = 38
| SO_RCVBUF       = 8
| SO_RCVBUFFORCE  = 33
| SO_RCVLOWAT     = 18
| SO_SNDLOWAT     = 19
| SO_RCVTIMEO     = 20
| SO_SNDTIMEO     = 21
| SO_REUSEADDR    = 2
| SO_SNDBUF       = 7
| SO_SNDBUFFORCE  = 32
| SO_TIMESTAMP    = 29
| SO_TYPE         = 3
 -> SocketOptions;

pub def SOL_SOCKET = 1;

pub extern (C) fn _yrt_fd_zero (dmut ensemble : *fd_set)-> void;
pub extern (C) fn _yrt_fd_isset (sock : i32, ensemble : *fd_set)-> bool;
pub extern (C) fn _yrt_fd_set (sock : i32, dmut ensemble : *fd_set);
pub extern (C) fn select (size : u32,  dmut ensemble : *fd_set, i : *(void), j : *(void), k : *(void))-> i32;
pub extern (C) fn poll (fds : *(pollfd_t), nb : usize, timeout : u32)-> i32;
