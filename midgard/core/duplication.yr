in duplication;

mod YRUNTIME {T} {
    pub extern (C) fn _yrt_new_array (size : usize, len : usize)-> dmut T;
    pub extern (C) fn memcpy (_ : *T,  _ : *T, _ : usize)-> void;
}

pub fn deepCopySlice {T of [U], U} (a : T)-> dmut T {
    if (a.len == 0us) { return []; }
    let dmut res = YRUNTIME!{T}::_yrt_new_array (U::size, a.len);
    for i, ti in a {
        res [i] = dcopy ti;
    }

    return alias res;
}


pub fn allocArray {T} (len : usize)-> dmut [T] {
    alias YRUNTIME!{[T]}::_yrt_new_array (T::size, len)
}

/**
 * Copy the second array inside the first one, without reallocation
 * Copy only what can be copied (max (to.len, fr.len))
 */
pub fn memCopy {T} (fr : [T], mut to : [mut T]) {
    let len = if (to.len < fr.len) { to.len } else { fr.len }
    YRUNTIME!{T}::memcpy (to.ptr, fr.ptr, cast!usize (len) * T::size);
}
