mod core::duplication;

import core::exception;
import core::object;

mod allocMod {T} {
    pub extern (C) def _yrt_new_array (_ : usize, _ : usize)-> dmut [T];
    pub extern (C) def _yrt_new_block (_ : usize, _ : usize)-> dmut &(T);
    pub extern (C) def memcpy (_ : &(T),  _ : &T, _ : usize)-> void;
}

mod Runtime {F, T} {
    
    /**
     * Runtime unsafe cast of a pointer to another 
     * This is used to initialized the fields even when they are not mutable 
     * This is unsafe but we can argue that if a class has successfuly produced a packet 
     * Then the packet contains a valid class that can be copied as it is
     */
    pub extern (C) def _yrt_unsafe_cast (x : F)-> dmut T;

        /**
     * Runtime unsafe cast of a pointer to another 
     * This is used to initialized the fields even when they are not mutable 
     * This is unsafe but we can argue that if a class has successfuly produced a packet 
     * Then the packet contains a valid class that can be copied as it is
     */
    pub extern (C) def _yrt_unsafe_cast (ref x : F)-> dmut T;

    /**
     * Allocate a class from the vtable
     */
    pub extern (C) def _yrt_alloc_class (vtable : &void)-> dmut &u8;

}

mod DcopyMap {
    pub extern (C) def _yrt_dcopy_map_is_started ()-> bool;
    pub extern (C) def _yrt_purge_dcopy_map ();
    
    pub extern (C) def _yrt_find_dcopy_map (_ : &void)-> dmut &void;
    pub extern (C) def _yrt_insert_dcopy_map (_ : &void, _ : &void);
}


pub def alloc {T} (a : T) -> mut & (mut T) {
    let mut x = alias allocMod!{T}::_yrt_new_block (sizeof T, 1u64)        
    *x = a;
    return x;
}
    
pub def allocBlock {T} (len : usize) -> dmut &T {
    alias allocMod!{T}::_yrt_new_block (sizeof T, len)
}

pub def allocArray {T} (len : usize) -> dmut [T] {
    alias allocMod!{T}::_yrt_new_array (sizeof T, len)
}

/**
 * Copy the second array inside the first one, without reallocation
 * Copy only what can be copied (max (to.len, fr.len))
 */
pub def memCopy {T} (fr : [T], mut to : [mut T]) {
    let len = if (to.len < fr.len) { to.len } else { fr.len }
    allocMod!{T}::memcpy (to.ptr, fr.ptr, cast!usize (len) * sizeof (T));
}

pub {

    trait Copiable {
        
        prot def @{final} __coreduplication_copyInner (self, dmut packet : &(u8)) {            
            cte if (__pragma!compile ({self::super;})) {
                cte if (is!{typeof (self::super)} {U impl Copiable}) {
                    self::super.__coreduplication_copyInner (alias packet);
                } else {
                    cte assert (false, "ancestor " ~ typeof (self::super)::typeid ~ " is not copiable");
                }
            } else { packet; }
            
            cte for i in 0us .. ((__pragma!local_field_offsets (typeof (self))).len) {
                let offset = (__pragma!local_field_offsets (typeof (self))) [i];
                let dmut z : &(mut typeof ((__pragma!local_tupleof (self)).i)) = Runtime!{&u8, &(mut typeof ((__pragma!local_tupleof (self)).i))}::_yrt_unsafe_cast (alias (packet + offset));

                cte if __pragma!compile ({dcopy ((__pragma!local_tupleof (self)).i)}) {
                    __pragma!trusted ({
                        *z = dcopy ((__pragma!local_tupleof (self)).i);
                    })
                } else {
                    z;
                }
            }            
        }
               
        pub def deepCopy (self)-> dmut &Object {
            let started = DcopyMap::_yrt_dcopy_map_is_started ();
            {                
                let dmut res = DcopyMap::_yrt_find_dcopy_map (Runtime!{typeof self, &void}::_yrt_unsafe_cast (self));
                if (res !is null) {
                    return alias Runtime!{&void, &Object}::_yrt_unsafe_cast (res);
                } else {
                    let dmut cp = Runtime!{&void, &void}::_yrt_alloc_class (__pragma!vtable (typeof (self)));
                    DcopyMap::_yrt_insert_dcopy_map (Runtime!{typeof self, &void}::_yrt_unsafe_cast (self), cast!{&void} (cp));
                    
                    cte for i in 0us .. ((__pragma!local_field_offsets (typeof (self))).len) {
                        // This method is not validated if it is replaced by a override in the implementation
                        cte if !(__pragma!compile ({dcopy ((__pragma!local_tupleof (self)).i)})) {
                            cte assert (false, "cannot create a default copier for type " ~ typeof (self)::typeid ~ ", due to not copiable field '" ~ (__pragma!field_names (typeof (self))) [i] ~ "' of type " ~ typeof ((__pragma!local_tupleof (self)).i)::typeid);
                        }
                    }
                    
                    self.__coreduplication_copyInner (alias cp);                    
                    return alias Runtime!{&u8, &Object}::_yrt_unsafe_cast (cp);
                }
            } exit {
                if (!started) {
                    DcopyMap::_yrt_purge_dcopy_map ();
                } 
            }
        }
    }
    
    def deepCopy {T} (a : T)-> dmut T {
        cte if (is!{T}{class U}) {
            cte assert (false, "Class " ~ T::typeid ~ " does not implement Copiable");
        } else cte if (is!{T}{U of &V, V}) {
            cte assert (false, "Cannot deep copy a pointer");
        } else cte if (is!{T}{struct U}) {
            let dmut t = alias ([0u8 ; sizeof (T)]);
            let aPtr = &a;
            __pragma!trusted ({
                cte for i in 0us .. (__pragma!field_offsets (T)).len {
                    let offset = (__pragma!field_offsets (T)) [i];
                    let size = sizeof (__pragma!field_type (T, (__pragma!field_names (T))[i]));
                    let dmut to : &(mut void) = alias (cast!(&void) ((t [offset .. (offset + size)]).ptr));
                    let from : &(void) = cast!(&void) (aPtr + offset);
                    *(cast! (mut &(__pragma!field_type (T, (__pragma!field_names (T))[i]))) (to)) = dcopy *(cast! (&(__pragma!field_type (T, (__pragma!field_names (T))[i]))) (from));
                }
            });
            
            alias __pragma!trusted ({
                let dmut j = alias *(cast!(mut &(mut T)) (cast!(mut &(mut void)) (t.ptr)));
                alias j
            })

        } else cte if (is!{T}{U of [V], V}) {
            return alias deepCopySlice!T (a);
        } else {
            a
        }
    }
       
}

def deepCopySlice {T of [U], U} (a : T) -> dmut [dmut U] {
    let started = DcopyMap::_yrt_dcopy_map_is_started ();
    {
        let dmut x : dmut [U] = alias allocArray!U (a.len);
        let cp = DcopyMap::_yrt_find_dcopy_map (cast!{&void} (a.ptr));
        if (cp !is null) {
            let dmut res = Runtime!{(usize, &void), T}::_yrt_unsafe_cast ((a.len, cp));
            return res;
        } else {
            DcopyMap::_yrt_insert_dcopy_map (cast!{&void} (a.ptr), cast!{&void} (x.ptr));
        
            __pragma!trusted ({
                for i in 0us .. a.len {
                    x[i] = dcopy a [i];
                }
            });
            return alias x;
        }
    } exit {
        if (!started) {
            DcopyMap::_yrt_purge_dcopy_map ();
        }
    }
}
