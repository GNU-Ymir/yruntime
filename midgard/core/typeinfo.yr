/**
 * This modules define utility function for dynamic type comparison used in pattern matching for example.
 * @Authors: Emile Cadorel
 * @License: GPLv3
 */
in typeinfo;

/**
 * This module list all the possible type info, and the system to compare type at runtime
 */


pub struct FieldInfo {
    pub let name : [c8];
    pub let offset : usize;
    pub let size : usize;

    pub self (name : [c8], offset : usize, size : usize)
        with name = name
        , offset = offset
        , size = size
    {}
}

pub struct TypeInfo {
    pub let typeid : u32;
    pub let size  : usize;
    pub let inner : [TypeInfo];
    pub let name  : [c8];

    pub self (typeid : u32, size : usize, inner : [TypeInfo], name : [c8])
        with typeid = typeid
        , size = size
        , inner = inner
        , name = name
    {}

}


pub enum : u32
| ARRAY        = 1u32
| BOOL         = 2u32
| CHAR         = 3u32
| CLOSURE      = 4u32
| FLOAT        = 5u32
| FUNC_PTR     = 6u32
| SIGNED_INT   = 7u32
| UNSIGNED_INT = 8u32
| POINTER      = 9u32
| SLICE        = 10u32
| STRUCT       = 11u32
| TUPLE        = 12u32
| OBJECT       = 13u32
| VOID         = 14u32
 -> TypeIDs;

extern (C) fn _yrt_type_equals (a : TypeInfo, b : TypeInfo)-> bool;

/**
 * @returns: true iif `left` is the same type as `right`.
 */
pub fn equals (left : TypeInfo, right : TypeInfo) -> bool {
    _yrt_type_equals (left, right)
}
