in map;

mod Runtime{K, V} {
    pub extern (C) fn _yrt_map_erase (a : *[K => V], k : *K);
}

/**
 * Binding to the comparison function in order to be callable from the C runtime
 * */
pub fn compareKeys {T} (a : *T, b : *T)-> bool {
    unsafe {
        return *a == *b;
    }
}

/**
 * Binding to the hash function callable in order to be callable from the C runtime
 * */
pub fn hashKey {T} (a : *T)-> u64 {
    unsafe {
        core::types::hash::__hash (*a)
    }
}

/**
 * Remove a key from the map
 * */
pub fn removeKey {K, V} (dmut ref a : [K => V], key : K) {
    Runtime!{K, V}::_yrt_map_erase (&a, &key);
}
