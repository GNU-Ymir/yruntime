/**
 * This module implements function to randomly select an number.
 * @authors: Emile Cadorel
 * @License: GPLv3
 */

mod std::rand;

import std::traits;
import std::conv;
import std::math;

mod Runtime {
    pub extern (C) fn rand ()-> i32;
    pub extern (C) fn _yrt_init_rand ();
    
    pub static mut __isInit__ = false;

    pub fn init () {
        __isInit__ = true;
        _yrt_init_rand ();
    }
    
}

/**
 * @returns: a random number uniformly selected between low and high
 * @example: 
 * ===
 * // Select a number between 1 and 10 with uniform probability
 * let i = uniform (1, 10);
 * 
 * assert (i >= 1 && i <= 10);
 * ===
 */
pub fn if (isUnsigned!{T} ()) uniform {T} (low : T, high : T)-> T {
    if (!Runtime::__isInit__) {
        Runtime::init ();
    }
    
    let x = cast!{T} (Runtime::rand ());
    (x * (high - low) % high - low) + low    
}

/**
 * @returns: an random number uniformly selected between low and high
 * @example: 
 * ===
 * // Select a number between 1 and 10 with uniform probability
 * let f = uniform (1.0, 10.0);
 * 
 * assert (f >= 1.0 && f <= 10.0);
 * ===
 */
pub fn if (isFloating!T ()) uniform {T} (low : T, high : T)-> T {
    let x = rand!T ();
    fmod(x * (high - low), high - low) + low
}

/**
 * @returns: an random number uniformly selected between 0 and 1.
 * @example: 
 * ===
 * // Select a number between 0 and 1 with uniform probability
 * let f = rand!f32 ();
 * 
 * assert (f >= 0.0f && f <= 1.0f);
 * ===
 */
pub fn if (isFloating!T ()) rand {T} ()-> T {
    if (!Runtime::__isInit__) {
        Runtime::init ();
    }
    Runtime::rand ().to!T () / (i32::max).to!T ()
}
