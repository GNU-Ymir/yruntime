mod std::box;

import std::stream;

import core::typeinfo;
import std::net::packet;

/**
 * A box class is a mutable pointer to a value that is allocated on the heap
 * They can be used to change values of closure, inside a closure
 * The inner value is not mutable
 * @example: 
 * =============
 * import std::box;
 * 
 * def foo () -> (dg () -> i32) {
 *    let dmut x = Box::new (0);
 *    let closure = move || {
 *        x.get ()
 *    };
 *    x:.set(42);
 *    return closure;
 * }
 * 
 * def main () 
 *     throws &AssertError 
 * {
 *     let enclosedvalue = foo ();
 *     assert (enclosedvalue () == 42);
 * }
 * =============
 */
pub class @final Box {T} {

    pub let mut value : T;

    /**
     * Create a new box on the heap with a default value
     * @params: 
     *    - v: the value to store
     */
    pub self (v : T) with value = v {}

    /**
     * Change the value in the box
     * @params: 
     *    - v: the new value to store
     */
    pub def set (mut self, v : T) -> void {
        self.value = v;
    }

    /**
     * Change the value in the box
     * @returns: the value stored in the box
     */
    pub def get (self) -> T {
        self.value
    }

    /**
     * Alias of self.get ()
     * @returns: the value stored in the box
     */
    pub def opUnary {"*"} (self) -> T {
        self.value
    }

    /**
     * Change the value in the box
     * @params: 
     *    - v: the new value to store
     */
    pub def opUnaryAssign {"*"} (mut self, v : T) -> T {
        self.value = v;
        v
    }

    
    impl Streamable;
    impl std::net::packet::Packable;
}

/**
 * A box class is a mutable pointer to a value that is allocated on the heap
 * They can be used to change values of closure, inside a closure
 * The inner value is mutable
 */
pub class @final Box {T of dmut U, class U} {

    pub let dmut value : T;

    /**
     * Create an new box allocated on the heap with a default value
     * @params: 
     *    - v : the value to store
     */
    pub self (dmut v : T) with value = alias v {}

    /**
     * Change the value in the box
     * @params: 
     *    - v: the new value to store
     */
    pub def set (mut self, dmut v : T) -> void {
        self.value = alias v;
    }

    /**
     * Change the value in the box
     * @returns: the value stored in the box
     */
    pub def get (mut self) -> dmut T {
        alias self.value
    }
    
    /**
     * Alias of self.get ()
     * @returns: the value stored in the box
     */
    pub def opUnary {"*"} (mut self) -> dmut T {
        alias self.value
    }

    /**
     * Alias of self.get ()
     * @returns: the value stored in the box
     */
    pub def opUnary {"*"} (self) -> T {
        self.value
    }
    
    /**
     * Change the value in the box
     * @params: 
     *    - v: the new value to store
     * @returns: alias v
     */
    pub def opUnaryAssign {"*"} (mut self, dmut v : T) -> dmut T {
        self.value = alias v;
        alias v
    }

    
    impl Streamable;
    impl std::net::packet::Packable;
}
