/**
 * This module implements the structure `Duration` and some utility
 * function to encode a time duration.  You may note that there is no
 * function for the biggest duration supported by this module is
 * weeks. This is because a month and a year have a fluctuating time
 * duration (28 to 31 days for months and 365 to 366 days for a
 * year). An implementation of date is under consideration to manage
 * duration that are relative to a time instant and thus have known
 * and computable durations.
 * 
 * @Authors: Emile Cadorel
 * @License: GPLv3
 * <hr>
 * @example:
 * ===
 * import std::time::dur;
 * 
 * let a_sec = dur::seconds (1); // a duration of one second
 * let a_week = dur::weeks (1); // a duration of a week
 * 
 * // A duration of 12 weeks, 3 days, 8 hours and 12 milliseconds
 * let an_arbitrary_dur = duration (w-> 12u64, d-> 3u64, h-> 8u64, ms-> 12u64);
 *
 * // Duration are comparable
 * assert (a_sec < a_week);
 * assert (an_arbitrary_dur > a_week);
 *
 * // Functions can be used to extract sub duration information
 * assert (an_arbitrary_dur.weeks () == 12u64 && an_arbitrary_dur.days () == 3u64);
 * 
 * // Basic arithmetic can be used on duration (addition, substraction and division)
 * let another_duration = a_week + a_sec;
 * 
 * // A duration can be negative
 * let negitave_duration = dur::second (12) - dur::minutes (2);
 * 
 * // Let's sleep for seven seconds
 * dur::sleep (dur::seconds (7));
 * 
 * // Duration are convertible to string of utf8 for better formatting
 * println (duration (m-> 3u64, s-> 12u64, us-> 89u64).to![c8]());
 * ===
 */
mod std::time::dur;
import std::stream;

import core::object;
import std::traits;

/**
 * Structure representing a time duration.
 */
pub struct
| negative : bool = false // iif true the duration is negative
| sec : u64 // The number of seconds in the duration
| usec : u64 // The number of micro seconds in the duration
 -> Duration;
    
/**
 * Create a new duration with given values
 * @params: 
 *    - w: the number of weeks in the duration
 *    - d: the number of days in the duration
 *    - h: the number of hours in the duration
 *    - m: the number of seconds in the duration
 *    - ms: the number of milliseconds in the duration
 *    - us: the number of microseconds in the duration
 * @returns: the duration corresponding the values given in parameters
 * @example: 
 * ================
 * import std::time::dur;
 * 
 * // A duration of one week, 2 days, 3 hours and 89 milliseconds
 * let d = duration (w-> 1u64, d-> 2u64, h-> 3u64, ms-> 89u64);
 * assert (d.to![c8] () == "1w2d3h89ms"s8);
 *
 * // A duration of 6 days, 23 hours, 59 minutes, 59 seconds, 999 millseconds and 999 microseconds.
 * let d2 = Duration (d-> 6u64, h-> 23u64, m-> 59u64, s-> 59u64, ms-> 999u64, us-> 999u64);
 * assert ((d2 + dur::micros (1u64)).to![c8] () == "1w"s8);
 * ================
 */
pub def duration (w : u64 = 0u64, d : u64 = 0u64, h : u64 = 0u64, m : u64 = 0u64, s : u64 = 0u64, ms : u64 = 0u64, us : u64 = 0u64) -> Duration {
    Duration (sec-> (w * 7u64 * 24u64 * 3_600u64) + (d * 24u64 * 3_600u64) + (h * 3_600u64) + (m * 60u64) + s,
              usec-> (ms * 1_000u64) + us,
              negative-> false)
}

/**
 * @returns: A duration of `week` weeks.
 * @example: 
 * ====================
 * import std::time::dur;
 * 
 * // Sleep for two weeks
 * sleep ((2u64).dur::weeks ());
 * ====================
 */
pub def if (isIntegral!{T}()) weeks {T} (week : T) -> Duration {
    Duration (cast!u64 (week) * 7u64 * 24u64 * 3_600u64, 0u64)
}

/**
 * @returns: the number of weeks in the duration.
 * @example: 
 * ================
 * import std::time::dur;
 * 
 * let x = dur::days (89u64);
 *
 * // there are 12 weeks of seven days in 89 days
 * assert (x.weeks () == 12u64)
 * ================
 */
pub def weeks (d : Duration)-> u64 {
    d.sec / (7u64 * 24u64 * 3_600u64)
}


/**
 * @returns: A duration of `day` days
 * @example: 
 * ====================
 * import std::time::dur;
 * 
 * // Sleep for two days
 * sleep ((2u64).dur::days ());
 * ====================
 */
pub def if (isIntegral!{T} ()) days {T} (day : T) -> Duration {
    Duration (cast!u64 (day) * 24u64 * 3_600u64, 0u64)
}

/**
 * @returns: the number of days in the duration.
 * @params: 
 *    - all: true iif we should also count the number of days that are forming weeks
 * @example: 
 * ================
 * import std::time::dur;
 * 
 * let x = dur::days (89u64);
 * 
 * // 12 weeks of seven days + 5 days
 * assert (x.days () == 5u64)
 *
 * // Also counts the days forming weeks 
 * assert (x.days (all-> true) == 89u64)
 * ================
 */
pub def days (d : Duration, all : bool = false)-> u64 {
    if (all) {
        d.sec / (24u64 * 3_600u64)
    } else {
        d.sec / (24u64 * 3_600u64) % (7u64)
    }
}



/**
 * @returns: A duration of `hou` hours
 * @example: 
 * ====================
 * import std::time::dur;
 * 
 * // Sleep for two hours
 * sleep ((2u64).dur::hours ());
 * ====================
 */
pub def if (isIntegral!{T} ()) hours {T} (hou : T) -> Duration {
    Duration (cast!u64 (hou) * 3_600u64, 0u64)
}

/**
 * @returns: the number of hours in the duration.
 * @params: 
 *     - all: true iff we should also count the number of hours that are forming days and weeks.
 * @example: 
 * ================
 * import std::time::dur;
 * 
 * let x = dur::hours (427u64);
 *
 * // 17 days + 19 hours
 * assert (x.hours () == 19u64)
 * 
 * // also count the hours forming days
 * assert (x.hours (all-> true) == 427u64)
 * ================
 */
pub def hours (d : Duration, all : bool = false)-> u64 {
    if (all) {
        d.sec / (3_600u64)
    } else {
        d.sec / (3_600u64) % (24u64)
    }
}



/**
 * @returns: A duration of `min` minutes.
 * @example: 
 * ====================
 * import std::time::dur;
 * 
 * // Sleep for two minutes
 * sleep ((2u64).dur::minutes ());
 * ====================
 */
pub def if (isIntegral!{T} ()) minutes {T} (mins : T) -> Duration {
    Duration (cast!u64 (mins) * 60u64, 0u64)
}


/**
 * @returns: the number of minutes in the duration.
 * @params: 
 *     - all: true iif we should also count the number of minutes that forming bigger durations (hours, days, ...).
 * @example: 
 * ================
 * import std::time::dur;
 * 
 * let x = dur::minutes (478u64);
 * 
 * // 7 hours and 58 minutes
 * assert (x.minutes () == 58u64)
 * 
 * // Also count the minutes forming hours
 * assert (x.minutes (all-> true) == 478u64)
 * ================
 */
pub def minutes (d : Duration, all : bool = false)-> u64 {
    if (all) {
        d.sec / (60u64)
    } else {
        d.sec / (60u64) % (60u64)
    }
}


/**
 * @returns: A duration of `secs` seconds.
 * @example: 
 * ====================
 * import std::time::dur;
 * 
 * // Sleep for two seconds
 * sleep ((2u64).dur::seconds ());
 * ====================
 */
pub def if (isIntegral!{T} ()) seconds {T} (secs : T) -> Duration {
    Duration (cast!u64 (secs), 0u64)
}


/**
 * @returns: the number of seconds in the duration.
 * @params: 
 *     - all: true iif we should also count the number of seconds that forming bigger durations (hours, days, ...).
 * @example: 
 * ================
 * import std::time::dur;
 * 
 * let x = dur::minutes (120u64);
 * 
 * // 2 minutes and 0 seconds
 * assert (x.seconds () == 0u64)
 * 
 * // Also count the seconds forming minutes
 * assert (x.seconds (all-> true) == 120u64)
 * ================
 */
pub def seconds (d : Duration, all : bool = false)-> u64 {
    if (all) {
        d.sec 
    } else {
        d.sec % (60u64)
    }
}


/**
 * @returns: A duration of `mil` milliseconds.
 * @example: 
 * ====================
 * import std::time::dur;
 * 
 * // Sleep for 2000 milliseconds
 * sleep ((2_000u64).dur::millis ());
 * ====================
 */
pub def if (isIntegral!{T} ()) millis {T} (mil : T) -> Duration {
    Duration (cast!u64 (mil) / 1_000u64, (cast!u64 (mil) % 1_000u64) * 1_000u64)
}

/**
 * @returns: the number of milliseconds in the duration.
 * @params: 
 *     - all: true iif we should also count the number of milliseconds that forming bigger durations (hours, days, ...).
 * @warning: Due to the capacity of u64 representation, if all is true, only the seconds, minutes, hours and days will be added (weeks will be omitted)
 * @example: 
 * ================
 * import std::time::dur;
 *
 * let x = dur::minutes (59u64);
 * 
 * // 59 minutes and 0 milliseconds
 * assert (x.millis () == 0u64)
 * 
 * // Also count the milliseconds forming seconds and minutes
 * assert (x.millis (all-> true) == 3540_000u64)
 * ================
 */
pub def millis (d : Duration, all : bool = false)-> u64 {
    if (all) {
        (d.usec + (1_000_000u64 * (d.sec % (7u64 * 24u64 * 3_600u64)))) / 1_000u64
    } else {
        d.usec / 1_000u64 % (1_000u64)
    }
}


/**
 * @returns: A duration of `mic` microseconds.
 * @example: 
 * ====================
 * import std::time::dur;
 * 
 * // Sleep for 2000000 microseconds
 * sleep ((2_000_000u64).dur::micros ());
 * ====================
 */
pub def if (isIntegral!{T} ()) micros {T} (mic : T) -> Duration {
    Duration (cast!u64 (mic) / 1_000_000u64, (cast!u64 (mic) % 1_000_000u64))
}


/**
 * @returns: the number of microseconds in the duration.
 *     - all: true iif we should also count the number of microseconds that forming bigger durations (hours, days, ...).
 * @warning: For capacity of u64 representation, if all is true, only the seconds, minutes, hours and days will be added (weeks will be omitted)
 * @example: 
 * ================
 * import std::time::dur;
 * 
 * let x = dur::minutes (59u64);
 * // 59 minutes and 0 microseconds
 * assert (x.micros () == 0u64)
 * 
 * // Also count the micro seconds forming minutes
 * assert (x.micros (all-> true) == 3540_000_000u64)
 * 
 * let d = duration (d-> 6u64, h-> 23u64, m-> 59u64, s-> 59u64, ms-> 999u64, us-> 999u64);
 * 
 * assert (d.micros (all-> true) == 604_799_999_999u64);
 * 
 * // weeks are ommitted dur to capacity overflow of u64
 * assert ((d + dur::micros (1u64)).micros (all-> true) == 0u64);
 * ================
 */
pub def micros (d : Duration, all : bool = false)-> u64 {
    if (all) {
        let x = d.sec % (7u64 * 24u64 * 3_600u64);
        d.usec + (1_000_000u64 * (x))
    } else {
        d.usec  % (1_000u64)
    }
}


/**
 * Addition of two durations.
 * @example: 
 * ================
 * import std::time::dur;
 * 
 * let x = dur::seconds (2u64) + dur::millis (300u64);
 * 
 * // 2 seconds and 300 milliseconds
 * assert (x.to![c8] () == "2s300ms"s8);
 * ================
 */
pub def opBinary {"+"} (d : Duration, right : Duration)-> Duration {
    if (right.negative) {
        d.opBinary!"-" (Duration (right.sec, right.usec))
    } else if (d.negative) {
        right.opBinary!"-" (Duration (d.sec, d.usec))
    } else if (d.usec + right.usec >= 1_000_000u64) {
        let usec = (d.usec + right.usec) ;
        Duration (d.sec + right.sec + (usec / 1_000_000u64), usec % 1_000_000u64)
    } else {
        Duration (d.sec + right.sec, d.usec + right.usec)
    }
}

/**
 * Substraction of two durations.
 * @example: 
 * ================
 * import std::time::dur;
 * 
 * let x = dur::seconds (2u64) - dur::millis (300u64);
 * 
 * // 1 second and 700 milliseconds
 * assert (x.to![c8] () == "1s700ms"s8);
 * 
 * // Duration can be negative
 * let y = dur::millis (300u64) - dur::seconds (2u64);
 * assert (x.to![c8] () == "-1s700ms"s8);
 * ================
 */
pub def opBinary {"-"} (d : Duration, right : Duration, negative : bool = false)-> Duration {
    if (right.negative) { // a -- b -> a + b
        d.opBinary!{"+"} (Duration (right.sec, right.usec))
    } else if (d.negative) { // -a - b -> - (a + b)
        let res = Duration (d.sec, d.usec).opBinary!"+" (right);
        Duration (negative-> !res.negative, res.sec, res.usec)
    } else {
        if (d.sec < right.sec) {
            return right.opBinary!{"-"} (d, negative-> true);
        }
        
        if (d.usec >= right.usec) {
            Duration (negative-> negative, d.sec - right.sec, d.usec - right.usec)
        } else {
            if (d.sec == right.sec) {
                right.opBinary!"-" (d, negative-> true)
            } else {
                let usec = (right.usec - d.usec);
                if (usec != 0u64) {
                    Duration (negative-> negative, d.sec - right.sec - 1u64, 1_000_000u64 - usec)
                } else {
                    Duration (negative-> negative, d.sec - right.sec, 1_000_000u64 - usec)
                }
            }
        }
    }
}

/**
 * Division of a duration by a factor value.
 * @params: 
 *    - right: the factor of division
 * @example: 
 * ================
 * import std::time::dur;
 * 
 * // A sixtieth of a second
 * let x = dur::seconds (1u64) / 60u64;
 * assert (x.to![c8] () == "16ms666µs"s8);
 * ================
 */
pub def if (isIntegral!{T} ()) opBinary {"/", T} (d : Duration, right : T)-> Duration {
    let rest = (d.sec * 1_000_000u64) / cast!u64 (right) % 1_000_000u64;
    Duration (negative-> d.negative, d.sec / cast!u64 (right), d.usec / cast!u64 (right) + rest)
}

/**
 * @returns: the opposite value of `d`, such that `-d + d == dur::seconds (0u64)`.
 * @example: 
 * ===============    
 * import std::time::dur;
 * 
 * let x = dur::seconds (2u64);
 *
 * // Minus 2 seconds
 * assert ((-x).to![c8] () == "-2s"s8);
 * ===============
 */
pub def opUnary {"-"} (d : Duration)-> Duration {
    Duration (negative-> !d.negative, d.sec, d.usec)
}

/**
 * Compare two durations.
 * @example: 
 * ===============
 * import std::time::dur;
 * 
 * let a = dur::seconds (2u64);
 * let b = dur::seconds (1u64);
 * 
 * assert (a > b);
 * assert (a == a);
 * ===============
 */
pub def opCmp (d : Duration, right : Duration) -> i32 {
    if (right.negative == d.negative) {
        let v = { if (d.sec < right.sec) { -1 }
                  else if (d.sec == right.sec) {
                      if (d.usec < right.usec) { -1 }
                      else if (d.usec > right.usec) { 1 }
                      else { 0 }
                  }
                  else { 1 }
        }
        
        if (d.negative) { -v }
        else { v }
    } else {
        if (d.sec == right.sec && d.usec == right.usec) { 0 }
        else if (right.negative) { 1 }
        else { -1 }
    }
}

/**
 * Converts the Duration into a readable string in utf8.
 * @example: 
 * ================
 * import std::time::dur;
 * 
 * let d = dur::seconds (2u64) + dur::millis (300u64);
 * assert (d.to![c8] () == "2s300ms"s8);
 * ================
 */
pub def to {C of [U], U of c8, T of Duration} (val : T)-> [c8] {
    import std::stream;
    let dmut stream = StringStream::new ();
    let mut wrote = false;
    
    if (val.negative) stream:.write ("-"s8);
    if (val.weeks () != 0u64) {
        stream:.write (val.weeks ()):.write ("w"s8);
        wrote = true;
    }
    if (val.days () != 0u64) {
        stream:.write (val.days ()):.write ("d"s8);
        wrote = true;
    }
    if (val.hours () != 0u64) {
        stream:.write (val.hours ()):.write ("h"s8);
        wrote = true;
    }
    if (val.minutes () != 0u64) {
        stream:.write (val.minutes ()):.write ("m"s8);
        wrote = true;
    }    
    if (val.seconds () != 0u64) {
        stream:.write (val.seconds ()):.write ("s"s8);
        wrote = true;
    }    
    if (val.millis () != 0u64) {
        stream:.write (val.millis ()):.write ("ms"s8);
        wrote = true;
    }
    if (val.micros () != 0u64) {
        stream:.write (val.micros ()):.write ("µs"s8);
        wrote = true;
    }
    if (!wrote) stream:.write ("0s"s8);
    stream []
}

/**
 * Converts the Duration into a readable string in utf32.
 * @example: 
 * ================
 * import std::time::dur;
 * 
 * let d = dur::seconds (2u64) + dur::millis (300u64);
 * assert (d.to![c32] () == "2s300ms");
 * ================
 */
pub def to {C of [U], U of c32, T of Duration} (val : T)-> [c32] {
    import std::conv;
    
    std::conv::to!{[c32]} (dur::to![c8] (val))
}

struct
| tv_sec : u64
| tv_nsec : u64
 -> C_dur;

extern (C) def nanosleep (req : &C_dur, dmut rem : &C_dur)-> i32;
extern (C) def usleep (nb : u64)-> u64;
extern (C) def sleep (nb : u64)-> u64;

/**
 * Make the thread sleep for a given amount of time.
 * @params: 
 *    - dur: the duration during which the thread will be sleeping
 */
pub def sleep (dur : Duration) {
    import std::io;
    if (!dur.negative) {        
        let mut in_ = C_dur (dur.sec, dur.usec * 1000u64);
        loop {
            let mut out_ = C_dur (0u64, 0u64);
            let ret = nanosleep (&in_, alias &out_);
            if (ret == 0) break {}
            else {
                in_ = out_;
            }
        }
    }
}
