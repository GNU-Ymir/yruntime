/**
 * This module implements the structure `Instant` and some utility function to encode timestamp.
 * @Authors: Emile Cadorel
 * @License: GPLv3
 * <hr>
 * @example: 
 * ===
 * import std::time::_;
 *
 * // Make a timestamp of the system clock
 * let start = instant::now ();
 * 
 * // Perform some computation that takes some time
 * some_heavy_computation ();
 *
 * // Make a timestamp of the system clock
 * let end = instant::now ();
 * 
 * // Instant can be used to compute a duration
 * println ("Computation took : ", (end - start).to![c8] ());
 *
 * // They are also comparable
 * assert (start <= end);
 * ===
 */

mod std::time::instant;
import std::io;
import etc::c::time;
import std::time::dur;

/**
 * Structure representing a nondecreasing clock.
 * This structure can be used to compute durations, between instants.
 */
pub struct
| sec : u64 // The number of second since 1 january 1970
| usec : u64 // The number of micro seconds 
 -> Instant;
    
/**
 * @returns: the current instant of the system clock.
 * @example: 
 * ===================
 * import std::time::_;
 * 
 * // Get the current timestamp of the system
 * let now = instant::now ();
 * 
 * // Sleep for two seconds
 * sleep (dur::seconds (2));
 * 
 * // Will be more than 2 seconds
 * assert ((instant::now () - now) >= dur::seconds (2));
 * ===================
 */
pub fn now () -> Instant {
    let mut tv = c::time::timeval (0u64, 0u64);
    gettimeofday (alias &tv, null);
    Instant (tv.tv_sec, tv.tv_usec)
}

/**
 * @returns: the instant 0, timestamp of the 1 january 1970. 
 * @example: 
 * ==================
 * import std::time::_;
 * 
 * let d = instant::now () - instant::zero ();
 * 
 * // Print the duration since the 1 january 1970
 * println (d.to![c8] ());
 * ==================
 */
pub fn zero ()-> Instant {
    Instant (0u64, 0u64)
}


/**
 * @returns: the duration between two time instants.
 * @example: 
 * =================
 * import std::time::_;
 * 
 * let start = instant::now ();
 * sleep (dur::seconds (2));
 * 
 *
 * // The duration between the creation of instant start and now 
 * let dur_of_sleep = instant::now () - start;
 * 
 * // We slept for 2 seconds so the difference should ne higher than 2 seconds
 * assert (dur_of_sleep >= dur::seconds (2));
 * =================
 */
pub fn opBinary {"-"} (left : Instant, right : Instant, negative : bool = false) -> Duration {
    if (left.sec < right.sec) {
        return right.opBinary!"-" (left, negative-> true);
    }

    if (left.usec >= right.usec) {
        Duration (negative-> negative, left.sec - right.sec, left.usec - right.usec)
    } else {
        if (left.sec == right.sec) {
            right.opBinary!"-" (left, negative-> true)
        } else {
            let usec = right.usec - left.usec;
            if (usec != 0u64) {
                Duration (negative-> negative, left.sec - right.sec - 1u64, (1_000_000u64 - usec))
            } else {
                Duration (negative-> negative, left.sec - right.sec, 0u64)
            }
        }
    }
}

/**
 * Add some duration to an instant, to get an instant in the future (or the past if the duration is negative).
 * @warning: an instant cannot be negative, if the duration is negative and lower than the instant, the function returns the zero instant.
 * @example: 
 * ====================
 * import std::time::_;
 * 
 * // Future instant in 5 seconds from now
 * let f = instant::now () + (5u64).seconds ();
 *
 * // f is in the future 
 * assert (f > instant::now ());
 *
 * // Sleep 6 seconds
 * sleep (dur::seconds (6)); 
 * 
 * // f is in the past
 * assert (f < instant::now ());
 * ====================
 */
pub fn opBinary {"+"} (left : Instant, right : Duration)-> Instant {
    if (right.negative) {
        opBinary!{"-"} (left, Duration (right.sec, right.usec))
    } else {
        if (left.usec + right.usec > 1_000_000u64) {
            let usec = (left.usec + right.usec) % 1_000_000u64;
            Instant (1u64 + left.sec + right.sec, usec)
        } else {
            Instant (left.sec + right.sec, left.usec + right.usec)
        }
    }
}

/**
 * Remove some duration to an instant, to get an instant in the past (or in the future if the duration is negative).
 * @warning: an instant cannot be negative, if the duration is higher than the instant, the function returns the zero instant.
 * @example: 
 * ====================
 * import std::time::_;
 * 
 * let p = instant::now () - dur::seconds (5);
 * 
 * // p is five seconds in the past
 * assert (p < instant::now ());
 * ====================
 */
pub fn opBinary {"-"} (left : Instant, right : Duration)-> Instant {
    if (right.negative) {
        opBinary!{"+"} (left, Duration (right.sec, right.usec))
    } else {
        if (left.sec < right.sec) {
            Instant (0u64, 0u64)
        } else if (left.usec > right.usec) {
            Instant (left.sec - right.sec, left.usec - right.usec)
        } else {
            if (left.sec == right.sec) {
                Instant (0u64, 0u64)
            } else {
                let usec = right.usec - left.usec;
                if (usec != 0u64) {
                    Instant (left.sec - right.sec - 1u64, (1_000_000u64 - usec))
                } else {
                    Instant (left.sec - right.sec, 0u64)
                }
            }
        }
    }
}

/**
 * Compare two instant.
 * @example: 
 * ===============
 * import std::time::_;
 *
 * let start = instant::now ();
 * 
 * // Some useless computation to waste some time 
 * for i in 0 .. 1000 { 
 *     println (i);
 * }

 * let end = instant::now ();
 * 
 * // Some time pass between the two timestamps, so start is in the past of end
 * assert (start <= end);
 * assert (start == start);
 * ===============
 */
pub fn opCmp (left : Instant, right : Instant) -> i32 {
    if (left.sec < right.sec) { -1 }
    else if (left.sec == right.sec) {
        if (left.usec < right.usec) { -1 }
        else if (left.usec > right.usec) { 1 }
        else { 0 }
    }
    else { 1 }
}
