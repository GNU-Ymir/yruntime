/**
 * This module contains functions and macros used to transform json formatted content to `Config`, and dump `Config` into json formatted content.
 * @Authors: Emile Cadorel
 * @License: GPLv3
 * 
 */

mod std::config::json;

import core::typeinfo, core::array, core::exception, core::object;
import std::config::_;
import std::stream;

import std::syntax::_;

import std::config::conv;
import std::conv;


/**
 * Macro that can be used to write json like content directly in Ymir code.
 * @example: 
 * =====================
 * let x = json#{
 *     "fst" : {
 *           "foo" : {"bar" : "baz"},
 *           "scd" : [1, "inner", 2.0f, 3]
 *     }
 * };
 *
 * let j = json#{        
 *     "id": "file",
 *     "value": "File",
 *     "popup": {
 *         // Ignored comments
 *         "menuitem": [
 *            {"value": "New", "onclick": "CreateNewDoc()"},
 *            {"value": "Open", "onclick": "OpenDoc()"},
 *            {"value": "Close", "onclick": "CloseDoc()"}]
 *     }
 * };
 * 
 * =====================
 * 
 */
pub macro json {

    pub self (a=(dictEntry) b=("," inner=dictEntry)* (" " | "\n" | "\t" | "\r")*) skips (" " | "\n" | "\t" | "\r") {
        let dmut d = Dict::new ();
        let v = #{a};
        d:.insert (v._0, v._1);;        
        #(for x in b) {
            {
                let v_ = #{x::inner};
                d:.insert (v_._0, v_._1);
            }
        }
        d
    }

    def dict ("{" a=(dictEntry) b=("," inner=dictEntry)* "}") skips (" " | "\n" | "\t" | "\r") {
        {
            let dmut d_#{__index} = Dict::new ();
            let v_#{__index} = #{a};
            d_#{__index}:.insert (v_#{__index}._0, v_#{__index}._1);
            #(for x in b) {
                {
                    let v_#{__index}2 = #{x::inner};
                    d_#{__index}:.insert (v_#{__index}2._0, v_#{__index}2._1);
                }
            }
            
            d_#{__index}
        }
    }

    def emptyDict ("{" "}") skips (" " | "\n" | "\t" | "\r") {
        Dict::new ()
    }

    def array ("[" a=(array | dict | value) b=("," inner=(array | dict | value))* "]") skips (" " | "\n" | "\t" | "\r") {
        {
            let dmut array_#{__index} = Array::new ();
            array_#{__index}:.push (#{a});
            #(for i in b) {
                array_#{__index}:.push (#{i::inner});
            }
            array_#{__index}
        }
    }
    
    def dictEntry (key=__str ":" value=(array | dict | value)) skips (" " | "\n" | "\t" | "\r") {
        cte if is!{typeof(#{key})}{U of [c32]} {
            (#{key}, #{value})
        } else {
            (#{key}.(std::conv::to)![c32](), #{value})
        }
    }

    def value (a=__expr) skips (" " | "\n" | "\t" | "\r") {
        config::conv::to!{&Config} (#{a})
    }
}


/** 
 * The list of tokens that can be found inside a json file
 * 
 */
enum
| LCRO = "["
| RCRO = "]"
| LACC = "{"
| RACC = "}"
| EQUALS = ":"
| COMA = ","
| DQUOTE = "\""
| ESCAPE = "\\"    
 -> JsonTokens;


/**
 * Parse a string containing a json formatted content
 * @throws: 
 *    - &SyntaxError: if the format is not respected in the content
 * @returns: a `Dict` containing the config tree of the json content.
 * @example: 
 * ==============
 * let str = "{\"foo\" : \"bar" : \"value\", \"baz\" : [1, 2]}}"s8;
 * let config = json::parse (str);
 * ==============
 */
pub def parse (content : [c8])-> &Dict
    throws &SyntaxError
{
    import std::conv;
    return json::parse (content.to![c32] ());
}



/**
 * Parse a string containing a json formatted content
 * @throws: 
 *    - &SyntaxError: if the format is not respected in the content
 * @returns: a `Dict` containing the config tree of the json content.
 * @example: 
 * ==============
 * let str = "{\"foo\" : {\"bar" : \"value\", \"baz\" : [1, 2]}}";
 * let config = json::parse (str);
 * ==============
 */
pub def parse (content : [c32])-> &Dict
    throws &SyntaxError
{
    let dmut lex = Lexer!{c32}::new (content, tokens-> JsonTokens::members);
    Parser::parseDict (alias lex)
}

/**
 * Transform a configuration into a json formatted string
 * @example: 
 * ===
 * let str = "{\"foo\" : {\"bar" : \"value\", \"baz\" : [1, 2]}}";
 * let config = json::parse (str);
 * 
 * // {
 * //   "foo" : {
 * //        "baz" : [1, 2], 
 * //        "bar" : "value"
 * //    }
 * // }
 * println (json::dump (config));
 * ===
 */
pub def dump (cfg : &Config)-> [c8] {
    let dmut stream = StringStream::new ();
    Dumper::dump (alias stream, cfg);
    stream[]
}


mod Parser {

    /**
     * Parse a dict value inside a json formatted lexer
     * @example: 
     * =============
     * let d = "{\"foo\"=9, \"bar\"="\baz\"}";
     *
     * 
     * let dmut llex = Lexer!{c32}::new (d, tokens-> JsonTokens::members);
     * let lDict : &Dict = parseDict (alias llex);
     * =============
     * @throws: 
     *    - &SyntaxError: if the format is not respected 
     */
    pub def parseDict (dmut lex : &Lexer!{c32})-> &Dict
        throws &SyntaxError
    {
        let dmut dict = Dict::new ();
        let (skip, l, c) = lex:.next ();
        if (skip != JsonTokens::LACC) {
            throw SyntaxError::new ("expected '{' (not '" ~ skip ~ "')", l, c);
        }

        let (t, _, _) = lex:.nextNoConsume ();
        if (t != "}") {
            loop {
                let name = parseIdentifier (alias lex);
                
                let (tok, line, col) = lex:.next ();
                if (tok != JsonTokens::EQUALS) throw SyntaxError::new ("expected '=' (not '" ~ tok ~ "')", line, col);
                dict:.insert (name, parseValue (alias lex));
                
                let next = lex:.next ();
                if (next._0 != JsonTokens::COMA && next._0 != JsonTokens::RACC) {
                    throw SyntaxError::new ("expected ',' or '}' (not '" ~ next._0 ~ "')", next._1, next._2);                
                }
                if (next._0 == "}") break {}
            }
        } else lex:.next ();
        
        dict 
    }

    /**
     * Parse an identifier
     * @info: identifier and string are the same, but this function does not return a &Str
     */
    pub def parseIdentifier (dmut lex : &Lexer!{c32})-> [c32]
        throws &SyntaxError 
    {
        import std::stream, std::conv;
        let dmut res = StringStream::new ();
        
        let (end, line, col) = lex:.next ();
        if (end != "'" && end != "\"") throw SyntaxError::new ("expected '\"' or '\\'' (not '" ~ end ~ "')", line, col);

        lex:.doSkip (false);
        lex:.doComments (false);
        loop {
            let (next, l, c) = lex:.next ();
            if (next == "") {
                throw SyntaxError::new ("Unterminated string literal", l, c);
            } else if (next == end) break {}
            else if (next == JsonTokens::ESCAPE) {
                let (af, _, _) = lex:.nextChar ();
                match af {
                    "a" => { res:.write ("\a"); }
                    "b" => { res:.write ("\b"); }
                    "f" => { res:.write ("\f"); }
                    "n" => { res:.write ("\n"); }
                    "r" => { res:.write ("\r"); }
                    "t" => { res:.write ("\t"); }
                    "v" => { res:.write ("\v"); }
                    "\\" => { res:.write ("\\"); }
                    "\'" => { res:.write ("'"); }
                    "\"" => { res:.write ("\""); }
                    "\?" => { res:.write ("\?"); }
                    "u" => { res:.write (parseUnicode (alias lex)); }
                    _ => throw SyntaxError::new ("Undefined escape sequence : \\" ~ af, l, c);                
                }
            } else {
                res:.write (next);            
            }
        }
        
        lex:.doSkip (true);
        lex:.doComments (true);
        res[].to![c32] ()
    }

    /**
     * Internal function used for parsing a string content inside a lexer using the json format
     * @info: the string can be surrounded by ' or by "
     * @params: 
     *    - lex: the lexer containing the string
     * @example: 
     * =============
     * let str = "'test'";
     * let dmut lex = Lexer!{c32}::new (str, tokens-> JsonTokens);
     * let i : &Str = parseString (alias lex);
     * =============
     * @throws: 
     *    - &SyntaxError: if the format is not respected
     */
    pub def parseString (dmut lex : &Lexer!{c32})-> &Str
        throws &SyntaxError
    {
        Str::new (parseIdentifier (alias lex))
    }
    
    /**
     * Parse an unicode value into a json content
     * @example: 
     * ============
     * let str = "{0x1F3B5}";
     * let dmut lex = Lexer!{c32}::new (str, tokens-> JsonTokens);
     * let i : c32 = parseUnicode (alias lex);
     * ============
     * @assume: the \u is already read in the lexer
     */
    pub def parseUnicode (dmut lex : &Lexer!{c32})-> c32
        throws &SyntaxError
    {
        let (next, l, c) = lex:.next ();
        if (next != JsonTokens::LACC) {
            throw SyntaxError::new ("expected '{' (not '" ~ next ~ "')", l, c);
        }

        let (code, l2, c2) = lex:.next ();
        let i = {        
            import std::conv;
            cast!c32 (to!{u32, "x"} (code))            
        } catch {
            _ =>
            throw SyntaxError::new ("expected hexa code (not '" ~ code ~ "')", l2, c2);
        }
        
        let (end, l_, c_) = lex:.next ();
        if (end != JsonTokens::RACC) {
            throw SyntaxError::new ("expected '}' (not '" ~ end ~ "')", l_, c_);
        }
        
        i
    }

    /**
     * Internal function used to parse a value inside a lexer using the json format
     * @example: 
     * ===============
     * let str = "'test'";
     * let dmut lex = Lexer!{c32}::new (str, tokens-> JsonTokens);
     * let i : &Config = parseValue (alias lex);
     * match i {
     *      Str (str:_)=> assert (str == "test");
     * }
     * ===============
     */
    pub def parseValue (dmut lex : &Lexer!{c32})-> &Config    
        throws &SyntaxError
    {
        let (begin, _, _) = lex:.nextNoConsume ();
        match begin {
            "{" => return parseDict (alias lex);
            "[" => return parseArray (alias lex);
            "'" | "\"" => return parseString (alias lex);
            "false" => {
                lex:.next (); 
                return Bool::new (false);
            }
            "true" => {
                lex:.next ();
                return Bool::new (true);
            }
            _ => return parseInt (alias lex);
        }
    }

    /**
     * Internal function used for parsing a int content inside a lexer using the json format
     * @params: 
     *    - lex: the lexer containing the int
     * @example: 
     * =============
     * let str = "334";
     * let dmut lex = Lexer!{c32}::new (str, tokens-> JsonTokens);
     * let i : &Int = parseInt (alias lex);
     * =============
     * @throws: 
     *    - &SyntaxError: if the format is not respected
     */
    pub def parseInt (dmut lex : &Lexer!{c32}) -> &Config
        throws &SyntaxError
    {
        import std::conv;
        let (next, l, c) = lex:.next ();
        {
            Int::new (to!i64 (next))
        } catch {
            _ : &CastFailure => {
                {
                    let u = to!{u32, "x"} (next);
                    Int::new (cast!i64 (u))
                } catch {
                    _ =>  
                    throw SyntaxError::new ("expected int value (not '" ~ next ~ "')", l, c);
                }
            }
        }
    }

    /**
     * Internal function used for parsing arrays
     * @params: 
     *    - lex: the lexer containing the array
     * @example: 
     * =============
     * let str = "[1, 2, 3]";
     * let dmut lex = Lexer!{c32}::new (str, tokens-> JsonTokens);
     * let arr : &Array = parseArray (alias lex);
     * =============
     * @throws: 
     *    - &SyntaxError: if the format is not respected
     */
    pub def parseArray (dmut lex : &Lexer!{c32}) -> &Array
        throws &SyntaxError
    {
        let dmut arr = Array::new ();
        {
            let (skip, l, c) = lex:.next ();
            if (skip != "[") throw SyntaxError::new ("expected '[' (not '" ~ skip ~ "')", l, c);
        }
        
        loop {
            let (next, _, _) = lex:.nextNoConsume ();
            if (next == "]") {
                lex:.next ();
                break {};
            }
            
            arr:.push (parseValue (alias lex));
            let (tok, line, col) = lex:.next ();
            if (tok == "]") break {}
            else if (tok != ",") {            
                throw SyntaxError::new ("expected ']' or ',' (not '" ~ tok ~ "')", line, col);
            }
        }
        
        return arr;
    }

    
}



mod Dumper {

    pub def dump (dmut stream : &StringStream, cfg : &Config, indent : i32 = 0) {
        match cfg {
            x : &Dict => {
                Dumper::dumpDict (alias stream, x, indent-> indent)
            }
            arr : &Array => {
                Dumper::dumpArray (alias stream, arr, indent-> indent)
            }
            Int (i-> i : _) => {
                stream:.write (i);
            }
            Str (str-> str : _) => {
                stream:.write ("\"", str, "\"");
            }
            Bool (b-> b : _) => {
                if (b) { stream:.write ("true"); }
                else { stream:.write ("false"); }
            }
            Float (f-> f : _) => {
                stream:.write (f);
            }
        }
    }

    pub def dumpArray (dmut stream : &StringStream, x : &Array, indent : i32 = 0) {
        stream:.write ("["s8);
        let mut z = 0;
        let mut returned = false;
        for i in x {
            if (z != 0) {
                stream:.write (", "s8);
                if (returned) {
                    stream:.write ("\n"s8);
                    for _ in 0 .. indent + 1 {
                        stream:.write (" "s8);
                    }
                }
            }
            
            match i {
                j: &Array => {
                    Dumper::dump (alias stream, j, indent -> indent + 1);
                    returned = true;
                }
                j: &Str => {
                    Dumper::dump (alias stream, j, indent -> indent + 1);
                    returned = true;
                }
                j: &Dict => {
                    Dumper::dump (alias stream, j, indent -> indent + 1);
                    returned = true;
                }
                j: _ => {
                    Dumper::dump (alias stream, j, indent -> indent + 1);
                    returned = false;
                }
            }
            z += 1;
        }
        stream:.write ("]"s8);
    }

    pub def dumpDict (dmut stream : &StringStream, d : &Dict, indent : i32 = 0) {
        stream:.write ("{"s8);
        
        if (d.len () != 0us) {
            stream:.write ("\n"s8);
            for _ in 0 .. indent + 3 {
                stream:.write (" "s8);
            }
        }

        let mut z = 0;
        for i, j_ in d {
            if (z != 0) {
                stream:.write (", \n"s8);
                for _ in 0 .. indent + 3 {
                    stream:.write (" "s8);
                }
            }
            
            match j_ {
                j: &Array => {
                    stream:.write ("\""s8, i, "\" : "s8);                    
                    Dumper::dump (alias stream, j, indent -> indent + cast!i32 (i.len) + 3);
                }
                j: &Str => {
                    stream:.write ("\""s8, i, "\" : "s8);                    
                    Dumper::dump (alias stream, j, indent -> indent + cast!i32 (i.len) + 3);
                }
                j: &Dict => {
                    stream:.write ("\""s8, i, "\" : "s8);                    
                    Dumper::dump (alias stream, j, indent -> indent + cast!i32 (i.len) + 3);
                }
                j: _ => {
                    stream:.write ("\""s8, i, "\" : "s8);                    
                    Dumper::dump (alias stream, j, indent -> indent + cast!i32 (i.len) + 3);
                }            
            }
            z += 1;
        }

        if (d.len () != 0us) {
            stream:.write ("\n"s8);
            for _ in 0 .. indent {
                stream:.write (" "s8);
            }
        }
        stream:.write ("}"s8);
    }
    
}
