mod std::config::conv;

import core::typeinfo, core::array, core::exception, core::object;
import std::config;
import std::io, std::traits;

/**
 * Simple trait to impl in a class to be convertible to a Config
 */
pub trait Serializable {
    pub def serialize (self)-> &Config;
}

/**
 * Try to transform the configuration into a structure
 * @example: 
 * ============
 * import std::config::toml;
 * import std::io;
 * 
 * struct 
 * | mut package : Foo
 *  -> Package;
 *  
 * struct 
 * | mut name : [c32]
 * | mut version : [c32]
 *  -> Foo;
 *
 * let tomlFile = str#{ 
 *     [package]
 *     name = "package name"
 *     version = "1.0.0"
 * };
 * 
 * { 
 *    let cfg = tomlFile.parse ().to!Package ();
 *    println (cfg);
 * } catch {
 *    err: &ConfigError => { 
 *         println (err); 
 *    }
 * }
 * ============
 * @throws: 
 *   - &ConfigError: if the cast cannot be made
 */
pub def to {struct T} (cfg : &Config)-> mut T
    throws &ConfigError
{
    match cfg {
        x : &Dict => {
            return CfgToConfig::fromDict!T (x);
        }
        _ => {
            throw ConfigError::new (T::typeinfo, cfg::typeinfo);
        }
    }
}

/**
 * Transform a configuration into a class
 * @info: The class must have a constructor taking a configuration as a parameter
 * @example: 
 * ===========================
 * class A {
 *    let i = 0;
 *    pub self (c : &Config) {
 *        match c {
 *             Int (i-> i:_) => { self.i = i; }
 *        }
 *    }
 * }
 * 
 * {
 *     let c = tomlFile.parse ().to!(&A) ();
 *     println (c);
 * } catch {
 *     err: &ConfigError => { 
 *          println (err); 
 *     }
 * }
 * ===========================
 */
pub def to {class T} (cfg : &Config)-> T
    throws &ConfigError
{
    {
        // If the constructor does not throw anything the catcher beneath will not work
        __pragma!fake_throw (&ConfigError); 
        T::new (cfg)
    } catch {
        ex : _  => {
            throw ConfigError::new (T::typeinfo, cfg::typeinfo, subError-> ex?);
        }
    }    
}

/**
 * Transform a configuration into a i64
 * @example: 
 * =============
 * let i = Int::new (12);
 * assert (i.to!(i64) () == 12i64);
 * =============
 * @throws: 
 *   - &ConfigError: if the cast cannot be made
 */
pub def if isIntegral!{T} () to {T, C of &Config} (cfg : C)-> T
    throws &ConfigError
{
    match cfg {
        Int (i-> i:_) => { return cast!T (i); }
        _ => {
            throw ConfigError::new (T::typeinfo, cfg::typeinfo);
        }
    }
}


/**
 * Transform a configuration into a f64
 * @example: 
 * =============
 * let i = Float::new (12.0);
 * assert (i.to!(f64) () == 12.0);
 * =============
 * @throws: 
 *   - &ConfigError: if the cast cannot be made
 */
pub def if (isFloating!{T} ()) to {T, C of &Config} (cfg : C)-> T
    throws &ConfigError
{
    match cfg {
        Float (f-> f:_) => { return cast!T (f); }
        _ => {
            throw ConfigError::new (T::typeinfo, cfg::typeinfo);
        }
    }
}

/**
 * Transform a configuration into a string
 * @example: 
 * =============
 * let i = Str::new ("foo");
 * assert (i.to!([c32]) () == "foo");
 * =============
 * @throws: 
 *   - &ConfigError: if the cast cannot be made
 */
pub def if is!{U}{X of c32} to {T of [U], U, C of &Config} (cfg : C)-> T
    throws &ConfigError
{
    match cfg {
        Str (str-> str:_) => { return str; }            
        _ => {
            throw ConfigError::new (T::typeinfo, cfg::typeinfo);
        }
    }
}

/**
 * Transform a configuration into a string
 * @example: 
 * =============
 * let i = Str::new ("foo");
 * assert (i.to!([c8]) () == "foo"s8);
 * =============
 * @throws: 
 *   - &ConfigError: if the cast cannot be made
 */
pub def if is!{U}{X of c8} to {T of [U], U, C of &Config} (cfg : C)-> T
    throws &ConfigError
{
    import std::conv;
    match cfg {
        Str (str-> str:_) => { return str.to![c8] (); }            
        _ => {
            throw ConfigError::new (T::typeinfo, cfg::typeinfo);
        }
    }
}


/**
 * Transform a configuration into a bool
 * @example: 
 * =============
 * let i = Bool::new (false);
 * assert (i.to!(bool) () == false);
 * =============
 * @throws: 
 *   - &ConfigError: if the cast cannot be made
 */
pub def if is!{T}{X of bool} to {T, C of &Config} (cfg : C)-> T
    throws &ConfigError
{
    match cfg {
        Bool (b-> b:_) => { return b; }
        _ => {
            throw ConfigError::new (T::typeinfo, cfg::typeinfo);
        }
    }
}

/**
 * Transform a configuration into an array
 * @example: 
 * =============
 * let i = Array::new (Int::new (1), Int::new (2));
 * assert (i.to!([i32]) () == [1, 2]);
 * =============
 * @throws: 
 *   - &ConfigError: if the cast cannot be made
 */
pub def to {T of [U], U, C of &Config} (cfg : C)-> T
    throws &ConfigError
{
    import std::collection::vec, std::conv;
    match cfg {
        x : &Array => { return CfgToConfig::fromArray!(T) (x); }
        _ => {
            cte if (is!{U}{Z of c32}) {
                match cfg {
                    Str (str-> str:_) => {            
                        return str; 
                    }
                }
            } else cte if (is!{U} {Z of c8}) {
                match cfg {
                    Str (str-> str:_) => {            
                        return str.to![c8] (); 
                    }
                }
            }                
            return [cfg.(config::conv::to)!(U) ()];                
        }
    }
}


mod CfgToConfig {

    /**
     * Transform the dictionnary into a struct
     * @example: 
     * ============ 
     * ============ 
     * @throws: 
     *   - &ConfigError: if the configuration does not contains every field of the struct
     * @info: if the configuration contains more information they are ignored
     */
    pub def fromDict {struct T} (dict : &Dict)-> mut T
        throws &ConfigError
    {
        __pragma!fake_throw (&ConfigError); // if the struct is empty
        let dmut t = alias ([0u8 ; sizeof (T)]);
        cte for i in 0us .. (__pragma!field_offsets (T)).len {
            let offset = (__pragma!field_offsets (T)) [i];
            let size = sizeof (__pragma!field_type (T, (__pragma!field_names (T))[i]));
            let dmut z : &(mut void) = alias (cast!(&void) ((t [offset .. (offset + size)]).ptr));
            
            if ((__pragma!field_names (T))[i] in dict) {
                cte if (is!{__pragma!field_type (T, (__pragma!field_names (T))[i])} {class C} && !__pragma!compile ({
                    to!(__pragma!field_type (T, (__pragma!field_names (T))[i])) (dict [(__pragma!field_names (T))[i]]);
                })) {
                    cte assert (false, "Type : '" ~ (__pragma!field_type (T, (__pragma!field_names (T))[i]))::typeid ~ "' is not decodable from a configuration, it must have a constructor with a '&Config' as parameter");
                } else {                    
                    {
                        *(cast! (&(__pragma!field_type (T, (__pragma!field_names (T))[i]))) (z)) = to!(__pragma!field_type (T, (__pragma!field_names (T))[i])) (dict [(__pragma!field_names (T))[i]]);                    
                    } catch {                        
                        err : &ConfigError => {
                            throw ConfigError::new (name-> (__pragma!field_names (T))[i], T::typeinfo, dict::typeinfo, subError-> (cast!(&Exception) (err))?);
                        }
                        _ => {
                            throw ConfigError::new (name-> (__pragma!field_names (T))[i], T::typeinfo, dict::typeinfo);
                        }
                    }
                }
            } else {                
                cte if (!(__pragma!field_has_value (T))[i]) {
                    throw ConfigError::new (name-> (__pragma!field_names (T))[i], T::typeinfo, dict::typeinfo, subError-> (cast!(&Exception) (AssertError::new ("no default value")))?);
                } else {
                    *(cast! (&(__pragma!field_type (T, (__pragma!field_names (T))[i]))) (z)) = __pragma!field_value (T, (__pragma!field_names (T))[i]);
                }
            }        
        }    

        alias __pragma!trusted ({
            let dmut j = alias *(cast!(mut &(mut T)) (cast!(mut &(mut void)) (t.ptr)));
            alias j
        })
    } catch {
        err : &ConfigError => {
            throw err;
        }
        _  => {
            throw ConfigError::new (T::typeinfo, dict::typeinfo);
        }
    }

    /**
     * Transform an array configuration into an array
     * @example: 
     * ============ 
     * ============ 
     * @throws: 
     *   - &ConfigError: if the configuration casting failed
     */
    pub def fromArray {T of [U], U} (cfg : &Array) -> T
        throws &ConfigError
    {
        import std::collection::vec;
        let dmut res = Vec!{U}::new ();
        for i in cfg {
            res:.push (i.to!U ());                   
        }
        
        res:.fit ();
        return res [];
    }
    
}

/**
 * Transform a class into a configuration
 * @example:
 * ===================
 * class A {
 *     impl std::config::conv::Serializable {
 *          pub over seralize (self)-> &Config {
 *              let dmut d = Dict::new ();
 *              d:.insert ("foo", Float::new (12.0));
 *              d
 *          }
 *     }
 * }
 * ===================
 */
pub def if is!{C}{X of &Config} to {class C, T impl Serializable} (value : T)-> &Config {
    value.serialize ()
}


pub def if is!{C}{X of &Config} to {class C, class T} (value : T)-> &Config {
    cte assert ("Class " ~ T::typeid ~ " does not impl Serializable");
}


/**
 * Transform a i32 into a configuration
 * @example: 
 * ============
 * let i = 90;
 * let cfg : &Config = i.to!(&Config) ();
 * ============
 */
pub def if (is!{C}{X of &Config} && isSigned!{T} ()) to {class C, T} (value : T)-> &Config {
    Int::new (cast!i64 (value))
}

/**
 * Transform a bool into a configuration
 * @example: 
 * ============
 * let b = false;
 * let cfg : &Config = b.to!(&Config) ();
 * ============
 */
pub def if (is!{C}{X of &Config} && is!{T}{X of bool}) to {class C, T} (value : T)-> &Config {
    Bool::new (value)
}

/**
 * Transform a f64 into a configuration
 * @example: 
 * ============
 * let f = 3.14;
 * let cfg : &Config = f.to!(&Config) ();
 * ============
 */
pub def if (is!{C}{X of &Config} && isFloating!{T} ()) to {class C, T} (value : T)-> &Config {
    Float::new (cast!f64 (value))
}

/**
 * Transform a [c32] into a configuration
 * @example: 
 * ============
 * let str = "test";
 * let cfg : &Config = str.to!(&Config) ();
 * ============
 */
pub def if (is!{C}{X of &Config} && isChar!{U} ()) to {class C, T of [U], U} (value : T)-> &Config {
    cte if is!{U}{X of c32} {
        Str::new (value)
    } else {
        import std::conv;
        Str::new (value.to![c32] ())
    }
}

/**
 * Transform a [c8] into a configuration
 * @example: 
 * ============
 * let str = "test"s8;
 * let cfg : &Config = str.to!(&Config) ();
 * ============
 */
pub def if is!{C}{X of &Config} to {class C, T of [U], U of c8} (value : T)-> &Config {
    import std::conv;
    Str::new (value.to![c32] ())
}

/**
 * Transform a slice into a configuration
 * @example: 
 * ============
 * let slc = [1, 2, 3];
 * let cfg : &Config = slc.to!(&Config) ();
 * ============
 */
pub def if is!{C}{X of &Config} to {class C, T of [U], U} (value : T)-> &Config {
    let dmut arr = Array::new ();
    for i in value {
        arr:.push (to!(&Config) (i));
    }
    arr
}


/**
 * Transform a structure into a configuration
 * @example: 
 * ===============
 * struct 
 * | x : i32
 * | foo : [c32]
 * | inner : [X]
 *  -> X;
 * 
 * let st = X (1, "foo", [X (2, "bar", [])]);
 * let cfg : &Config = st.to!(&Config} ();
 * ===============
 */
pub def if is!{C}{X of &Config} to {class C, struct T} (value : T)-> &Config {
    let dmut res = Dict::new ();
    cte for i in 0u32 .. (typeof (__pragma!tupleof (value))::arity) {
        let name = (__pragma!field_names (T))[i];
        cte if (__pragma!compile ({
            let _ = to!(&Config) ((__pragma!tupleof (value)).i);
        })) {
            let x = to!(&Config) ((__pragma!tupleof (value)).i);
            res:.insert (name, x);
        } else {
            cte if (is!{typeof ((__pragma!tupleof (value)).i)} {class U}) {
                cte assert (false, "Field of " ~ T::typeid ~ " of type class " ~ typeof ((__pragma!tupleof (value)).i)::typeid ~ " does not impl " ~ Serializable::typeid);
            } else {
                cte assert (false, "Field of " ~ T::typeid ~ " of type '" ~ typeof ((__pragma!tupleof (value)).i)::typeid ~ "' cannot be encoded by a configuration");
            }
        }
    }
    
    res
}
