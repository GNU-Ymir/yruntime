/**
 * The config modules defines classes used to serialize and deserialize data into standard format such as json and toml using a common data structure. Every file format should be transformed into a configuration, such that its treatment is common, and does not require hadoc treatment. For the moment only json and toml formats are managed, but it is planned to implement the loading and dumping for xml and yaml formats.
 * <br>
 * <br>
 * 
 * Config module publically imports the following sub modules : 
 *    - <a href="./std_config_conv.html">conv</a>
 *    - <a href="./std_config_data.html">data</a>
 *    - <a href="./std_config_json.html">json</a>
 *    - <a href="./std_config_toml.html">toml</a>
 * 
 * @Authors: Emile Cadorel
 * @License: GPLv3
 * <hr>

 * @example:
 * ===
 * import std::config::_;
 * 
 * 
 * let j = json#{
 *     "fst" : {
 *           "foo" : {"bar" : "baz"},
 *           "scd" : [1, "inner", 2.0f, 3]
 *     }
 * };
 *
 * 
 * match j ["fst"]? {
 *      Ok (dict : &Dict) => {
 *          println (dict);
 *      }
 * }
 * 
 * let ival = j["fst"]["scd"][0].to!{i32} ()?; // using type option as OutOfArray can be thrown
 * let fval = j["fst"]["scd"][2].to!{f32} ()?;
 * let sval = j["fst"]["foo"]["bar"].(config::conv::to)!{[c32]} ()?;
 * let svalc8 = j["fst"]["foo"]["bar"].(config::conv::to)!{[c8]} ()?;
 * 
 * assert (ival.unwrap () == 1 && fval.unwrap () == 2.0f);
 * assert (sval.unwrap () == "baz" && svalc8.unwrap () == "baz"s8);
 *
 * let t = j.(toml::dump) ();
 * 
 * // [fst]
 * // foo = {bar = "baz"}
 * // scd = [1, "inner", 
 * //        2.000000, 3]
 * println (t); 
 * ===
 * <br>
 * Configuration is divided in some elementary elements defined in the module <code class="hljs ymir-lang"><a href="./std_config_data.html">std::config::data</a></code>, `Dict` that associates string keys to `Config` values, `Array` that contains a list of `Config` values, and some scalar types for example `Int`, `Float`, `Char`, etc.
 * The module <code class="hljs ymir-lang"><a href="./std_config_conv.html">std::config::conv</a></code> defines functions that can be used to convert `Config` into more convinient types. 
 * 
 */
mod std::config::_;

import core::object, core::typeinfo, core::exception;
import core::array;
import core::dispose;

import std::io, std::stream;
import std::collection::vec;
import std::collection::map;


pub import std::config::conv;
pub import std::config::json;
pub import std::config::toml;
pub import std::config::data;
