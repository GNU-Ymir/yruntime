/**
 * This module implements a set of functions for input and output to
 * stdout, stderr and stdin.  There are three subset of functions,
 * functions named `print` that print data to stdout, functions named
 * `eprint` that print data to stderr, and functions named `read` that
 * read data from stdin. `print` and `eprint` functions are variadic,
 * so they can take an arbitrary number of parameters to be printed on
 * respectively stdout and stderr. The suffix `ln` for both those kind
 * of functions can be set to add a newline at the end of the
 * printing. Printing class instance is made by using the `Streamable`
 * trait defined in the module `std::stream`.
 * @Authors: Emile Cadorel
 * @Licence: GPLv3 <hr> @example: === import std::io;
 * 
 * println ("Hello World !");
 * println (); // just print a newline
 * 
 * print ("Without a newline");
 * 
 * // Print and println functions are variadic
 * println ("I : ", 12, ", J : ", 89.0f, " T : ", (1, 2, 'r'));
 * 
 * // Read a int from stdin
 * let i = read!i32 (ask-> "Type a int > ");
 * 
 * // Read a string from stdin
 * let msg = read![c8] (ask-> "Type a string > ");
 * 
 * 
 * if (i < 89) {
 *     // As for print and println, eprint version are variadic
 *     eprintln ("Error I : ", i, " must be greater than J : ", 89, " ", msg);
 *
 *     eprint ("Printing an error with no line return");
 *     eprintln ();
 * }
 * 
 * // Classes are printable if they are Streamable
 * class A {
 *      let _i : i32;
 *      pub self (i : i32) with _i = i {}
 * 
 *      impl std::stream::Streamable;
 * }
 *
 * let a = A::new (12), b = A::new (89);
 * 
 * // A instances are printable
 * println (a, " ", b);
 * eprintln (a, " ", b);
 * ===
 */

mod std::io;

import core::exception, core::typeinfo, core::array;
import core::object;
pub import std::stream;
import etc::c::stdio;

extern (C) static stderr : *void;

/**
 * Put a simple ascii char on stdout
 */
extern (C) def putchar (c : c8);

/**
 * Put a simple ascii char to fd
 */
extern (C) def putc (c : c8, fd : *void);

/**
 * Runtime function that write a c32 char on stdout
 */
extern (C) def _yrt_putwchar (c : c32);

/**
 * Runtime function that write a c32 char on stderr
 */
extern (C) def _yrt_eputwchar (c : c32);

/**
 * Runtime function that read a c32 char from stdin
 */
extern (C) def _yrt_getwchar ()-> c32;

/**
 * C printf function 
 */
extern (C) def printf (c : *c8, ...);

/**
 * C fprintf function 
 */
extern (C) def fprintf (fd : *void, c : *c8, ...);

/**
 * C scanf function
 */
extern (C) def scanf (c : *c8, ...);

/**
 * Runtime function that prints a f32 to stdout
 */
extern (C) def _yrt_printf32 (f : f32);

/**
 * Runtime function that prints a f64 to stdout
 */
extern (C) def _yrt_printf64 (f : f64);

/**
 * Runtime function that prints a f80 to stdout
 * */
extern (C) def _yrt_printf80 (f : f80);

/**
 * Runtime function that prints a fsize to stdout
 * */
extern (C) def _yrt_printfsize (f : fsize);

/**
 * Runtime function that prints a f32 to stderr
 */
extern (C) def _yrt_eprintf32 (f : f32);

/**
 * Runtime function that prints a f64 to stderr
 */
extern (C) def _yrt_eprintf64 (f : f64);

/**
 * Runtime function that prints a f80 to stderr
 */
extern (C) def _yrt_eprintf80 (f : f80);

/**
 * Runtime function that prints a fsize to stderr
 */
extern (C) def _yrt_eprintfsize (f : fsize);

/**
 * flush the stdout for immediate printing
 */
extern (C) def _yrt_fflush_stdout ();

pub {
    /**
     * Print a char to stdout.
     */
    def print (c : c8) -> void {
        putchar (c)
    }

    /**
     * Print an utf8 char to stderr.
     */
    def eprint (c : c8) {
        
        putc (c, std::io::stderr);
    }
        
    /**
     * Print an utf32 char to stdout.
     */
    def print (c : c32) -> void {
        _yrt_putwchar (c)
    }

    /**
     * Print an utf32 char to stderr.
     */
    def eprint (c : c32) {
        _yrt_eputwchar (c);
    }

    /**
     * Print an utf32 string to stdout.
     */
    def print (s : [c32]) -> void {
        let mut i = 0_u64;
        while i < s.len {
            print (s [i]);
            i = i + 1_u64;
        }
    }

    /**
     * Print an utf32 string to stderr.
     */
    def eprint (s :  [c32]) {
        for i in 0us .. s.len {
            eprint (s [i]);            
        }
    }
    
    /**
     * Print an utf8 string to stdout.
     */
    def print (s : [c8]) -> void {
        let mut i = 0_u64;
        while i < s.len {
            print (s [i]);
            i = i + 1_u64;
        }
    }

    /**
     * Print an utf8 string to stderr.
     */
    def eprint (s : [c8]) {
        for i in 0us .. s.len {
            eprint (s [i]);
        }
    }
    
    /**
     * Print a isize to stdout.
     */
    def print (i : isize) -> void {
        printf ((alias "%lld"s8).ptr, i);
    }

    /**
     * Print a isize to stderr.
     */
    def eprint (i : isize) {
        fprintf (std::io::stderr, "%lld"s8.ptr, i);
    }
        
    /**
     * Print a usize to stdout.
     */
    def print (i : usize) -> void {
        printf ((alias "%llu"s8).ptr, i);
    }

    /**
     * Print a usize to stderr.
     */
    def eprint (i : usize) -> void {
        fprintf (std::io::stderr, (alias "%llu"s8).ptr, i);
    }

    /**
     * Print a i64 to stdout.
     */
    def print (i : i64) -> void {
        printf ((alias "%lld"s8).ptr, i);
    }

    /**
     * Print a i64 to stdout.
     */
    def eprint (i : i64) -> void {
        fprintf (std::io::stderr, (alias "%lld"s8).ptr, i);
    }

    /**
     * Print a i32 to stdout.
     */
    def print (i : i32) -> void {
        printf ((alias "%d"s8).ptr, i);
    }

    /**
     * Print a i32 to stderr.
     */
    def eprint (i : i32) -> void {
        fprintf (std::io::stderr, (alias "%d"s8).ptr, i);
    }

    /**
     * Print a i16 to stdout.
     */
    def print (i : i16) -> void {
        printf ((alias "%hd"s8).ptr, i);
    }

    /**
     * Print a i16 to stderr.
     */
    def eprint (i : i16) -> void {
        fprintf (std::io::stderr, (alias "%hd"s8).ptr, i);
    }

    /**
     * Print a i8 to stdout.
     */
    def print (i : i8) -> void {
        printf ((alias "%hhx"s8).ptr, i);
    }

    /**
     * Print a i8 to stderr.
     */
    def eprint (i : i8) -> void {
        fprintf (std::io::stderr, (alias "%hhx"s8).ptr, i);
    }

    /**
     * Print a u64 to stdout.
     */
    def print (i : u64) -> void {
        printf ((alias "%llu"s8).ptr, i);
    }

    /**
     * Print a u64 to stderr.
     */
    def eprint (i : u64) -> void {
        fprintf (std::io::stderr, (alias "%llu"s8).ptr, i);
    }
        
    /**
     * Print a u32 to stdout.
     */
    def print (i : u32) -> void {
        printf ((alias "%u"s8).ptr, i);
    }

    /**
     * Print a u32 to stderr.
     */
    def eprint (i : u32) -> void {
        fprintf (std::io::stderr, (alias "%u"s8).ptr, i);
    }

    /**
     * Print a u16 to stdout.
     */
    def print (i : u16) -> void {
        printf ((alias "%hu"s8).ptr, i);
    }

    /**
     * Print a u16 to stderr.
     */
    def eprint (i : u16) -> void {
        fprintf (std::io::stderr, (alias "%hu"s8).ptr, i);
    }

    /** 
     * Print a u8 to stdout 
     * @params:
     *    - i: the int to print
     */
    def print (i : u8) -> void
        printf ((alias "%hhx"s8).ptr, i)
        
    /**
     * Print an address to stdout.
     */
    def print (i : *(void))-> void {
        printf ((alias "%x"s8).ptr, i);
    }

    /**
     * Print an address to stderr.
     */
    def eprint (i : *(void))-> void {
        fprintf (std::io::stderr, (alias "%x"s8).ptr, i);
    }
    
    /**
     * Print a float value of size 64 to stdout
     */
    def print (f : f64) -> void {
        _yrt_printf64 (f);
    }

    /**
     * Print a float value of size 64 to stderr.
     */
    def eprint (f : f64) -> void {
        _yrt_eprintf64 (f);
    }
        
    /**
     * Print a float value of size 32 to stdout
     */
    def print (f : f32) -> void {
        _yrt_printf32 (f);
    }

    /**
     * Print a float value of size 32 to stderr.
     */
    def eprint (f : f32) -> void {
        _yrt_eprintf32 (f);
    }
    
    /**
     * Print a float value of size 80 to stdout
     */
    def print (f : f80) -> void {
        _yrt_printf80 (f);
    }

    /**
     * Print a float value of size 80 to stderr.
     */
    def eprint (f : f80) -> void {
        _yrt_eprintf80 (f);
    }

    /**
     * Print a float value of size 80 to stdout
     */
    def print (f : fsize) -> void {
        _yrt_printfsize (f);
    }

    /**
     * Print a float value of size 80 to stderr.
     */
    def eprint (f : fsize) -> void {
        _yrt_eprintfsize (f);
    }



    /**
     * Print a bool value to stdout.
     */
    def print (b : bool) -> void {
        if (b) 
            printf ((alias "true"s8).ptr);
        else
            printf ((alias "false"s8).ptr);
    }

    /**
     * Print a bool value to stderr.
     */
    def eprint (b : bool) -> void {
        if (b) 
            fprintf (std::io::stderr, (alias "true"s8).ptr);
        else
            fprintf (std::io::stderr, (alias "false"s8).ptr);
    }

    /**
     * Print an array of type U to stdout.
     * @params:
     *    - a: an array to print
     * @templates : 
     *    - T: a slice type
     *    - U: any 
     */
    def print {T of [U], U} (a : T) -> void {
        let mut i = 0_u64;
        print ('['c8);
        while i < a.len {
            if i != 0_u64
                printf ((alias ", "s8).ptr);
            
            print (a [i]);
            i = i + 1_u64;
        }
        print (']'c8);
    }

    /**
     * Print an array of type U to stderr.
     * @params:
     *    - a: an array to print
     * @templates : 
     *    - T: a slice type
     *    - U: any 
     */
    def eprint {T of [U], U} (a : T) -> void {
        let mut i = 0_u64;
        eprint ('['c8);
        while i < a.len {
            if i != 0_u64
                fprintf (std::io::stderr, (alias ", "s8).ptr);
            
            eprint (a [i]);
            i = i + 1_u64;
        }
        eprint (']'c8);
    } 

    /**
     * Print a static array of type U to stdout
     * @params : 
     *    - a: an array to print
     * @templates : 
     *    - T: an static array type 
     *    - U: any
     *    - N: the static size 
     */
    def print {T of [U;N], U, N : usize} (a : T) -> void {
        print ('['c8);
        for i in 0_u64 .. cast!u64 (N) {
            if i != 0_u64
                printf ((", "s8).ptr);
            print (a [i]);
        }
        print (']'c8);
    } 

    /**
     * Print a static array of type U to stderr.
     * @params : 
     *    - a: an array to print
     * @templates : 
     *    - T: an static array type 
     *    - U: any
     *    - N: the static size 
     */
    def eprint {T of [U;N], U, N : usize} (a : T) -> void {
        eprint ('['c8);
        for i in 0_u64 .. cast!u64 (N) {
            if i != 0_u64
                fprintf (std::io::stderr, (", "s8).ptr);
            eprint (a [i]);
        }
        eprint (']'c8);
    } 

    /**
     * Print a range type to stdout
     * @params:
     *    - a: the value of type range
     * @template:
     *    - T: any type
     * */
    def print {T} (a : ..T)-> void {
        print ("range!", T::typeid, " (", a.fst, "->", a.scd, " by ", a.step, " ? ", a.contain, ')');
    }

    /**
     * Print a range type to stderr
     * @params:
     *    - a: the value of type range
     * @template:
     *    - T: any type
     * */
    def eprint {T} (a : ..T)-> void {
        eprint ("range!", T::typeid, " (", a.fst, "->", a.scd, " by ", a.step, " ? ", a.contain, ')');
    }

    /**
     * Print an option type to stdout
     * @params: 
     *   - a: a value of type option 
     * @templates: 
     *   - T: any type
     */
    def print {T} (a : T?) -> void {
        cte if (!is!{T}{U of void}) {
            match a {
                Ok  (x:_)   => print ("Ok(", x, ")");
                Err (msg:_) => print ("Err(", msg, ")");
                Err ()      => print ("Err()");
            }
        } else {
            match a {
                Ok  ()   => print ("Ok()");
                Err (msg:_) => print ("Err(", msg, ")");
                Err ()      => print ("Err()");
            }
        }
    }

    /**
     * Print an option type to stderr.
     * @params: 
     *   - a: a value of type option 
     * @templates: 
     *   - T: any type
     */
    def eprint {T} (a : T?) -> void {
        cte if (!is!{T}{U of void}) {
            match a {
                Ok  (x:_)   => eprint ("Ok(", x, ")");
                Err (msg:_) => eprint ("Err(", msg, ")");
                Err ()      => eprint ("Err()");
            }
        } else {
            match a {
                Ok  ()   => eprint ("Ok()");
                Err (msg:_) => eprint ("Err(", msg, ")");
                Err ()      => eprint ("Err()");
            }
        }
    }
    
    /**
     * Print multiple elements to stdout.
     */
    def print  {F, T...} (a : F, b : T) {
        print (a);
        cte if (is!T {Z of (U,), U...}) {
            for i in b 
                print (i);
        } else {
            print (b);
        }
    }

    /**
     * Print multiple elements to stderr.
     */
    def eprint  {F, T...} (a : F, b : T) {
        eprint (a);
        cte if (is!T {Z of (U,), U...}) {
            for i in b 
                eprint (i);
        } else {
            eprint (b);
        }
    }
    
    /**
     * Print an element of type tuple to stdout
     * @params: 
     *    - a: a tuple of arbitrary arity
     */
    def print {T of (U,), U...} (a : T) {
        print ('(');
        let mut j = 0;
        for i in a {
            if j != 0 {
                print (',');
            }
            print (i);
            j += 1;
        }        
        if (j == 1) print (',');
        print (')');
    }

    /**
     * Print an element of type tuple to stderr.
     * @params: 
     *    - a: a tuple of arbitrary arity
     */
    def eprint {T of (U,), U...} (a : T) {
        eprint ('(');
        let mut j = 0;
        for i in a {
            if j != 0 {
                eprint (',');
            }
            eprint (i);
            j += 1;
        }        
        if (j == 1) eprint (',');
        eprint (')');
    }

    /**
     * Print an empty tuple to stdout.
     */
    def print (_ : ()) {
        print ('('c8,')'c8);
    }
    
    /**
     * Print an empty tuple to stderr.
     */
    def eprint (_ : ()) {
        eprint ('('c8,')'c8);
    }

    /**
     * Print nothing to stdout (only used for variadic template loop end condition)
     */
    def print () {}

    /**
     * Print nothing to stderr (only used for variadic template loop end condition)
     */
    def eprint () {}
    
    /**
     * Print a struct to stdout
     */
    def print {struct T} (a : T) -> void {
        print (T::typeid, "(");
        cte if (typeof (__pragma!tupleof (a))::arity > 0us) {
            let mut j = 0;
            for i in __pragma!tupleof (a) {
                if (j != 0) print (", ");
                print (i);
                j += 1;
            }
        }
        print (")");
    }

    /**
     * Print a struct to stderr
     */
    def eprint {struct T} (a : T) -> void {
        eprint (T::typeid, "(");
        cte if (typeof (__pragma!tupleof (a))::arity > 0us) {
            let mut j = 0;
            for i in __pragma!tupleof (a) {
                if (j != 0) eprint (", ");
                eprint (i);
                j += 1;
            }
        }
        eprint (")");
    }
    
    /**
     * Print a class that implement the trait Streamable to stdout
     */
    def print {T impl Streamable} (a : T)-> void {
        let dmut stream = StringStream::new ();
        a.toStream (alias stream);
        print (stream []);
    }

    /**
     * Print a class that implement the trait Streamable to stderr.
     */
    def eprint {T impl Streamable} (a : T)-> void {
        let dmut stream = StringStream::new ();
        a.toStream (alias stream);
        eprint (stream []);
    }
    
    /**
     * Print the typeid of a object to stdout.
     */
    def print (a : &Object) -> void {
        print (a::typeinfo.name);
    }

    /**
     * Print the typeid of a object to stderr.
     */
    def eprint (a : &Object) -> void {
        eprint (a::typeinfo.name);
    }
    
    /**
     * Print an arbitrary number of element on stdout, and add a return line afterwards
     */
    def println {T...} (a : T) {
        cte if (is!T {Z of (U,), U...}) {
            for i in a 
                print (i);
        } else {
            print (a);
        }
        
        print ('\n'c8);
    }

    /**
     * Print a return line to stdout.
     */
    def println () {
        print ('\n'c8);
    }
    
    /**
     * Print an arbitrary number of element on stderr, and add a return line afterwards
     */
    def eprintln {T...} (a : T) {
        cte if (is!T {Z of (U,), U...}) {
            for i in a 
                eprint (i);
        } else {
            eprint (a);
        }
        
        eprint ('\n'c8);
    }

    /**
     * Print a return line to stderr.
     */
    def eprintln () {
        eprint ('\n'c8);
    }
    
    /**
     * Read a i32 from the stdin
     * @returns : a i32
     */
    def read {T of i32} (ask : [c32] = "") -> i32 {
        import etc::c::stdio;
        print (ask);
        _yrt_fflush_stdout ();
        let mut x : i32 = 0;
        scanf ("%d"s8.ptr, &x);
        x
    }

    /**
     * Read a u64 from the stdin
     * @returns : a u64
     */
    def read {T of u64} (ask : [c32] = "") -> u64 {
        import etc::c::stdio;
        print (ask);
        _yrt_fflush_stdout ();
        let mut x : u64 = 0_u64;
        scanf ("%ld"s8.ptr, &x);
        x
    }

    /**
     * Read a c8 from the stdin
     * @returns : a c8
     */
    def read {T of c8} (ask : [c32] = "") -> c8 {
        import etc::c::stdio;
        print (ask);
        _yrt_fflush_stdout ();
        let mut x : c8 = '\u{0}'c8;
        if (etc::c::stdio::read (stdin, alias &x, 1us) == EOF) {
            return '\u{0}'c8;
        }
        x
    }

    /**
     * Read a c8 from the stdin, and return it as a c32
     * @returns : a c32
     */
    def read {T of c32} (ask : [c32] = "") -> c32 {
        import etc::c::stdio;
        print (ask);
        _yrt_fflush_stdout ();
        _yrt_getwchar ()       
    }

    /**
     * Read a [c8] from the stdin
     * @info: 
     * =============
     * this function waits for the enter to be pressed (if the stdin is from a terminal)
     * To avoid this waiting, you should use the std::term::Terminal class, that manage advance io
     * =============
     * @returns: a [c8]
     */
    def read {T of [U], U of c8} (ask : [c32] = "")-> [c8] {
        import etc::c::stdio;
        import std::collection::vec;
        print (ask);
        _yrt_fflush_stdout ();
        let dmut v = Vec!(c8)::new ();
        loop {
            let mut c = '\u{0}'c8;
            let size = etc::c::stdio::read (stdin, alias &c, 1us);
            if (size != EOF) {
                if (c == '\n'c8) break {}
                v:.push (c);
            } else break {}
        }
        
        v:.fit ();
        return v[];
    }

    /**
     * Read a [c32] from the stdin
     * @info: 
     * =============
     * this function waits for the enter to be pressed (if the stdin is from a terminal)
     * To avoid this waiting, you should use the std::term::Terminal class, that manage advance io
     * =============
     * @returns: a [c32]
     */
    def read {T of [U], U of c32} (ask : [c32] = "") -> [c32] {
        import etc::c::stdio;
        import std::collection::vec;
        print (ask);
        _yrt_fflush_stdout ();
        let dmut v = Vec!(c32)::new ();
        loop {
            let mut c = _yrt_getwchar ();
            if (c != '\u{0}' && c != '\n') {
                v:.push (c);
            } else break {}
        }
        
        v:.fit ();
        return v[];
    }
    
}
