mod std::collection::seq;

import core::typeinfo;
import core::array;


/**
 * A sequence is a trait that indexable collections implements (eg: vec, list)
 * It allows function to create template specialization for sequences
 * @templates: 
 *     - T: the type of element contained in the sequence
 */
pub trait Seq {T} {

    /**
     * @returns: the number of elements contained in the sequence
     */
    pub def len (self)-> usize;

    /**
     * Access a value in the sequence by index
     * @params: 
     *   - i: the index
     * @throws: 
     *   - &OutOfArray: if the index is not in the sequence
     */
    pub def opIndex (self, i : usize) -> T
        throws &OutOfArray;        
    
}
