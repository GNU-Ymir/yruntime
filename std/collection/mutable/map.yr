/**
 * This module implements the version of the `HashMap` that can store mutable values.
 * This module is publically inserted from `std::collection::map`.
 *
 * @Authors: Emile Cadorel
 * @Licence: GPLv3
 * <br>
 * <br>
 * @example:
 * ===
 * import std::io; // for println
 * import std::collection::mutable::map;
 *
 * class A {
 *    pub let mut i : i32;
 *    pub self (i : i32) with i = i {}
 *    impl Streamable;
 * }
 *
 * let dmut x = A::new (42);
 * let dmut m = HashMap!{i32, dmut &A}::new ();
 * 
 * m:.insert (12, A::new (10)); 
 * m:.insert (24, alias x); // the insertion must use a mutable version of the value
 *
 * let dmut r = m:.find (12); // retreive mutable the associated value 
 * match ref r {
 *     Ok (dmut z : _) => { z.i = 98; } // if found we can modify it
 *     Err () => { } // no value found
 * }
 * 
 * println (m); // {12=>main::A(98), 24=>main::A(42)}
 * ===
 */

mod std::collection::mutable::map;

import core::object;
import core::typeinfo;
import core::duplication;
import core::exception;
import core::array;

import std::io, std::stream;
import std::hash;
import std::conv;

/**
 * The number or allocated node at initialization
 */
prv enum : usize
| DEFAULT_ALLOC_SIZE = 10us
 -> MapConst;


/**
 * A hash map implementation that associated a key to a value
 * The data in the map are unordered
 * This version stores mutable class values
 *
 * @example: 
 * ==========
 * let dmut x = HashMap!([c32], i32)::new ();
 * x:.insert ("foo", 12);
 * x:.insert ("bar", 32);
 * assert (x ["foo"] == 12 && x ["bar"] == 32);
 * ==========
 */
pub class @final HashMap {K, V of dmut Z, class Z} {

    /**
     * Assertion to avoid tones of error printing, if the key is not usable
     */
    cte assert (__pragma!compile ({hash!K;}) || __pragma!compile ({hash(K::init);}), "unusable key type : K = (" ~ K ~ ") must be hashable");
    
    let dmut _data : [dmut &MapNode!{K, dmut V}] = [];
    
    let mut _loaded : usize = 0us;

    let mut _size : usize = 0us;

    let _load_factor = 75us;

    let _min_load_factor = 50us; 

    /// Allocated only once, to optimize memory usage
    let dmut _empty : dmut &MapNode!{K, dmut V} = Empty!{K, dmut V}::new ();

    /**
     * Create a new empty hash map, with a default loaded factor of 0.75 , and a minimum load factor or 0.5
     * Does not allocate memory until first insertion
     * <br> 
     * @info: 
     * load factors are used to detemine the size of the allocation: 
     *    - default load factor, increase the size of the allocation when more than 75% of the allocation is used
     *    - minimum load factor, decrease the size of the allocation when less than 50% of the allocation is used
     * When loads are too low, the linked list at every index will increase in size and find and insert time will increase
     * When loads are too high, the allocation will be too big and memory wasted
     * @params:
     *    - len: the size of the table reserved to avoid reallocation when inserting
     */
    pub self (len : usize = 0us) {
        if (len != 0us) {
            let dmut aux = core::duplication::allocArray!{&MapNode!{K, dmut V}} (len);

            for i in 0us .. aux.len {
                aux [i] = alias self._empty;
            }
            
            self._data = alias aux;
        }
    }

    
    /**
     * Insert a new element inside the map
     * If the key is already found (hash (key)), then the value is updated
     * @params: 
     *    - key: the key 
     *    - val: the value
     * @complexity: O (1 + n/k + z) with n the number of possible collision, and k the number of keys, and z the time taken by resizing if the load is higher than the load factor, in average n/k and z are negligeable
     * @example: 
     * ==========
     * let dmut x = HashMap!{[c32], dmut &A}::new ();
     * x:.insert ("foo", A::new (12));
     * x:.insert ("bar", A::new (32));
     *
     * println (x); // {bar=>main::A(32), foo=>main::A(12)}
     * ==========
     */
    pub def insert (mut self, key : K, dmut val : V) -> void {        
        if (self._data.len == 0us) { self:.grow (); }
        else if ((self._loaded * 100us) / (self._data.len) > self._load_factor) { self:.grow (); }        
        let h = cast!usize (hash (key)); 
        self:.insertFast (h, key, alias val);
    }

    /**
     * Change the size of the allocation
     * @params:
     *    - len: the size of the allocated array (number of allocated linked list)
     * @complexity: O (n) where n is the number of element in the HashMap
     */
    pub def fit (mut self, len : usize) {
        if (len != 0us) {
            let dmut aux = core::duplication::allocArray!{&MapNode!{K, dmut V}} (len);
            // Filling the data with empty elements, to be usable, allocArray is not safe!?
            for i in 0us .. aux.len {
                aux [i] = alias self._empty;
            }
            
            // Clear the map
            let dmut old = alias self._data;
            self._data = alias aux;
            self._loaded = 0us;
            self._size = 0us;

            // Add all the old values 
            for i in 0us .. old.len {
                let dmut current = alias old [i];
                loop {
                    match ref current {
                        dmut x : &MapValue!{K, dmut V} => {
                            self:.insertFast (x.h, x.key, alias x.val);
                            current = alias x.next;
                        }
                        _ => {
                            break {}
                        }
                    }
                }
            }            
        }
    } 

    /**
     * Find the element whose key is `key`
     * @params: 
     *    - key: the key to find
     * @returns: The value in an option, or an empty option if there is no element with key `key` in the map
     * @example:
     * ===
     * let dmut x = A::new (42);
     * let dmut m = HashMap!{i32, dmut &A}::new ();
     *
     * m:.insert (12, A::new (10)); 
     * m:.insert (24, alias x); // the insertion must use a mutable version of the value
     *
     * let r = m.find (12); // retreive mutable the associated value 
     * match r {
     *     Ok (z : _) => { println (z.i); } 
     *     Err () => { } 
     * }
     * ===
     * @complexity: O (1 + n/k), with n the number of possible collision and k the number of keys, in average n/k are negligeable
     */
    pub def find (self, key : K) -> const V?
    {
        if (self._data.len != 0us) {
            let h = cast!usize (hash (key));
            match (self._data [h % self._data.len]) {
                x : &MapValue!{K, dmut V} => {                  
                    return x.find (h, key);
                } 
            }
        } 

        return (V?)::__err__;
    }

    /**
     * Find the element whose key is `key`
     * @params: 
     *    - key: the key to find
     * @returns: The value in a dmut option, or an empty option if there is no element with key `key` in the map
     * @example:
     * ===
     * let dmut x = A::new (42);
     * let dmut m = HashMap!{i32, dmut &A}::new ();
     *
     * m:.insert (12, A::new (10)); 
     * m:.insert (24, alias x); // the insertion must use a mutable version of the value
     *
     * let dmut r = m:.find (12); // retreive mutable the associated value 
     * match ref r {
     *     Ok (dmut z : _) => { z.i = 98; } // if found we can modify it
     *     Err () => { } // no value found
     * }
     * ===
     * @complexity: O (1 + n/k), with n the number of possible collision and k the number of keys, in average n/k are negligeable
     */
    pub def find (mut self, key : K) -> dmut V?
    {
        if (self._data.len != 0us) {
            let h = cast!usize (hash (key));
            match ref (self._data [h % self._data.len]) {
                dmut x : &MapValue!{K, dmut V} => {                  
                    return alias x:.find (h, key);
                } 
            }
        }

        return (dmut (V?))::__err__;
    }

    
    /**
     * Search the key in the map, 
     * @returns: true if found, false otherwise
     * @example: 
     * =============
     * let dmut x = HashMap!{[c32], dmut &A}::new ();
     * x:.insert ("foo", A::new (123));
     * assert ("foo" in x);
     * =============
     * @complexity: O (1 + n/k), with n the number of possible collision and k the number of keys, in average n/k are negligeable
     */
    pub def opContains (self, key: K) -> bool {
        if (self._data.len != 0us) {
            let h = cast!usize (hash (key));        
            match (self._data [h % self._data.len]) {
                x : &MapValue!{K, dmut V} => {
                    return x.opContains (h, key);
                }
            }
        }
        false
    }     
    
    /**
     * Remove the key in the map
     * If the key was not present, do nothing
     * @params: 
     *    - key: the key to remove
     * @example: 
     * ===========
     * let dmut x = HashMap!{[c32], i32}::new ();
     * x:.insert ("foo", 12);
     * x:.remove ("foo");
     * 
     * x:.remove ("bar"); // does nothing
     * ===========
     * @complexity: O (1 + n/k + z) with n the number of possible collision, and k the number of keys, and z the time taken by resizing if the load is lower than the min load factor, in average n/k and z are negligeable
     */
    pub def remove (mut self, key : K) -> void {
        if (self._data.len != 0us) {
            let h = cast!usize (hash (key));
            match ref (self._data [h % self._data.len]) {
                dmut x : &MapValue!{K, dmut V} => {
                    let mut removed = false;
                    
                    self._data [h % self._data.len] = alias x:.remove (h, key, ref removed);
                    match ref (self._data [h % self._data.len]) {
                        _ : &Empty!{K, dmut V} => {
                            self._loaded -= 1us;
                        }
                    }
                    
                    if (removed) {
                        self._size -= 1us;                    
                    }
                }
            }
            
            if ((self._loaded * 100us) / (self._data.len) < self._min_load_factor) { self:.shrink (); }
        }
    }

    /**
     * Simply do a find, this is just for syntax enhancing
     * @example: 
     * =============
     * class A {
     *    pub let mut i : i32;
     *    pub self (i : i32) with i = i {}
     *    impl Streamable;
     * }
     *
     * let dmut x = HashMap!{[c32], dmut &A}::new ();
     *
     * x:.insert ("foo", A::new (123));
     * let z = x["foo"];
     *
     * assert (z.i == 123);
     * =============
     * @complexity: O (1 + n/k + z) with n the number of possible collision, and k the number of keys, and z the time taken by resizing if the load is higher than the load factor, in average n/k and z are negligeable
     */
    pub def opIndex (self, k : K) -> const V
        throws &OutOfArray
    {
        match self.find (k) {
            Ok (v:_) => { return v; }
            _ => throw OutOfArray::new ();            
        }
    }

    /**
     * Simply do a find, this is just for syntax enhancing
     * @example: 
     * =============
     * class A {
     *    pub let mut i : i32;
     *    pub self (i : i32) with i = i {}
     *    impl Streamable;
     * }
     *
     * let dmut x = HashMap!{[c32], dmut &A}::new ();
     *
     * x:.insert ("foo", A::new (123));
     * let dmut z = (alias x)["foo"];
     *
     * assert (z.i == 123);
     * =============
     * @complexity: O (1 + n/k + z) with n the number of possible collision, and k the number of keys, and z the time taken by resizing if the load is higher than the load factor, in average n/k and z are negligeable
     */
    pub def opIndex (mut self, k : K) -> dmut V
        throws &OutOfArray
    {
        let dmut r = alias self:.find (k);
        match ref r {
            Ok (dmut v : _) => { return alias v; }
            _ => throw OutOfArray::new ();            
        }
    }
    
    /**
     * Insert or update the value associated to the key `k`
     * @params: 
     *    - k: the key to insert
     *    - v: the value to associate to the key k
     * 
     * @example: 
     * =============
     * class A {
     *    pub let mut i : i32;
     *    pub self (i : i32) with i = i {}
     *    impl Streamable;
     * }
     *
     * let mut z = A::new (345);
     * 
     * let dmut x = HashMap!{[c32], dmut &A}::new ();
     * (alias x)["foo"] = A::new (123);
     * (alias x)["foo"] = alias z;
     * =============
     * @complexity: O (1 + n/k + z) with n the number of possible collision, and k the number of keys, and z the time taken by resizing if the load is higher than the load factor, in average n/k and z are negligeable
     */
    pub def opIndexAssign (mut self, k : K, dmut v : V) {
        self:.insert (k, alias v);
    }

    /**
     * Remove all the entries contained in the map
     * @example: 
     * =============
     * let dmut x = HashMap!{[c32], dmut &A}::new ();
     *
     * x:.insert ("foo", 34);
     * x:.insert ("bar", 45);
     * x:.clear ();
     *
     * assert (x.isEmpty ());
     * =============
     * @complexity: O (1)
     */
    pub def clear (mut self) {
        self._data = [];
        self._loaded = 0us;
        self._size = 0us;
    }    

    /**
     * The number of element contained in the map
     * @example: 
     * ==========
     * let dmut x = HashMap!([c32], i32)::new ()
     * x:.insert ("foo", 34);
     * x:.insert ("bar", 45);
     * assert (x.len () == 2us);
     * ==========
     */
    pub def len (self) -> usize {
        self._size
    }

    /**
     * Iteration over the map can be done with map iterators
     * This iterators implement the ymir interface for iteration with one or two variable (next, get!0, get!1)
     * @example: 
     * ============
     * let dmut x = HashMap!([c32], i32)::new ();
     * x:.insert ("foo", 12);
     * x:.insert ("bar", 12);
     * for k, v in x {
     *     println (k, " ", v);
     * }
     * 
     * for k in x {
     *     println (k);
     * }
     * ============
     * @return: an iterator on the beginning of the map
     */
    pub def begin (self) -> dmut &MapIterator!{K, dmut V} {
        if (self._loaded != 0us) {
            for i in 0us .. self._data.len {
                match self._data [i] {
                    _ : &MapValue!{K, dmut V} =>
                        return MapIterator!{K, dmut V}::new (i, 0us, self._data, self._data [i]);
                }
            }
        }
        MapIterator!{K, dmut V}::new (0us, 0us, [], self._empty)
    } 

    /**
     * @returns: the iterator pointing to the end of the map
     */
    pub def end (self) -> &MapIterator!{K, dmut V} {
        MapIterator!{K, dmut V}::new (0us, 0us, [], self._empty)
    }
    
    
    /**
     * Insert an element in the hash map, without making the table grow
     * @assume: the table is able to contain the value to insert
     * @params:
     *    - h: the hash value of the key (== hash (key))
     *    - key: the key 
     *    - val: the value
     */
    prv def insertFast (mut self, h : usize, key : K, dmut val : V) {
        let mut inserted = false;
        match ref (self._data [h % self._data.len]) {
            dmut x : &MapValue!{K, dmut V} => {
                inserted = x:.insert (h, key, alias val);
            }
            _  => {
                self._data [h % self._data.len] = MapValue!{K, dmut V}::new (h, key, alias val, alias self._empty);
                self._loaded += 1us;
                inserted = true;
            }
        }
        if (inserted) {
            self._size += 1us;
        }
    }


    /**
     * Make the table containing the values shrink
     * @complexity: O (n + m), with n the new size, and m the number of element contained in the old table that are reinserted
     */
    prv def shrink (mut self) -> void {
        if (self._loaded == 0us) {
            self._data = []; return {}
        }
        
        let n_len = self._data.len / 2us;
        let dmut aux = core::duplication::allocArray!{&MapNode!{K, dmut V}} (n_len);

        for i in 0us .. aux.len {
            aux [i] = alias self._empty;
        }

        let dmut old = alias self._data;
        self._data = alias aux;
        self._loaded = 0us;
        self._size = 0us;

        for i in 0us .. old.len {
            let dmut current = alias old [i];
            loop {
                match ref current {
                    dmut x : &MapValue!{K, dmut V} => {
                        self:.insertFast (x.h, x.key, alias x.val);
                        current = alias x.next;
                    }
                    _ => {
                        break {}
                    }
                }
            }
        }
    }

    /**
     * Make the table containing the values grow
     * This function is called when the _load_factor is reached
     * If the table was empty it is allocated with a size of MapConst::DEFAULT_ALLOC_SIZE,
     * otherwise the size is mutliplied by 2
     * @complexity: O (n + m), with n the new size, and m the number of element contained in the old table that are reinserted
     */
    prv def grow (mut self) -> void {
        if (self._data.len == 0us) {
            self._data = core::duplication::allocArray!{&MapNode!{K, dmut V}} (MapConst::DEFAULT_ALLOC_SIZE);
            for i in 0us .. self._data.len {
                self._data [i] = alias self._empty;
            }
        } else {
            let n_len = self._data.len * 2us;
            let dmut aux = core::duplication::allocArray!{&MapNode!{K, dmut V}} (n_len);
            // Filling the data with empty elements, to be usable, allocArray is not safe!?
            for i in 0us .. aux.len {
                aux [i] = alias self._empty;
            }
            
            // Clear the map
            let dmut old = alias self._data;
            self._data = alias aux;
            self._loaded = 0us;
            self._size = 0us;

            // Add all the old values 
            for i in 0us .. old.len {
                let dmut current = alias old [i];
                loop {
                    match ref current {
                        dmut x : &MapValue!{K, dmut V} => {
                            self:.insertFast (x.h, x.key, alias x.val);
                            current = alias x.next;
                        }
                        _ => {
                            break {}
                        }
                    }
                }
            }            
        }
    }

    impl std::stream::Streamable {

        pub over toStream (self, dmut stream : &StringStream) {
            stream:.write ('{'c8);
            let mut i = 0us;
            for node in self._data {
                match node {
                    _ : &MapValue!{K, dmut V} => {
                        if (i != 0us) { stream:.write (", "s8); }
                        stream:.write (node);
                        i = 1us;
                    }
                }
            }
            stream:.write ('}'c8);
        }
    }


    cte if is!V {U impl Copiable} {
        impl core::duplication::Copiable {

            /**
             * Hash map are copiable
             * Because internal values of hash map are immutable, they are not copied
             * The copy is only applied on the structure of the map
             * @example: 
             * ==========
             * let dmut a = [1, 2, 3];
             * let x = hmap#{"foo" => a};
             * 
             * let dmut y = dcopy x;
             * y:.insert ("bar", a);
             * 
             * a [0] = 89;
             * println (x); // {foo=>[89, 2, 3]}
             * println (y); // {bar=>[2, 3, 4], foo=>[89, 2, 3]}
             * ==========
             * @complexity: O(n), with n the number of elements in the map
             */
            pub over deepCopy (self) -> dmut &(Object) {
                let dmut res = HashMap!{K, dmut V}::new (len-> self._data.len);
                
                // Add all the values 
                for i in 0us .. self._data.len {
                    let mut current = self._data [i];
                    loop {
                        match current {
                            x : &MapValue!{K, dmut V} => {
                                res:.insertFast (x.h, x.key, dcopy x.val); // Insert fast, the array is already able of inserting things
                                current = x.next;
                            }
                            _ => {
                                break {}
                            }
                        }
                    }
                }
                
                alias cast!{&Object} (res)
            }
            
        }
    }
    
    
}

/**
 * The structure of the content of a hashmap is an array of simple linked list
 * The following class is the ancestor of the class that are used in the map to encode this linked list
 */    
class @abstract MapNode {K, V of dmut Z, class Z} {
    prot self () {}
    
    pub def opEquals (self, _ : &MapNode!{K, dmut V})-> bool;
    
    impl Streamable;
}

/**
 * The map value encode a node in the linked list that contains a value
 * It has a successor, and thus cannot be the final node of a linked list
 * @example: 
 * ==========
 * let list = MapValue!(i32, i32)::new (hash (12), 12, 42, 
 *                                      MapValue!(i32, i32)::new (hash (23), 23, 89, 
 *                                                                Empty!(i32, i32)::new ()
 *                                      )
 *            );
 * 
 * ==========
 */
class @final MapValue {K, V of dmut Z, class Z} over MapNode!{K, dmut V} {

    /// The following node in the list
    pub let dmut next : &MapNode!{K, dmut V};

    /// The result of hash (key), used to compare two MapValues (and avoid recomputing the value each time)
    pub let h : usize;

    /// The actual key stored in the node
    pub let key : K;

    /// The value associated with the key (it is mutable, because we can update it when inserting)
    pub let dmut val : V;

    /**
     * @params:
     *    - h: the result of hash (key), to avoid recomputation
     *    - key: the key stored in the node
     *    - val: the value stored in the node
     *    - next: the reference to the next node in the list (empty or value)
     */
    pub self (h : usize, key : K, dmut val : V, dmut next : &MapNode!{K, dmut V})
        with next = alias next,
             key = key,
             val = alias val,
             h = h
    {}

    impl Streamable {
        

        pub over toStream (self, dmut stream : &StringStream) {
            cte if (__pragma!compile ({ stream:.write (self.key); })) {
                stream:.write (self.key):.write ("=>"s8);
            } else { stream:.write (K::typeid):.write ("=>"s8); }
            
            cte if (__pragma!compile ({ stream:.write (self.val); })) {
                stream:.write (self.val);
            } else { stream:.write (V::typeid); }
            
            match self.next {
                _ : &Empty!{K, dmut V} => {}
                _ => { stream:.write (", "s8):.write (self.next); }
            }
        }
    }

    /**
     * Insert a new element in the list, or replace an element if there is already a node whose hash value is equals to h
     * @params:
     *    - h: the hash of the key to insert
     *    - key: the key to insert
     *    - val: the value associated to the key
     * @returns: true if a new node has been allocated, false otherwise
     */
    pub def insert (mut self, h : usize, key : K, dmut val : V) -> bool {
        cte assert (__pragma!compile ({self.key == key;}), "unusable key type : (" ~ K ~ ") must be be comparable to itself (opEquals or opCmp)");
        
        if (self.key == key) {
            self.val = alias val;
        } else {
            match ref self.next {
                dmut x : &MapValue!{K, dmut V} => {
                    return x:.insert (h, key, alias val);
                }
                _ => {
                    self.next = MapValue::new (h, key, alias val, alias self.next);
                    return true;
                }
            }
        }
        false
    }

    /**
     * Find the value associated with the key whose hash is h
     * @params: 
     *    - h: the hash of the key
     * @returns: the value in an option type, or None if there is no node containing a hash equal to h
     * @complexity: O (n), with n the length of the list
     */
    pub def find (self, h : usize, key : K) -> const V? {
        cte assert (__pragma!compile ({self.key == key;}), "unusable key type : (" ~ K ~ ") must be be comparable to itself (opEquals or opCmp)");
        
        if (self.key == key) {
            (self.val)?
        } else {
            match (self.next) {
                x : &MapValue!{K, dmut V} => {
                    return x.find (h, key);
                }
            }
            
            (V?)::__err__
        }
    }


    /**
     * Find the value associated with the key whose hash is h
     * @params: 
     *    - h: the hash of the key
     * @returns: the value in an option type, or None if there is no node containing a hash equal to h
     * @complexity: O (n), with n the length of the list
     */
    pub def find (mut self, h : usize, key : K) -> dmut V? {
        cte assert (__pragma!compile ({self.key == key;}), "unusable key type : (" ~ K ~ ") must be be comparable to itself (opEquals or opCmp)");
        
        if (self.key == key) {
            return alias (self.val)?;
        } else {
            match ref (self.next) {
                dmut x : &MapValue!{K, dmut V} => {
                    return alias x:.find (h, key);
                }
            }
            
            return (dmut V?)::__err__;
        }
    }
    
    
    /**
     * Remove the key inside the list, if there is no node containing the value, just return the list as it was
     * @info: the returned list is not a copy, no allocation are made
     * @complexity: O (n), with n the length of the list
     * @returns: 
     *    - rm: true if a node has been removed, false otherwise
     *    - the list, with no node containing the hash h,
     * ===========
     */
    pub def remove (mut self, h : usize, key : K, ref mut rm : bool) -> dmut &MapNode!{K, dmut V} {
        cte assert (__pragma!compile ({self.key == key;}), "unusable key type : (" ~ K ~ ") must be be comparable to itself (opEquals or opCmp)");
        
        if (self.key == key) {
            rm = true;
            return alias self.next;
        } else {
            match ref self.next {
                dmut x : &MapValue!{K, dmut V} => {
                    self.next = alias x:.remove (h, key, ref rm);
                }
            }
            return alias self;
        }
    }

    /**
     * Search the linked list for a node whose contained hash is h
     * @returns: true, if such a node was found, false otherwise
     * @complexity: O (n), with n the length of the list
     */
    pub def opContains (self, h : usize, key : K) -> bool {
        cte assert (__pragma!compile ({self.key == key;}), "unusable key type : (" ~ K ~ ") must be be comparable to itself (opEquals or opCmp)");
        
        if (self.key == key) {
            true
        } else {
            match self.next {
                x : &MapValue!{K, dmut V} => {
                    return x.opContains (h, key);
                }
            }
            false
        }  
    }

    /**
     * Compare two nodes
     * They are equals, if their h is equals
     */
    pub over opEquals (self, o : &MapNode!{K, dmut V})-> bool {
        match o {
            x : &MapValue!{K, dmut V} =>
                return x.h == self.h;
        }
        return false;
    }
    
}

/**
 * An empty node encode the end of a list in a hash map
 * They store no values
 */
class @final Empty {K, V of dmut Z, class Z} over MapNode!{K, dmut V} {
    pub self () {}

    impl Streamable {
        /**
         * Does nothing
         */
        pub over toStream (self, dmut _ : &StringStream) {}
    }

    /**
     * Compare two nodes
     * Empty is equals to other empty nodes
     */
    pub over opEquals (self, o : &MapNode!{K, dmut V})-> bool {
        match o {
            _ : &Empty!{K, dmut V} =>
                return true;
        }
        return false;
    }
}

/**
 * The map iterator class is used to traverse a map
 * It can be acquired in a hash map with the methods begin (), and end ()
 * @example: 
 * =============
 * let dmut x = HashMap!([c32], i32)::new ();
 * x:.insert ("foo", 12);
 * let dmut beg_it = alias x.begin (); 
 * assert (beg_it.get!0 == "foo");
 * assert (beg_it.get!1 == 12);
 * 
 * beg_it:.next (); // next iteration
 * assert (beg_it == x.end ()); 
 * =============
 */
class @final MapIterator {K, V of dmut Z, class Z} {

    /// A reference on the table contained in the map we are traversing
    prv let mut _data : [&MapNode!{K, dmut V}];

    /// The current index of the iterator, in the table
    prv let mut _index : usize;

    /// The current index in the current branch (linked list of MapValues)
    prv let mut _branch : usize = 0us;

    /// The reference on node containing the value we are pointing at
    prv let mut _currentNode : &MapNode!{K, dmut V};

    /**
     * An iterator is always constructed to point somewhere, or must point to (0, 0, [], empty)
     * @params: 
     *    - i: the index in the table of this iterator
     *    - branch: the index in the branch at iterator i
     *    - data: the table of data
     *    - current: the current traversed node in the branch (data [i][branch])
     */
    pub self (i : usize, branch : usize, data : [&MapNode!{K, dmut V}], current : &MapNode!{K, dmut V})
        with _data = data,
             _index = i,
             _branch = branch,
             _currentNode = current
    {}        

    /**
     * Two iterators are equals, if the current nodes are equals
     */
    pub def opEquals (self, o : &MapIterator!{K, dmut V}) -> bool {
        self._currentNode == o._currentNode
    }

    /**
     * @returns: 
     * =======
     * the key of the current node, in an option type
     * None, it the current node is empty
     * =======     
     */
    pub def get {0} (self) -> K {
        match (self._currentNode) {
            x : &MapValue!{K, dmut V} =>
                return x.key;
        }
        
        __pragma!panic ();
    }

    /**
     * @returns: 
     * =======
     * the value of the current node, in an option type
     * None, it the current node is empty
     * =======     
     */
    pub def get {1} (self) -> const V {
        match (self._currentNode) {
            x : &MapValue!{K, dmut V} =>
                return x.val;
        }
        
        __pragma!panic ();
    }

    /**
     * Create a new iterator that point to the next value contained in the map
     * If there is no more value, the returned iterator is equals to map.end ()
     * @example: 
     * ===========
     * let dmut x = HashMap!([c32], i32)::new ();
     * x:.insert ("foo", 12);
     * x:.insert ("bar", 12);
     * let dmut it = alias x.begin ();
     * let end = x.end (); // put in a var to avoid multiple useless calls and allocations
     * while (it != end) {
     *    println (it.get!0, " ", it.get!1);
     *    it:.next ();
     * }
     * ===========
     */
    pub def next (mut self) -> void {
        match (self._currentNode) {
            x : &MapValue!{K, dmut V} => {
                match (x.next) {
                    _ : &MapValue!{K, dmut V} => {
                        self._branch += 1us;
                        self._currentNode = x.next;
                        return {}
                    }
                }
            }
        }            

        if (self._index + 1us < self._data.len) {
            for j in (self._index + 1us).. self._data.len {
                match (self._data [j]) {
                    _ : &MapValue!{K, dmut V} => {
                        self._branch = 0us;
                        self._index = j;
                        self._currentNode = self._data [j];
                        return {};
                    }
                }
            }
        }

        self._data = [];
        self._currentNode = Empty!{K, dmut V}::new ();
        self._index = 0us;
        self._branch = 0us;
    }
    
}
