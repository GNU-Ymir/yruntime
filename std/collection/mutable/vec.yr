/**
 * Module implementing a continious growable array type, that can store mutable intances of class.
 * <br>
 * Publically imported from `std::collection::vec`.
 * <br>
 * @Authors: Emile Cadorel
 * @License: GPLv3
 */

mod std::collection::mutable::vec;

import core::typeinfo;
import core::duplication;
import core::exception;
import core::array, core::object;

import std::collection::seq;
import std::io, std::stream;
import std::hash, std::traits;

import std::collection::vec;

/**
 * Some constants for the vec implementation
 */
prv enum : usize
| DEFAULT_ALLOC_SIZE = 10us // The size that is allocated after the first push
 -> VecConst;

/**
 * Vec is a growable array stored in continuous memory.
 * It stores immutable values, but is itself mutable
 * @templates: 
 *    - T: the type of the values stored in the vector
 * @example: 
 * ===========================
 * let dmut x = Vec!{dmut &A}::new ();
 * x:.push (A::new (1));
 * x:.push (A::new (2));
 * x:.push (A::new (3));
 * 
 * assert (x[] == [A::new (1), A::new (2), A::new (3)]);
 * ===========================
 * @info:
 * This mutable implementation of Vec implements `core::duplication::Copiable` iif the inner element `Z` also implement `core::duplication::Copiable`.
 * <br>
 * It also implements the operator `==` iif class `Z` is comparable.
 */
@final
pub class Vec {T of dmut Z, class Z} {

    let dmut _data : [T] = [];
    
    let mut _len : usize = 0us;

    prv self (dmut data : [T], len : usize)
        with _data = alias data, _len = len
    {}
    
    /**
     * Create an empty vector
     * The vector does not allocate until push
     * @example: 
     * =================
     * let x = Vec!{dmut &A}::new ();
     * 
     * assert (x.capacity () == 0us);
     * =================
     */
    pub self () {}

    /**
     * Append an element at the end of the vector
     * @params: 
     *    - val: the element to append
     * @example: 
     * ===============
     * let dmut x = Vec!{dmut &A}::new ();
     * x:.push (A::new (1));
     * x:.push (A::new (1));
     * ===============
     * @complexity: O (n), with n = self._len when reallocation is necessary, but O(1) in average when the capacity of the vector is big enough.
     */    
    pub def push (mut self, dmut val : T) -> void {
        if (self._data.len == self._len) {
            self:.grow ();
        }
        
        self._data [self._len] = alias val;
        self._len += 1us;
    }

    /**
     * Remove the last element of the vector, and returns it
     * @throws: 
     *    - OutOfArray: if the vector is empty
     * @example: 
     * ======================
     * let dmut x = Vec!{dmut &A}::new ();
     * 
     * x:.push (A::new (1));
     * assert (x:.pop () == A::new (1));
     * ======================
     * @complexity: O (n), with n = self._len when reallocation is necessary, but O(1) in average when the vector does not need fit to avoid memory waste.
     */
    pub def pop (mut self) -> dmut T
        throws &OutOfArray
    {
        if (self._len == 0us) {
            throw OutOfArray::new ();
        }
        
        self._len -= 1us;
        let dmut ret = alias self._data [self._len];
        if (self._len < self._data.len / 2us)
            self:.fit ();
        return alias ret;
    }



    /**
     * Remove the last element of the vector, and returns it
     * @throws: 
     *    - OutOfArray: if the vector is empty
     * @example: 
     * ======================
     * let dmut x = Vec!{dmut &A}::new ();
     * 
     * for i in 0u64 .. 100u64 {
     *     x:.push (A::new (1));
     * }
     * x:.pop (10u64); 
     * assert (x.len () == 90us);
     * ======================
     * @complexity: O (n), with n = self._len (in case of shrinking) 0(1) otherwise
     */
    pub def pop (mut self, nb : u64) 
    {
        if (self._len > cast!usize (nb)) self._len -= cast!usize (nb);
        else self._len = 0us;
        
        if (self._len < self._data.len / 2us)
            self:.fit ();
    }

    /**
     * Remove the element at the i_em position
     * @example: 
     * ======================
     * let dmut x = Vec!{dmut &A}::new ();
     * 
     * for i in 0 .. 5 {
     *     x:.push (A::new (i));
     * }
     * 
     * x:.remove (2u64); 
     * assert (x[] == [A::new (0), A::new (1), A::new (3), A::new (4)]);
     * ======================
     * @complexity: O (n), with n = self._len, but O (n - i) in average, as shifting is necessary for every elements after `i`.
     */
    pub def remove (mut self, i : u64)
    {
        if (self._len <= cast!usize (i)) return {}
        for j in cast!usize (i) .. self._len {
            self._data [j] = alias self._data [j + 1us];
        }
        
        self._len -= 1us;
        
        if (self._len < self._data.len / 2us)
            self:.fit ();
    }
    
    /**
     * Change the capacity of the vector to the number of element it stores
     * @example: 
     * ==============
     * let dmut x = Vec!{dmut &A}::new ();
     * for i in 0 ... 4 {
     *     x:.push (A::new (i));
     * }
     * println (x.capacity ()); // 10
     * 
     * x:.fit ();
     * assert (x.capacity () == 5us); 
     * assert (x == [A::new (0), A::new (1), A::new (2), A::new (3), A::new (4)]);
     * ==============
     * @complexity: O (n), with n = self._len
     */
    pub def fit (mut self) {
        let dmut aux : [T] = alias core::duplication::allocArray!{dmut T} (self._len);
        core::duplication::memCopy!{dmut T} (self._data, alias aux);
        self._data = alias aux;
    }

    /**
     * Pre allocate some memory space for the vector
     * Does nothing if the capacity is already higher than the requested size
     * @example: 
     * =============
     * let dmut x = Vec!{dmut &A}::new ();
     * x:.reserve (1000);
     * let mut old_cap_x = x.capacity ();
     * for i in 0 .. 1000 {
     *    x:.push (A::new (i));
     *    if (old_cap != x.capacity ())  {
     *       println ("X grew"); // will never print
     *       old_cap_x = x.capacity ();
     *    } 
     * }
     * =============
     * @complexity: O (n), with n = self._len
     */
    pub def reserve (mut self, size : usize) {
        if (self._data.len >= size) return {}
        let dmut aux : [T] = core::duplication::allocArray!{T} (size);
        core::duplication::memCopy!{dmut T} (self._data, alias aux);
        self._data = alias aux;
    }

    /**
     * Remove all element inside the array
     * @example: 
     * =============
     * let dmut x = Vec!{dmut &A}::new ();
     * for i in 0 .. 1_000 {
     *     x:.push (A::new (i));
     * }
     * 
     * x:.clear ();
     * assert (x == []);
     * assert (x.capacity () == 0us);
     * =============
     * @complexity: O (1)
     */
    pub def clear (mut self) {
        self._len = 0us;
        self._data = [];
    }


    /**
     * This block is activated only if T is a comparable type with itself
     */
    cte if ((__pragma!operator ("==", T, T))) {

        /**
         * Compare two vectors of same type
         * @example: 
         * ============
         * let x = Vec!{dmut &A}::new ();
         * let y = Vec!{dmut &A}::new ();
         * let z = Vec!{dmut &A}::new ();
         * x:.push (A::new (12));
         * y:.push (A::new (12));
         * z:.push (A::new (42));
         * 
         * assert (x == y);
         * assert (x != z);
         * ============
         * @complexity: O (self.len ())
         */
        pub def opEquals (self, o : &Vec!{dmut T}) -> bool {
            if (self._len != o._len) return false;
            for i in 0us .. self._len {
                if (self._data [i] != o._data [i]) return false;
            }
            return true;
        }

        /**
         * Compare a vector and an array of same inner type
         * @example: 
         * ============
         * let x = Vec!{dmut &A}::new ();
         * for i in 0 .. 3 {
         *     x:.push (A::new (i));
         * }
         * 
         * assert (x[] == [A::new (1), A::new (2), A::new (3)]);
         * ============
         * @complexity: O (self.len ())
         */
        pub def opEquals (self, o : [T]) -> bool {
            if (self._len != o.len) return false;
            for i in 0us .. self._len {
                if (self._data [i] != o [i]) return false;                
            }
            return true;            
        }
        
    }    

    /**
     * Get the slice content of the vec 
     * @example: 
     * ==========
     * let dmut x = Vec!{dmut &A}::new ();
     * for i in 0 .. 3 {
     *     x:.push (A::new (i));
     * }
     * assert (x == [A::new (0), A::new (1), A::new (2)]);
     * ==========
     * @complexity: O (1)
     */
    pub def opIndex (self) -> [T] {
        self._data [0us .. self._len]
    }


    /**
     * Get a slice on the content of the vec.
     * @throws:
     *    - &OutOfArray: if the range is bigger than the slice or is invalid (range.fst > range.scd)
     * @example:
     * ===
     * let dmut v = Vec!{dmut &A}::new ();
     * for i in 0 .. 3 {
     *     x:.push (A::new (i));
     * }
     * 
     * assert (x[0us .. 2us] == [A::new (0), A::new (1)]);
     * ===
     * @complexity: O (1)
     */
    pub def opIndex (self, r : ..usize)-> [T] {
        self._data [r.fst .. r.scd]
    }    

    /**
     * Get the slice content of the vec 
     * @example: 
     * ==========
     * let dmut x = Vec!{dmut &A}::new ();
     * for i in 0 .. 3 {
     *     x:.push (A::new (i));
     * }
     * let dmut res = alias ((alias x)[]);
     * assert (res == [A::new (0), A::new (1), A::new (2)]);
     * ==========
     * @complexity: O (1)
     */
    pub def opIndex (mut self) -> dmut [T] {
        alias self._data [0us .. self._len]
    }


    /**
     * Get a slice on the content of the vec.
     * @example:
     * ===
     * let dmut v = Vec!{dmut &A}::new ();
     * for i in 0 .. 3 {
     *     x:.push (A::new (i));
     * }
     * 
     * assert (x[0us .. 2us] == [A::new (0), A::new (1)]);
     * ===
     * @complexity: O (1)
     */
    pub def opIndex (mut self, r : ..usize)-> dmut [T] {
        alias self._data [r.fst .. r.scd]
    }    
    
    /**
     * Change the value in the vec at a given index
     * @params:
     *    - i: the index
     * @example: 
     * ===========
     * let dmut x = Vec!{dmut &A}::new ();
     * x:.push (A::new (12));
     * {
     *    (alias x)[0] = A::new (78);
     *    assert (x [0] == A::new (78));
     * } catch {
     *   _: &AssertError => {}
     * }
     * ===========
     * @complexity: O (1)
     */
    pub def if (isIntegral!{I}()) opIndexAssign {I} (mut self, i : I, dmut val : T) {
        self._data [i] = alias val;
    }
    
    /**
     * @return: the number of element the vector can store without reallocation
     */
    pub def capacity (self) -> usize {
        self._data.len
    }


    /**
     * @returns: an iterator to the beginning of the vector
     * @example: 
     * ==========
     * let x = vec#[1, 2, 3];
     * for i in x {
     *     println (i);
     * }
     * ==========
     */
    pub def begin (self)-> dmut &VecIterator!{T} {
        return VecIterator::new (0us, self._len, self._data);
    }

    /**
     * @returns: an iterator to the end of the vector
     * @example: 
     * ==========
     * let x = vec#[1, 2, 3];
     * for i in x {
     *     println (i);
     * }
     * ==========
     */
    pub def end (self) -> &VecIterator!{T} {
        return VecIterator::new (self._len, self._len, self._data);
    }


    /**
     * Access value in the vec by index
     * @params: 
     *    - i: the index
     * @complexity: O (1)
     * @example : 
     * ================
     * let dmut x = Vec!{dmut &A}::new ();
     * x:.push (A::new (value-> 12));
     *
     * (alias x)[0].value = 87;
     * assert (x[0].value == 87);
     * ================
     * @complexity: O (1)
     */
    pub def if (isIntegral!{I} ()) opIndex {I} (mut self, i : I) -> dmut T {
        return alias self._data [i];
    }

    /**
     * Access value in the vec by index
     * @params: 
     *    - i: the index
     * @complexity: O (1)
     * @example : 
     * ================
     * let dmut x = Vec!{dmut &A}::new ();
     * x:.push (A::new (value-> 12));
     *
     * (alias x)[0us].value = 87;
     * assert (x[0us].value == 87);
     * ================
     * @complexity: O (1)
     */
    pub def  opIndex (mut self, i : usize) -> dmut T {
        return alias self._data [i];
    }

    /**
     * Access value in the vec by index
     * @params: 
     *    - i: the index
     * @complexity: O (1)
     * @example : 
     * ================
     * let dmut x = Vec!{dmut &A}::new ();
     * x:.push (A::new (value-> 12));
     * 
     * assert (x[0].value == 12);
     * ================
     * @complexity: O (1)
     */
    pub def if (isIntegral!{I} ()) opIndex {I} (self, i : I) -> T {
        return self._data [i];
    }    

    
    impl std::collection::seq::Seq!{T} {

        /**
         * @returns: the number of element inside the vector
         */
        pub over len (self) -> usize {
            self._len
        }
        
        pub over opIndex (self, i : usize) -> T {
            return self._data [i];
        }

        pub over opDollar (self)-> usize {
            self._len
        }
        
    }
    
    
    impl std::stream::Streamable {
        
        pub over toStream (self, dmut stream : &StringStream) {
            cte if (__pragma!compile ({stream:.write (self._data [0]);})) {
                {
                    stream:.write ("vec["s8);
                    for i in 0us .. self._len {
                        if (i != 0us) { stream:.write (", "s8); }
                        stream:.write (self._data [i]);
                    }
                    stream:.write ("]"s8);                    
                }
            } else {
                stream:.write ("vec["s8):.write (T::typeid):.write (" ; "s8):.write (self._len):.write ("]"s8);
            }
        }
    }


    impl std::hash::Hashable {
        
        pub over hash (self)-> u64 {
            cte if (__pragma!compile ({ hash (self._data [0]); })) {
                let mut hash_value = 0x345678u64;
                let mut mult = 31u64;
                mult;
                {
                    for i in 0us .. self._len {
                        hash_value = (hash_value ^ hash (self._data [i])) * mult;
                        mult += (82520u64 + cast!u64 (self._len * 2us));
                    }
                } 
                
                hash_value
            } else {
                0x345678u64
            }
        }
        
    }
    

    /**
     * Change the size of the capacity to write other elements
     * @complexity: O (n), with n = self._len
     */
    prv def grow (mut self) {
        if (self._data.len == 0us) { // empty
            self._data = alias core::duplication::allocArray!{dmut T} (VecConst::DEFAULT_ALLOC_SIZE);
        }  else {
            let n_len = self._data.len * 2us;
            let dmut aux : [T] = core::duplication::allocArray!{dmut T} (n_len);
            core::duplication::memCopy!{dmut T} (self._data, alias aux);
            self._data = alias aux;
        }                    
    }
            

    cte if is!{T}{U impl Copiable} {
        impl core::duplication::Copiable {
            
            pub over deepCopy (self)-> dmut &Object {
                let dmut aux = alias core::duplication::allocArray!{dmut T} (self._data.len);
                for i in 0us .. self._len {
                    aux [i] = dcopy self._data [i];
                }
                alias cast!{&Object} (Vec!{dmut T}::new (alias aux, self._len))
            }
            
        }
    }
    
    
}
