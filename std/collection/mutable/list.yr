/**
 * This module implements a double linked list container, that can store mutable values.
 * This module is publically inserted from `std::collection::list`.
 * <br>
 * @Authors: Emile Cadorel
 * @License: GPLv3
 * <hr>
 * <br>
 * @example: 
 * ===
import std::io; // for println
import std::collection::list;

class A {
    pub let mut i : i32;
    pub self (i : i32) with i = i {}
    impl Streamable;
}

def main ()
    throws &OutOfArray
{
    // by using the keyword dmut, template specialization is made to select the mutable version of list
    //                  |         otherwise immutable version is always selected
    //                  |
    //                 vvv
    let dmut l = List!{dmut &A}::new ();

    l:.push (A::new (1));
    l:.push (A::new (2));

    let dmut x = A::new (8);
    l:.pushFront (alias x); // the insertion must use a mutable version of the value

    let dmut z = l:.back ();

    match ref z {
        Ok (dmut a : &A) => {
            a.i = 89;
        }
    }

    for i in l {
        println (i); // A(8) A(1) A(89) 
    }

    let dmut f = l:.front ();
    let dmut b = l:.pop ();


    println (l); // {A(8), A(1)}
    println (f); // Ok(A(8)}
    println (b); // A(89)
}
 * ===
 */
mod std::collection::mutable::list;

import core::typeinfo;
import core::duplication;
import core::exception;
import core::array;
import core::object;
import core::dispose;

import std::collection::seq;
import std::io, std::stream, std::hash;


/**
 * A doubly linked list.
 * This class allows to push and pop elements from either end in constant time.
 * <br>
 * This implementation is able to store mutable instances of class.
 */
pub class @final List {T of dmut Z, class Z} {

    let dmut _head : &ListNode!{dmut T} = Empty!{dmut T}::new ();

    let dmut _tail : &ListNode!{dmut T} = Empty!{dmut T}::new ();

    let mut _len : usize = 0us;
    
    /**
     * Create an empty list
     * @example: 
     * ===========
     * let x = List!{dmut &A}::new ();
     * 
     * assert (x.isEmpty ());
     * ===========
     */
    pub self () {}


    prv self (dmut head : &ListNode!{dmut T}, dmut tail : &ListNode!{dmut T}, len : usize)
        with _head = alias head, _tail = alias tail, _len = len
    {}
    
    /**
     * Push an element at the end of the list
     * @params:
     *    - val: the element to append
     * @example: 
     * ============
     * let dmut x = List!{dmut &A}::new ();
     * 
     * x:.push (A::new (1));
     * x:.push (A::new (2));
     * 
     * assert (x.len () == 2);
     * ============
     * @complexity: O (1)
     */
    pub def push (mut self, dmut val : T)-> void {
        match ref self._tail {            
            dmut tail: &ListValue!{dmut T} => {
                let dmut n_node = ListValue!{dmut T}::new (alias val, alias tail, alias tail.next);
                tail.next = alias n_node;
                self._tail = alias n_node;            
            }
            _ => {
                self._head = ListValue!{dmut T}::new (alias val, alias self._tail, alias self._head);
                self._tail = alias self._head;
            }
        }
        self._len += 1us; 
    }
    
    /**
     * Pop the last element of the list and return it
     * @throws: 
     *    - &OutOfArray: if the list is empty
     * @example: 
     * =============
     * let dmut x = List!{dmut &A}::new ();
     * x:.push (A::new (1));
     * {
     *    assert (x:.pop () == A::new (1));
     * } catch (
     *    _ : &OutOfArray => 
     *        println ("List was empty");
     *    _ : &AssertError => 
     *        println ("Last value of list was not A (1)");
     * } 
     * =============
     * @complexity: O (1)
     */
    pub def pop (mut self) -> dmut T
        throws &OutOfArray
    {
        match ref self._tail {
            dmut tail : &ListValue!{dmut T} => {
                let dmut ret = alias tail.value;
                match ref tail.prev {
                    dmut prev : &ListValue!{dmut T} => {
                        prev.next = alias tail.next;
                        self._tail = alias prev;
                    }
                    _ => { // Only one element
                        self._head = alias tail.prev;
                        self._tail = alias self._head;
                    }
                }
                
                self._len -= 1us; 
                return alias ret;
            }
            _ => throw OutOfArray::new ();
        }
    }
    

    /**
     * Push an element at the beginning of the list
     * @params: 
     *    - val: the value to push
     * @example: 
     * ==============
     * let dmut x = List!{dmut &Ai32}::new ();
     * x:.pushFront (A::new (1));
     * assert (x.len () == 1us);
     * ==============
     * @complexity: O (1)
     */    
    pub def pushFront (mut self, dmut val : T) -> void {
        match ref self._head {            
            dmut head: &ListValue!{dmut T} => {
                let dmut n_node = ListValue!{dmut T}::new (alias val, alias head.prev, alias head);
                head.prev = alias n_node;
                self._head = alias n_node;            
            }
            _ => {
                self._head = ListValue!{dmut T}::new (alias val, alias self._tail, alias self._head);
                self._tail = alias self._head;
            }
        }
        self._len += 1us; 
    }

    /**
     * Remove the first element of the list and return it
     * @throws: 
     *    - &OutOfArray: if the list was empty
     * @example: 
     * ============
     * let dmut x = List!{dmut &A}::new ();
     * x:.push (A::new (12));
     * assert (x:.popFront () == A::new (12));
     * ============
     * @complexity: O (1)
     */
    pub def popFront (mut self) -> dmut T
        throws &OutOfArray
    {
        match ref self._head {
            dmut head : &ListValue!{dmut T} => {
                let dmut ret = alias head.value;
                match ref head.next {
                    dmut next : &ListValue!{dmut T} => {
                        next.prev = alias head.prev;
                        self._head = alias next;
                    }
                    _ => { // Only on element
                        self._head = alias head.next;
                        self._tail = alias self._head;
                    }
                }
                
                self._len -= 1us; 
                return alias ret;
            }
            _ => throw OutOfArray::new ();
        }
    }
   

    /**
     * @returns: true if the list is empty
     * @complexity: O (1)
     */
    pub def isEmpty (self) -> bool {
        self._len == 0us
    }

    /**
     * Remove all the elements from the list
     * @complexity: O (1)
     */
    pub def clear (mut self) -> void {
        match ref self._head {
            dmut head : &ListValue!{dmut T} => { // To avoid useless allocations
                self._head = alias head.prev;
                self._tail = alias self._tail;
            }
            _ => {}
        }
    }


    /**
     * @returns: the value of the first element contained in the list, Err() if the list is empty
     * @complexity: O (1)
     */
    pub def front (self) -> (T)? {
        match ref self._head {
            head: &ListValue!{dmut T} => { return (head.value)? }
        }
        return ((T?))::err;
    }

    
    /**
     * @returns: the value of the first element contained in the list, Err() if the list is empty
     * @complexity: O (1)
     */
    pub def front (mut self) -> dmut (T)? {
        match ref self._head {
            dmut head: &ListValue!{dmut T} => { return (alias head.value)? }
        }
        return (dmut (T?))::err;
    }

    /**
     * @returns: the value of the last element contained in the list, Err() if the list is empty
     * @complexity: O (1)
     */
    pub def back (self) -> (T)? {
        match ref self._tail {
            tail : &ListValue!{dmut T} => { return (tail.value)?; }
        }
        return ((T?))::err;
    }


    /**
     * @returns: the value of the last element contained in the list, Err() if the list is empty
     * @complexity: O (1)
     */
    pub def back (mut self) -> dmut (T)? {
        match ref self._tail {
            dmut tail : &ListValue!{dmut T} => { return (alias tail.value)?; }
        }
        return (dmut (T?))::err;
    }

    
    /**
     * This method is used to traverse the list with an iterator
     * @example: 
     * ==========
     * let dmut list = List!{dmut &A}::new ();
     * // ...
     * 
     * for v, index in list { // v is the value, and index the index of iteration (0 .. list.len ())
     *     println (v, " ", index);
     * }
     * 
     * for v in list {
     *     println (v);
     * }
     * ==========
     * @complexity: O (1)
     */
    pub def begin (self) -> dmut &ListIterator!{T} {
        return ListIterator!{T}::new (0us, self._head);
    }

    /**
     * @returns: an iterator to the end of the list, used to stop the loop
     * @example: 
     * ============
     * let dmut x = List!{dmut &A}::new ();
     * // ...
     * 
     * let dmut beg_it = alias x.begin ();
     * while (beg_it != x.end ()) {
     *      println (beg_it.get!0);
     *      beg_it:.next ();
     * }
     * ============
     * @complexity: O (1)
     */
    pub def end (self) -> &ListIterator!{T} {
        match self._tail {
            x : &ListValue!{dmut T} => {
                return ListIterator!{T}::new (self._len, x.next);
            }
            _ => {
                return ListIterator!{T}::new (self._len, self._tail);
            }
        }
    }

    cte if __pragma!operator("==", T, T) {

        /**
         * @returns: true if self == o
         * @example: 
         * ===
         * let dmut l = List!{dmut &A}::new ();
         * let dmut a = List!{dmut &A}::new ();
         * let dmut b = List!{dmut &A}::new ();
         *        
         * l:.push (A::new (1));
         * l:.push (A::new (2));
         *
         * a:.push (A::new (8));
         * a:.push (A::new (39));
         * 
         * b:.push (A::new (1));
         * b:.push (A::new (2));
         *
         * assert (l != a && l == b);
         * ===
         */
        pub def opEquals (self, o : &List!{dmut T})-> bool {
            if (self._len != o._len) return false;

            let mut selfC = self._head, mut oC = o._head;
            loop {
                match (selfC, oC) {
                    (h : &ListValue!{dmut T}, oh : &ListValue!{dmut T}) => {
                        if (h.value != oh.value) { return false; }
                        selfC = h.next;
                        oC = oh.next;
                    }
                    (_ : &Empty!{dmut T}, _ : &Empty!{dmut T}) => { return true; }
                    _ => { break {} }
                }
            }

            false
        }        
    }

    /**
     * Transform the list into a slice
     * @example: 
     * ===
     * let dmut c = List!{dmut &A}::new ();
     * for i in 0 .. 2 {
     *     c:.push (A::new (i));
     * }
     *    
     * assert (c[] == [A::new (0), A::new (1)]);
     * ===
     * @complexity: O (n)
     */
    pub def opIndex (self)-> mut [mut T] {
        let mut res : [mut T] = core::duplication::allocArray!{T} (self._len);
        for i, j in self {
            res[j] = i;            
        }

        alias res
    }    
    
    impl std::collection::seq::Seq!{T} {
        
        /**
         * @returns: the number of elements contained in the list
         * @complexity: O (1)
         */
        pub over len (self) -> usize {
            self._len
        }

        /**
         * Access a value in the list by index
         * @params: 
         *   - i: the index
         * @throws: 
         *   - &OutOfArray: if the index is not in the list
         * @complexity: O (i + 1)
         * @example: 
         * =============
         * let dmut x = List!{i32}::new ();
         * x:.push (12);
         * {
         *   assert (x [0] == 12);        
         * } catch {
         *    _ : &OutOfArray => {}
         *    _ : &AssertError => {}
         * }
         * =============
         */
        pub over opIndex (self, i : usize) -> T
            throws &OutOfArray
        {
            if (i > self._len) throw OutOfArray::new ();
            
            let mut z = 0us;
            for j in self {
                if (z == i) {
                    return j;
                }
                z += 1us;
            }
            
            throw OutOfArray::new (); // Can't get here, but well
        }

        /**
         * An alias to get the length of the list
         * @example: 
         * ===
         * let l = list#{1, 2, 3};
         * assert (l[$ - 1us] == 3);
         * ===
         */
        pub over opDollar (self)-> usize {
            self._len
        }

        
    }
        
    impl std::stream::Streamable {
        
        pub over toStream (self, dmut stream : &StringStream) {            
            stream:.write ("{"s8):.write (self._head):.write ("}"s8);
        }
    }


    impl std::hash::Hashable {
        pub over hash (self)-> u64 {
            cte if (__pragma!compile ({std::hash::hash (self[0us]);})) {
                let mut hash_value = 0x345678u64;
                let mut mult = 31u64;
                mult;
                {
                    for i in self {
                        hash_value = (hash_value ^ hash (i)) * mult;
                        mult += (82520u64 + cast!u64 (self._len * 2us));
                    }
                }
                
                hash_value
            } else {
                0x345678u64
            }
        }
    } 
   
    cte if is!{T}{U impl Copiable} {
        impl core::duplication::Copiable {

            /**
             * List are copiable
             * As the inner values of list is always immutable, they are not copied.
             * Only the structure of the list is copied
             */
            pub over deepCopy (self) -> dmut &Object {
                let mut current = self._head;
                let dmut empty : &ListNode!{dmut T} = Empty!{dmut T}::new ();
                let dmut c : &ListNode!{dmut T} = alias empty;
                let dmut head = alias empty, dmut tail = alias empty;
                let mut i = 0;
                loop {
                    match (current) {
                        x : &ListValue!{dmut T} => {                        
                            let dmut n = ListValue!{dmut T}::new (dcopy x.value, alias c, alias empty);
                            match ref c {
                                dmut z : &ListValue!{dmut T} => {
                                    z.next = alias n;
                                }
                            }
                            
                            c = alias n;
                            if (i == 0) {
                                head = alias c;
                            }
                            current = x.next;
                        }
                        _ => {
                            tail = alias c;
                            break {}
                        }
                    }
                    i += 1;
                }
                
                alias cast!{&Object} (List!{dmut T}::new (alias head, alias tail, self._len))
            }            
        }
    }
    
}

/**
 * The content of a linked list
 * Those nodes are only used in List, and there is no way to access them from outside
 */
class @abstract ListNode {T of dmut Z, class Z} {
    prot self () {}

    impl std::stream::Streamable;
    
}

/**
 * Encode a node of the linked list, containing a value
 */
class @final ListValue {T of dmut Z, class Z} over ListNode!{dmut T} {

    /// The reference to the previous node
    pub let dmut prev : &ListNode!{dmut T};

    /// The reference to the next node 
    pub let dmut next : &ListNode!{dmut T};

    /// The value contained in the node
    pub let dmut value : T;

    /**
     * Create a new node of the list
     * @params: 
     *    - val: the value to store
     *    - prev: the reference to the previous node in the list
     *    - next: the reference to the next node in the list
     */
    pub self (dmut val : T, dmut prev : &ListNode!{dmut T}, dmut next : &ListNode!{dmut T})
        with prev = alias prev,
             next = alias next,
             value = alias val
    {}    

    impl std::stream::Streamable {
        
        /**
         * Linked list are printable, this method print the value stored in the node, and the next node if it is not empty
         */
        pub over toStream (self, dmut stream : &StringStream) {
            cte if (__pragma!compile ({stream:.write (self.value);})) {
                stream:.write (self.value);
                match self.next {
                    _ : &Empty!{dmut T} => {}
                    _ => { stream:.write ("::"s8):.write (self.next); }
                }
            } else {
                stream:.write (T::typeid);
            } 
        }
        
    }    
}

/**
 * This class encode the end of a list (in both ways previous, or next)
 */
class @final Empty {T of dmut Z, class Z} over ListNode!{dmut T} {
    pub self () {}

    impl std::stream::Streamable {
        pub over toStream (self, dmut _ : &StringStream) {}
    }
}


class @final ListIterator {T} {

    let mut _current : &ListNode!{dmut T};

    let mut _index : usize;

    pub self (i : usize, node : &ListNode!{dmut T})
        with _current = node, _index = i
    {}

    pub def next (mut self) -> void {
        match self._current {
            x: &ListValue!{dmut T} => {
                self._index += 1us;
                self._current = x.next;
            }
        }
    }

    pub def get {0} (self) -> T {
        match self._current {
            x : &ListValue!{dmut T} =>
                return x.value; 
        }

        __pragma!panic ();
    }

    pub def get {1} (self) -> usize {
        return self._index;
    }

    pub def opEquals (self, o : &ListIterator!T) -> bool {
        self._index == o._index
    }
    
}

