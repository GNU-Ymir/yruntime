/**
 * This module implements a double linked list container.
 * <br>
 * This module publically import the mutable version of the `List` from `std::collection::mutable::list`, that can contain mutable values.
 * <br>
 * @Authors: Emile Cadorel
 * @License: GPLv3
 * <hr>
 * <br>
 * @example: 
 * ===
 * import std::io; // for println
 * import std::collection::list;
 * 
 * // Creates a list by using the class constructor
 * let dmut l = List!{i32}::new ();
 * l:.push (1);
 * l:.push (2);
 * l:.pushFront (8);
 *
 * // List are iterable, v is the value contained in the list, and i is the index of the iteration
 * for v, i in l { 
 *     println (v, " : ", i); // 8 : 0,  1 : 1,  2 : 2
 * }
 * 
 * // Or by using the macro 
 * let dmut m = list#['a', 'b', 'c'];
 * println (m); // {a::b::c}
 *
 * ===
 */
mod std::collection::list;

import core::typeinfo;
import core::duplication;
import core::exception;
import core::array;
import core::object;
import core::dispose;

import std::collection::seq;
pub import std::collection::mutable::list;

import std::io, std::stream, std::hash;

/**
 * Macro that can be used to declare a list easily
 * @example: 
 * =============
 * let x = list#{(1)::(2)::(3)};
 * let y = list#[1, 2, 3];
 * =============
 */
pub macro list {
    
    pub self (fst = __expr rest=("," val=__expr)*) skips (" " | "\n" | "\t" | "\r") {
        let dmut z_#{__index} = List!{typeof (#(fst))}::new ();
        z_#{__index}:.push (#(fst));
        #(for i in rest) {
            z_#{__index}:.push (#(i::val))
        }
        alias z_#{__index}
    }
    
    pub self ("(" fst = __expr ")" rest=("::" "(" val=__expr ")")*) skips (" " | "\n" | "\t" | "\r") {
        let dmut z_#{__index} = List!{typeof (#(fst))}::new ();
        z_#{__index}:.push (#(fst));
        #(for i in rest) {
            z_#{__index}:.push (#(i::val))
        }
        alias z_#{__index}
    }

}


/**
 * A doubly linked list
 * This class allows to push and pop elements from either end in constant time 
 * It stores immutable values but is itself mutable 
 */
pub class @final List {T} {

    let dmut _head : &ListNode!{T} = Empty!{T}::new ();

    let dmut _tail : &ListNode!{T} = Empty!{T}::new ();

    let mut _len : usize = 0us;
    
    /**
     * Create an empty list
     * @example: 
     * ===========
     * let x = List!(i32)::new ();
     * 
     * assert (x.isEmpty ());
     * ===========
     */
    pub self () {}


    prv self (dmut head : &ListNode!{T}, dmut tail : &ListNode!{T}, len : usize)
        with _head = alias head, _tail = alias tail, _len = len
    {}
    
    /**
     * Push an element at the end of the list
     * @params:
     *    - val: the element to append
     * @example: 
     * ============
     * let dmut x = List!(i32)::new ();
     * x:.push (1);
     * x:.push (1);
     * assert (x.len () == 2);
     * ============
     * @complexity: O (1)
     */
    pub fn push (mut self, val : T)-> void {
        match ref self._tail {            
            dmut tail: &ListValue!{T} => {
                let dmut n_node = ListValue!{T}::new (val, alias tail, alias tail.next);
                tail.next = alias n_node;
                self._tail = alias n_node;            
            }
            _ => {
                self._head = ListValue!{T}::new (val, alias self._tail, alias self._head);
                self._tail = alias self._head;
            }
        }
        self._len += 1us; 
    }
    
    /**
     * Pop the last element of the list and return it
     * @throws: 
     *    - &OutOfArray: if the list is empty
     * @example: 
     * =============
     * let dmut x = List!(i32)::new ();
     * x:.push (1);
     * {
     *    assert (x:.pop () == 1);
     * } catch (
     *    _ : &OutOfArray => 
     *        println ("List was empty");
     *    _ : &AssertError => 
     *        println ("Last value of list was not 1");
     * } 
     * =============
     * @complexity: O (1)
     */
    pub fn pop (mut self) -> T
        throws &OutOfArray
    {
        match ref self._tail {
            dmut tail : &ListValue!{T} => {
                let ret = tail.value;
                match ref tail.prev {
                    dmut prev : &ListValue!{T} => {
                        prev.next = alias tail.next;
                        self._tail = alias prev;
                    }
                    _ => { // Only on element
                        self._head = alias tail.prev;
                        self._tail = alias self._head;
                    }
                }
                
                self._len -= 1us; 
                return ret;
            }
            _ => throw OutOfArray::new ();
        }
    }
    

    /**
     * Push an element at the beginning of the list
     * @params: 
     *    - val: the value to push
     * @example: 
     * ==============
     * let dmut x = List!(i32)::new ();
     * x:.pushFront (1);
     * assert (x.len () == 1us);
     * ==============
     * @complexity: O (1)
     */    
    pub fn pushFront (mut self, val : T) -> void {
        match ref self._head {            
            dmut head: &ListValue!{T} => {
                let dmut n_node = ListValue!{T}::new (val, alias head.prev, alias head);
                head.prev = alias n_node;
                self._head = alias n_node;            
            }
            _ => {
                self._head = ListValue!{T}::new (val, alias self._tail, alias self._head);
                self._tail = alias self._head;
            }
        }
        self._len += 1us; 
    }

    /**
     * Remove the first element of the list and return it
     * @throws: 
     *    - &OutOfArray: if the list was empty
     * @example: 
     * ============
     * let dmut x = List!(i32)::new ();
     * x:.push (12);
     * assert (x:.popFront () == 12);
     * ============
     * @complexity: O (1)
     */
    pub fn popFront (mut self) -> T
        throws &OutOfArray
    {
        match ref self._head {
            dmut head : &ListValue!{T} => {
                let ret = head.value;
                match ref head.next {
                    dmut next : &ListValue!{T} => {
                        next.prev = alias head.prev;
                        self._head = alias next;
                    }
                    _ => { // Only on element
                        self._head = alias head.next;
                        self._tail = alias self._head;
                    }
                }
                
                self._len -= 1us; 
                return ret;
            }
            _ => throw OutOfArray::new ();
        }
    }
   

    /**
     * @returns: true if the list is empty
     * @complexity: O (1)
     */
    pub fn isEmpty (self) -> bool {
        self._len == 0us
    }

    /**
     * Remove all the elements from the list
     * @complexity: O (1)
     */
    pub fn clear (mut self) -> void {
        match ref self._head {
            dmut head : &ListValue!{T} => { // To avoid useless allocations
                self._head = alias head.prev;
                self._tail = alias self._tail;
            }
            _ => {}
        }
    }

    /**
     * @returns: the value of the first element contained in the list, None if the list is empty
     * @complexity: O (1)
     */
    pub fn front (self) -> (T)? {
        match self._head {
            head: &ListValue!{T} => { return (head.value)? }
        }
        return (T?)::err;
    }

    /**
     * @returns: the value of the last element contained in the list, None if the list is empty
     * @complexity: O (1)
     */
    pub fn back (self) -> (T)? {
        match self._tail {
            tail : &ListValue!{T} => { return (tail.value)?; }
        }
        return (T?)::err;
    }

    /**
     * This method is used to traverse the list with an iterator
     * @example: 
     * ==========
     * let list = list#{1, 2, 3};
     * for v, index in list {
     *     println (v, " ", index);
     * }
     * 
     * for v in list {
     *     println (v);
     * }
     * ==========
     * @complexity: O (1)
     */
    pub fn begin (self) -> dmut &ListIterator!{T} {
        return ListIterator!{T}::new (0us, self._head);
    }

    /**
     * @returns: an iterator to the end of the list, used to stop the loop
     * @example: 
     * ============
     * let x = list#{1, 2, 3};
     * let dmut beg_it = alias x.begin ();
     * while (beg_it != x.end ()) {
     *      println (beg_it.get!0);
     *      beg_it:.next ();
     * }
     * ============
     * @complexity: O (1)
     */
    pub fn end (self) -> &ListIterator!{T} {
        match self._tail {
            x : &ListValue!{T} => {
                return ListIterator!{T}::new (self._len, x.next);
            }
            _ => {
                return ListIterator!{T}::new (self._len, self._tail);
            }
        }
    }


    cte if __pragma!operator("==", T, T) {


        /**
         * @returns: true if self == o
         * @example: 
         * ===
         * let l = list#{1, 2, 3};
         * let a = list#{8, 9, 10};
         * let b = list#{1, 2, 3};
         *
         * assert (l != a && l == b);
         * ===
         */
        pub fn opEquals (self, o : &List!{T})-> bool {
            if (self._len != o._len) return false;

            let mut selfC = self._head, mut oC = o._head;
            loop {
                match (selfC, oC) {
                    (h : &ListValue!{T}, oh : &ListValue!{T}) => {
                        if (h.value != oh.value) { return false; }
                        selfC = h.next;
                        oC = oh.next;
                    }
                    (_ : &Empty!{T}, _ : &Empty!{T}) => { return true; }
                    _ => { break {} }
                }
            }
            
            false
        }        
    }

    /**
     * Transform the list into a slice
     * @example: 
     * ===
     * let l = list#{1, 2, 3};
     * assert (l[] == [1, 2, 3]);
     * ===
     * @complexity: O (n)
     */
    pub fn opIndex (self)-> mut [mut T] {
        let mut res : [mut T] = core::duplication::allocArray!{T} (self._len);
        for i, j in self {
            res[j] = i;            
        }

        alias res
    }
    
    impl std::collection::seq::Seq!{T} {
        
        /**
         * @returns: the number of elements contained in the list
         * @complexity: O (1)
         */
        pub over len (self) -> usize {
            self._len
        }

        /**
         * Access a value in the list by index
         * @params: 
         *   - i: the index
         * @throws: 
         *   - &OutOfArray: if the index is not in the list
         * @complexity: O (i + 1)
         * @example: 
         * =============
         * let dmut x = List!(i32)::new ();
         * x:.push (12);
         * {
         *   assert (x [0] == 12);        
         * } catch {
         *    _ : &OutOfArray => {}
         *    _ : &AssertError => {}
         * }
         * =============
         */
        pub over opIndex (self, i : usize) -> T
            throws &OutOfArray
        {
            if (i > self._len) throw OutOfArray::new ();
            
            let mut z = 0us;
            for j in self {
                if (z == i) {
                    return j;
                }
                z += 1us;
            }
            
            throw OutOfArray::new (); // Can't get here, but well
        }


        pub over opDollar (self)-> usize {
            self._len
        }
        
    }    
    
    impl std::stream::Streamable {
        
        pub over toStream (self, dmut stream : &StringStream) {            
            stream:.write ("{"s8):.write (self._head):.write ("}"s8);
        }
    }


    impl std::hash::Hashable {

        pub over hash (self)-> u64 {
            cte if (__pragma!compile ({hash (self[0us]);})) {
                let mut hash_value = 0x345678u64;
                let mut mult = 31u64;
                mult;
                {
                    for i in self {
                        hash_value = (hash_value ^ hash (i)) * mult;
                        mult += (82520u64 + cast!u64 (self._len * 2us));
                    }
                }
                
                hash_value
            } else {
                0x345678u64
            }
        }
    }
    
    impl core::duplication::Copiable {

        /**
         * List are copiable
         * As the inner values of list is always immutable, they are not copied.
         * Only the structure of the list is copied
         */
        pub over deepCopy (self) -> dmut &Object {
            let mut current = self._head;
            let dmut empty : &ListNode!{T} = Empty!{T}::new ();
            let dmut c : &ListNode!{T} = alias empty;
            let dmut head = alias empty, dmut tail = alias empty;
            let mut i = 0;
            loop {
                match (current) {
                    x : &ListValue!{T} => {                        
                        let dmut n = ListValue!{T}::new (x.value, alias c, alias empty);
                        match ref c {
                            dmut z : &ListValue!{T} => {
                                z.next = alias n;
                            }
                        }
                        
                        c = alias n;
                        if (i == 0) {
                            head = alias c;
                        }
                        current = x.next;
                    }
                    _ => {
                        tail = alias c;
                        break {}
                    }
                }
                i += 1;
            }
            
            alias cast!{&Object} (List!{T}::new (alias head, alias tail, self._len))
        }
        
    }
    
}

/**
 * The content of a linked list
 * Those nodes are only used in List, and there is no way to access them from outside
 */
class @abstract ListNode {T} {
    prot self () {}

    impl std::stream::Streamable;
    
}

/**
 * Encode a node of the linked list, containing a value
 */
class @final ListValue {T} over ListNode!T {

    /// The reference to the previous node
    pub let dmut prev : &ListNode!{T};

    /// The reference to the next node 
    pub let dmut next : &ListNode!{T};

    /// The value contained in the node
    pub let value : T;

    /**
     * Create a new node of the list
     * @params: 
     *    - val: the value to store
     *    - prev: the reference to the previous node in the list
     *    - next: the reference to the next node in the list
     */
    pub self (val : T, dmut prev : &ListNode!T, dmut next : &ListNode!T)
        with prev = alias prev,
             next = alias next,
             value = val
    {}    

    impl std::stream::Streamable {
        
        /**
         * Linked list are printable, this method print the value stored in the node, and the next node if it is not empty
         */
        pub over toStream (self, dmut stream : &StringStream) {
            cte if (__pragma!compile ({stream:.write (self.value);})) {
                stream:.write (self.value);
                match self.next {
                    _ : &Empty!{T} => {}
                    _ => { stream:.write ("::"s8):.write (self.next); }
                }
            } else {
                stream:.write (T::typeid);
            } 
        }
        
    }    
}

/**
 * This class encode the end of a list (in both ways previous, or next)
 */
class @final Empty {T} over ListNode!T {
    pub self () {}

    impl std::stream::Streamable {
        pub over toStream (self, dmut _ : &StringStream) {}
    }
}


class @final ListIterator {T} {

    let mut _current : &ListNode!T;

    let mut _index : usize;

    pub self (i : usize, node : &ListNode!T)
        with _current = node, _index = i
    {}

    pub fn next (mut self) -> void {
        match self._current {
            x: &ListValue!T => {
                self._index += 1us;
                self._current = x.next;
            }
        }
    }

    pub fn get {0} (self) -> T {
        match self._current {
            x : &ListValue!{T} =>
                return x.value; 
        }

        __pragma!panic ();
    }

    pub fn get {1} (self) -> usize {
        return self._index;
    }

    pub fn opEquals (self, o : &ListIterator!T) -> bool {
        self._index == o._index
    }
    
}

