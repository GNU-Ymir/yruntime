/**
 * This modules stores some shortcut for template specialization
 */
mod std::traits;

/**
 * @CTE
 * @returns: true if T is f32 or f64, false otherwise
 */
pub def isFloating {T} ()-> bool {
    cte (is!{T} {U of f32} || is!{T} {U of f64})
}

/**
 * @CTE
 * @returns: true if T is an integer (signed or unsigned) false otherwise
 */
pub def isIntegral {T} ()-> bool {
    cte (is!{T}{U of i8} || is!{T}{U of u8} ||
         is!{T}{U of i16} || is!{T}{U of u16} ||
         is!{T}{U of i32} || is!{T}{U of u32} ||
         is!{T}{U of i64} || is!{T}{U of u64} ||
         is!{T}{U of isize} || is!{T}{U of usize}
         )
}

/**
 * @CTE
 * @returns: true if T is a signed integer, false otherwise
 */
pub def isSigned {T} ()-> bool {
    cte (is!{T}{U of i8} || 
         is!{T}{U of i16} ||
         is!{T}{U of i32} ||
         is!{T}{U of i64} ||
         is!{T}{U of isize}
         )
}

/**
 * @CTE
 * @returns: true if T is a unsigned integer, false otherwise
 */
pub def isUnsigned {T} ()-> bool {
    cte (is!{T}{U of u8} || 
         is!{T}{U of u16} ||
         is!{T}{U of u32} ||
         is!{T}{U of u64} ||
         is!{T}{U of usize}
         )
}

/**
 * @CTE
 * @returns: true if T is a char type, false otherwise
 */
pub def isChar {T} ()-> bool {
    cte (is!{T}{U of c8} || is!{T}{U of c32})
}

pub def isTuple{T, U...}()-> bool {
    true
}


pub def isTuple {T}()-> bool
    false
