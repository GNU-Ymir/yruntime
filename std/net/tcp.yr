/**
 * This module implements the classes `TcpListener` and `TcpStream`
 * used to communicate using tcp protocol. Tcp stream and listener are
 * working with both ipv4 and ipv6 protocols, though they cannot be
 * intermixed (e.g. using an ipv6 TcpListener and ipv4 TcpStream to
 * connect to it). `TcpStream` are used to communicate through
 * connexions either opened by a `TcpListener` accepting new clients
 * or by connecting it to a remote tcp server. `TcpListener` and
 * `TcpStream` use low level protocol and can be used to communicate
 * with software using the tcp protocol that were not necessarily
 * developped in Ymir with no problem. They also implements higher
 * level communications to ease their use and be closer to the Ymir
 * philosophy.
 *
 * @Authors: Emile Cadorel
 * @License: GPLv3
 * <hr>
 * 
 * 
 * @example: 
 * 
 * While `TcpListener` is used to create a tcp server and open
 * connections, the `TcpStream` class is used to communicate using an
 * open connection. There are two way of creating `TcpStream`, 1) by
 * accepting client connection using a `TcpListener`.
 * 
 * ===============
 * import std::net::tcp;
 * 
 * fn greets_client (client : &TcpStream)
 *     throws &TcpError
 * {
 *    // Communicate with the client
 *    client:.rawSend ("Hello !!"s8);
 * }
 *
 * with dmut server = TcpListener::new ("127.0.0.1:8080"s8) {
 *     loop {
 *        // Accept creates a TcpStream to a connected client
 *        let dmut client = server:.accept ();
 *        println ("New client connected : ", client);
 *        greets_client (client);
 * 
 *        // Closing the connection to the client
 *        client:.dispose ();
 *     }
 * }
 * ===============
 * 
 * <br>
 * 
 * 2). By connecting a `TcpStream` to a tcp server. 
 * 
 * 
 * @example:
 * ===
 * import std::net::tcp;
 *
 * with dmut client = TcpStream::connect ("127.0.0.1:8080"s8) {
 *     println ("Message from server : ", client:.rawReceive!{c8} (8us));
 * } 
 * // client is automatically closed by the with construction
 * ===
 * 
 * <br>
 * 
 * `TcpStream` are able to automatically manage the packing and
 * unpacking of data sent and received. In other word any class can be
 * sent through a `TcpStream` as long as they are `<a href="std_net_packet.html#Packable_1">Packable</a>`. This is
 * the easier way to communicate using the tcp streams as the
 * management of data sizes to read and write on the stream is
 * hidden. Evidently it has a small overhead when sending only simple
 * data (whose sizes are knwon on both sides of the stream). Packing
 * is done in the the module `std::net::packet` using reflectivity.
 * 
 * <br>
 *
 * @example: 
 * ===
 * import std::net::tcp;
 * import std::box;
 * 
 * with dmut client = TcpStream::connect ("127.0.0.1:8080"s8) {
 *     // Sending a string to server
 *     client:.send (Box::new ("Hello Server !, here are an int and a double : "));
 *     client:.send (Box::new (34));
 *     client:.send (Box::new (892.13f));
 * 
 *     match client:.receive () { // Waiting for a packet from the server
 *          Box!{i32} (value-> i : _) => println ("Result : ", i);
 *          unk : _ => println ("Unknown result : ", unk);
 *     } 
 * } 
 * ===
 * 
 * @warning: the stream is not able to dynamically create types (the
 * language being statically typed). So if the type that was sent is
 * not a type present somewhere in the program of the reading end,
 * then the unpack error is thrown even if the types is perfectly
 * packed and contains no error whatsoever. 
 * 
 * @example: 
 * ===
 * {
 *    match client:.receive () { 
 *        // All the types listed below will always successfully unpack
 *        x : &Box!{i32} => { println ("A i32 : ", x.value); } 
 *        x : &Box!{[c32]} => { println ("A utf32 string : ", x.value); }
 *        unk : _ => println ("A type that is refered somewhere in the program : ", unk);
 *    }
 * } catch {
 *    // A type that has probably a meaning on the other side ot the stream but not locally
 *    uerr : &UnpackError => { println ("Unknown type for the program"); }
 *   
 *    // Stream failed anyway
 *    terr : &TcpError => { println ("Failed to receive a packet"); }
 * }
 * ===
 */

mod std::net::tcp;

import core::object, core::typeinfo, core::exception;
import core::duplication;
import core::dispose;
import core::atom;

import etc::c::socket, etc::c::files;

import std::io, std::stream, std::traits;
import std::net::address;
import std::net::packet;

extern (C) fn printf (c : &c8, ...);

/**
 * The types of error that can occur when listening, or connecting to a TCP socket
 */
pub enum
| ADDR_TYPE       = 0u8
| SOCKET_CREATION = 1u8
| BIND            = 2u8
| LISTEN          = 3u8
| CONNECT         = 4u8
| ACCEPT          = 5u8
| SOCKET_CLOSED   = 6u8
 -> TcpErrorCode;

/**
 * Exception that can occur when trying to create a TcpListener, or a TcpStream.
 */
pub class TcpError over Exception {

    pub let msg  : [c32];

    pub let code : TcpErrorCode;

    pub self (code : TcpErrorCode, msg : [c32])
        with msg = msg,
    code = code
    {}

    impl Streamable {
        pub over toStream (self, dmut stream : &StringStream) {
            self::super.toStream (alias stream);
        }
    }
    
}

/**
 * A tcp socket server that is listening for incoming connections.
 */
pub class @final TcpListener {

    /** The listening socket */
    let mut _sockfd : i32 = 0;
    let mut _addr : &SockAddress;
    let mut _port : u16 = 0u16;
    
    /**
     * Create a new TcpListener and bind it to the specific address.
     * The create listener is ready for accepting connection.
     * @info: by setting the socket address port to 0, a unused port is automatically selected.
     * @throws: 
     *   - &TcpError: 
     *      + The address is invalid
     *      + The port binding failed
     * @example:
     * ===
     * import std::net::_;
     * 
     * // Accept incoming connection from any address on port 4000
     * with dmut server = TcpListener::listen (SockAddrV4::new (Ipv4::UNSPECIFIED, 4000u16)) {
     *     let dmut client = server:.accept ();
     *     client:.rawSend ("Hi !");
     *     client:.close ();
     * }
     * ===
     */
    pub self listen (addr : &SockAddress)
        with _addr = addr
        throws &TcpError
    {
        match addr {
            v4 : &SockAddrV4 => {
                __version WINDOWS {
                    initSocketDll ();
                }
                
                self:.bindV4 (v4);
            }
            v6 : &SockAddrV6 => {
                __version WINDOWS {
                    initSocketDll ();
                }

                self:.bindV6 (v6);
            }
            _ => {
                throw TcpError::new (TcpErrorCode::ADDR_TYPE, "Unknown addr type : " ~ addr::typeinfo.name);
            }
        }
    }

    /**
     * Create a new TcpListener and bind it to the specific address.
     * The create listener is ready for accepting connection.
     * @info: by setting the socket address port to 0, a unused port is automatically selected.
     * @throws: 
     *   - &TcpError: 
     *      + The address is invalid 
     *      + The port binding failed
     * @example:
     * ===
     * import std::net::_;
     * 
     * // Accept incoming connection from localhost on port 8080
     * with dmut server = TcpListener::listen ("127.0.0.1:8080"s8) {
     *     let dmut client = server:.accept ();
     *     client:.rawSend ("Hi !");
     *     client:.close ();
     * }
     * ===
     */    
    pub self listen (addr : [c8])
        with _addr = {
            address::to!{&SockAddress} (addr)
        } catch {
            _ : &CastFailure => throw TcpError::new (TcpErrorCode::ADDR_TYPE, "Inalid address : " ~ addr.(conv::to)![c32] ());
        }
    throws &TcpError
    {
        match self._addr {
            v4 : &SockAddrV4 => {
                __version WINDOWS {
                    initSocketDll ();
                }

                self:.bindV4 (v4);
            }
            v6 : &SockAddrV6 => {
                __version WINDOWS {
                    initSocketDll ();
                }
                
                self:.bindV6 (v6);
            }
            _ => {
                throw TcpError::new (TcpErrorCode::ADDR_TYPE, "Unknown addr type : " ~ addr.(conv::to)![c32]());
            }
        }
    }
    
    /**
     * Accept a new client connection. This function is blocking, it waits until a client is connected.
     * @returns: the TcpStream used to communicate with the connected client.
     * @example: 
     * =============
     * pub fn greets_client (dmut client : &TcpStream) {
     *    // Communicate with the client
     *    client:.rawSend ("Hello !!"s8);
     * }
     *
     * let dmut server = TcpListener::listen (SockAddrV4::new (Ipv4::LOCALHOST, 4000u16));
     * loop {
     *    let dmut client = server:.accept ();
     *    println ("New client connected : ", client);
     *    greets_client (alias client);
     * }
     * =============
     */
    pub fn accept (mut self) -> dmut &TcpStream
        throws &TcpError
    {
        match self._addr {
            SockAddrV4 () => {
                let mut client = sockaddr_in ();
                let mut len = sizeof (sockaddr_in);
                
                let sock = etc::c::socket::accept (self._sockfd, alias (&client), alias (&len));
                if (sock <= 0) {
                    throw TcpError::new (TcpErrorCode::ACCEPT, "failed to accept client");
                }        
                
                return TcpStream::new (sock, self.createAddr (client));
            }
            SockAddrV6 () => {
                let mut client = sockaddr_in6 ();
                let mut len = sizeof (sockaddr_in);
                
                let sock = etc::c::socket::accept (self._sockfd, alias (&client), alias (&len));
                if (sock <= 0) {
                    throw TcpError::new (TcpErrorCode::ACCEPT, "failed to accept client");
                }        
                
                return TcpStream::new (sock, self.createAddr (client));
            }
            _ => {
                throw TcpError::new (TcpErrorCode::ACCEPT, "failed to accept client");
            }
        }
    }

    /**
     * @returns: the file descriptor of the socket
     * @warning: closing this socket will make the listener close, this should not be done outside the listener
     */
    pub fn getFd (self)-> i32 {
        self._sockfd
    }
    
    /**
     * @returns: the port on which the listener is listening
     */
    pub fn getPort (self)-> u16 {
        self._port
    }

    /**
     * Bind the tcp listener to an ipv4 address.
     */
    prv fn bindV4 (mut self, ip : &SockAddrV4)
        throws &TcpError
    {
        self._sockfd = etc::c::socket::socket (AddressFamily::AF_INET, SocketType::SOCK_STREAM, 0);
        if (self._sockfd == -1) {
            throw TcpError::new (TcpErrorCode::SOCKET_CREATION, "socket creation failed");
        }

        let mut servaddr = sockaddr_in ();
        match ip.ip () {
            v4 : &Ipv4Address => {        
                servaddr.sin_family = AddressFamily::AF_INET;
                servaddr.sin_addr.s_addr = v4.toN ();
            }
            _ => __pragma!panic ();
        }

        servaddr.sin_port        = htons (ip.port ());        
        if (bind (self._sockfd, &servaddr, sizeof (sockaddr_in)) != 0) {
            throw TcpError::new (TcpErrorCode::BIND, "socket bind failed");
        }

        if (listen (self._sockfd, 100) != 0) {
            throw TcpError::new (TcpErrorCode::LISTEN, "socket listen failed");
        }

        if (ip.port () == 0us) {
            let mut len = sizeof (sockaddr_in);
            let r = etc::c::socket::getsockname (self._sockfd, alias &servaddr, alias &len);
            if (r == 0) {
                self._port = ntohs (servaddr.sin_port);
            }
        } else self._port = ip.port ();
    }

    /**
     * Bind the tcp listener to an ipv6 address.
     */
    prv fn bindV6 (mut self, ip : &SockAddrV6)
        throws &TcpError
    {
        self._sockfd = etc::c::socket::socket (AddressFamily::AF_INET6, SocketType::SOCK_STREAM, 0);
        if (self._sockfd == -1) {
            throw TcpError::new (TcpErrorCode::SOCKET_CREATION, "socket creation failed");
        }

        let mut servaddr = sockaddr_in6 ();
        match ip.ip () {
            v6 : &Ipv6Address => {
                servaddr.sin6_family = AddressFamily::AF_INET6;
                servaddr.sin6_addr.s6_addr = v6.toN ();
            }
            _ => __pragma!panic ();
        }

        servaddr.sin6_port        = htons (ip.port ());        
        if (bind (self._sockfd, &servaddr, sizeof (sockaddr_in6)) != 0) {
            throw TcpError::new (TcpErrorCode::BIND, "socket bind failed");
        }

        if (listen (self._sockfd, 100) != 0) {
            throw TcpError::new (TcpErrorCode::LISTEN, "socket listen failed");
        }

        if (ip.port () == 0us) {
            let mut len = sizeof (sockaddr_in6);
            let r = etc::c::socket::getsockname (self._sockfd, alias &servaddr, alias &len);
            if (r == 0) {
                self._port = ntohs (servaddr.sin6_port);
            }
        } else self._port = ip.port ();          
    }
    

    /**
     * Read a sockaddr_in structure and create the associated SockAddress
     */
    prv fn createAddr (self, s_addr : sockaddr_in) -> &SockAddress
        throws &TcpError
    {
        match s_addr.sin_family {
            AddressFamily::AF_INET => {
                {
                    let h = s_addr.sin_addr.s_addr;
                    let pack : &u8 = cast!(&u8) (cast!(&void) (&h));
                    let a = *pack, b = *(pack + 1u32), c = *(pack + 2u32), d = *(pack + 3u32);
                    let port : u16 = ntohs (s_addr.sin_port);
                    return SockAddrV4::new (Ipv4Address::new (a, b, c, d), port);
                } catch {
                    _ => {
                        throw TcpError::new (TcpErrorCode::ADDR_TYPE, "unknown address type");
                    }
                }
            }
            _ => {
                throw TcpError::new (TcpErrorCode::ADDR_TYPE, "unknown address type");
            }
        }
    }

    /**
     * Read a sockaddr_in structure and create the associated SockAddress
     */
    prv fn createAddr (self, s_addr : sockaddr_in6) -> &SockAddress
        throws &TcpError
    {
        match s_addr.sin6_family {
            AddressFamily::AF_INET6 => {
                {
                    let h = Ipv6Address::fromN (s_addr.sin6_addr.s6_addr);
                    let port : u16 = ntohs (s_addr.sin6_port);
                    return SockAddrV6::new (h, port);
                }
            }
            _ => {
                throw TcpError::new (TcpErrorCode::ADDR_TYPE, "unknown address type");
            }
        }
    }

    
    impl std::stream::Streamable;

    impl core::dispose::Disposable {
        /**
         * Close the listener
         */
        pub over dispose (mut self) {
            if (self._sockfd != 0) {
                etc::c::socket::close (self._sockfd);
                self._sockfd = 0;
                __version WINDOWS {
                    cleanSocketDll ();
                }
            }
        }

    }

    __dtor (mut self) {
        self:.dispose ();
    }
    
}



/**
 * A tcp stream is a tcp connection from a client to a server, or a server to a client.
 * It can be acquired directly by construction, or using a TcpListener when accepting clients.
 * @example: 
 * ===============
 * pub fn greets_client (client : &TcpStream) {
 *    // Communicate with the client
 *    client:.rawSend ("Hello !!"s8);
 * }
 *
 * with dmut server = TcpListener::new ("127.0.0.1:8080"s8) {
 *     loop {
 *        // Accept creates a TcpStream to a connected client
 *        let dmut client = server:.accept ();
 *        println ("New client connected : ", client);
 *        greets_client (client);
 * 
 *        // Closing the connection to the client
 *        client:.dispose ();
 *     }
 * }
 * ===============
 * 
 * A TcpStream is also used on the client side to connect to a tcp server.
 * @example:
 * ===
 * with dmut client = TcpStream::connect ("127.0.0.1:8080"s8) {
 *     println ("Message from server : ", client:.rawReceive!{c8} (8us));
 * } 
 * // client is automatically by the with construction
 * ===
 */
pub class TcpStream {

    let mut _sockfd : i32;
    
    let _addr : &SockAddress;

    /**
     * Create a TcpStream on a already opened socket
     */
    pub self (socket : i32, addr : &SockAddress)
        with _sockfd = socket, _addr = addr
    {}

    /**
     * Create an empty tcp stream connected to nothing.
     */
    pub self empty ()
        with _sockfd = 0i32, _addr = SockAddrV4::new (Ipv4::UNSPECIFIED, 0u16)
    {}
    
    /**
     * Connect a client to address `addr`.
     * @example: 
     * ==========     
     * import std::net::_;
     * 
     * let addr = SockAddrV4 (Ipv4Address::new (127u8, 0u8, 0u8, 1u8), 8080u16);
     * with dmut client = TcpStream::connect (addr) {
     *      client:.rawSend ("Ping !"s8);
     * }
     * ==========
     */
    pub self connect (addr : &SockAddress)
        with _sockfd = 0,
    _addr = addr
        throws &TcpError
    {
        match self._addr {
            v4 : &SockAddrV4 => {
                __version WINDOWS {
                    initSocketDll ();
                }
                self:.connectV4 (v4);
            }
            v6 : &SockAddrV6 => {
                __version WINDOWS {
                    initSocketDll ();
                }
                self:.connectV6 (v6);
            }
            _ => {
                throw TcpError::new (TcpErrorCode::ADDR_TYPE, "unknwon addr type : " ~ (self._addr)::typeinfo.name);
            }
        }
    }    

    /**
     * Connect a client to address `addr`.
     * @example: 
     * ===
     * import std::net::_;
     * 
     * with dmut client = TcpStream::connect ("[::1]:8080"s8) {
     *      client:.rawSend ("Ping !"s8);
     * }
     * ===
     */
    pub self connect (addr : [c8])
        with _sockfd = 0, _addr = {
            addr.to!{&SockAddress} ()
        } catch {
            _ : &CastFailure => throw TcpError::new (TcpErrorCode::ADDR_TYPE, "Invalid address " ~ (addr.(conv::to)![c32] ()));
        }
    throws &TcpError
    {
        match self._addr {
            v4 : &SockAddrV4 => {
                __version WINDOWS {
                    initSocketDll ();
                }
                self:.connectV4 (v4);
            }
            v6 : &SockAddrV6 => {
                __version WINDOWS {
                    initSocketDll ();
                }
                self:.connectV6 (v6);
            }
            _ => {
                throw TcpError::new (TcpErrorCode::ADDR_TYPE, "unknwon addr type : " ~ (self._addr)::typeinfo.name);
            }
        }
    }

    
    /**
     * @returns: the address to which the stream is connected
     */
    pub fn getAddr (self)-> &SockAddress {
        self._addr
    }
    
    /**
     * @returns: the file descriptor of the socket. 
     */
    pub fn getFd (self)-> i32 {
        self._sockfd
    }
    
    /**
     * Send data in a raw way (without packing, nor sending the size of the data)
     * @info: This method is mainly used to communicate with external protocol (outside Ymir), as communication through packets is to be preferred in Ymir.
     * @params: 
     *     - a: the data to send    
     * @throws:
     *    - &TcpError: if the sending failed (stream closed)
     * 
     */
    pub fn rawSend {T of [U], U} (mut self, a : T) -> void
        throws &TcpError
    {
        if (self._sockfd == 0) throw TcpError::new (TcpErrorCode::SOCKET_CLOSED, "");
        
        let mut fullSize = 0us;
        while (fullSize != a.len * sizeof (U)) {
            let s = etc::c::socket::send (self._sockfd, cast!{&void} (a.ptr) + fullSize, cast!u32 ((sizeof (U) * cast!(usize) (a.len)) - fullSize), 0);

            if (s == -1) {
                self._sockfd = 0;
                throw TcpError::new (TcpErrorCode::SOCKET_CLOSED, "");
            }
            
            fullSize += cast!usize (s);
        }        
    }

    /**
     * Send data in a raw way (without packing).
     * @info: This method is mainly used to communicate with external protocol (outside Ymir), as communication through packets is to be preferred in Ymir.   
     * @params: 
     *    - a: the data to send
     * @throws:
     *    - &TcpError: if the sending failed (stream closed)
     */
    pub fn if (isIntegral!{T} () || is!{T}{U of bool}) rawSend {T} (mut self, a : T)-> void
        throws &TcpError
    {
        if (self._sockfd == 0) throw TcpError::new (TcpErrorCode::SOCKET_CLOSED, "");

        let mut fullSize = 0us;
        while (fullSize != sizeof (T)) {
            let s = etc::c::socket::send (self._sockfd, cast!{&void} (&a) + fullSize, cast!u32 (sizeof (T)) - fullSize, 0);
            if (s == -1) {
                self._sockfd = 0;
                throw TcpError::new (TcpErrorCode::SOCKET_CLOSED, "");
            }
            fullSize += cast!usize (s);
        }
    }

    /**
     * Receive data in a raw way (without unpacking it)
     * @info: This method is mainly used to communicate with external protocol (outside Ymir), as communication through packets is to be preferred in Ymir.
     * @warning: does not verify the integrity of received data. 
     * @params: 
     *   - nb: the number of element to receive (nb * sizeof(U)) will be read from the stream.
     * @throws:
     *    - &TcpError: if the sending failed (stream closed)
     */
    pub fn rawReceive {U} (mut self, nb : usize) -> dmut [U]
        throws &TcpError
    {
        if (self._sockfd == 0) throw TcpError::new (TcpErrorCode::SOCKET_CLOSED, "");
        
        let dmut alloc = core::duplication::allocArray!(U) (nb);
        let mut fullSize = 0us;
        while (fullSize != nb * sizeof (U)) {
            let r = etc::c::socket::recv (self._sockfd, alias cast!(&void) (alloc.ptr) + fullSize, cast!u32 (((nb) * sizeof (U)) - fullSize), 0);
            if (r == -1) {
                self._sockfd = 0;
                throw TcpError::new (TcpErrorCode::SOCKET_CLOSED, "");
            }
            fullSize += cast!usize (r);
        }
        
        return alias alloc;
    }

    /**
     * Receive data in a raw way (without unpacking them).
     * @info: This method is mainly used to communicate with external protocol (outside Ymir), as communication through packets is to be preferred in Ymir.
     * @warning: does not verify the integrity of the received data.
     * @params: 
     *   - nb: the number of element to receive (nb * sizeof(U)) will be read from the stream
     * @throws:
     *    - &TcpError: if the sending failed (stream closed)
     */
    pub fn rawReceive {U} (mut self, dmut elem : &U) -> void
        throws &TcpError
    {
        if (self._sockfd == 0) throw TcpError::new (TcpErrorCode::SOCKET_CLOSED, "");

        let mut fullSize = 0us;
        while (fullSize != sizeof (U)) {
            let r = etc::c::socket::recv (self._sockfd, alias cast!(&void) (elem) + fullSize, cast!u32 (sizeof (U) - fullSize), 0);
            if (r == -1) {
                self._sockfd = 0;
                throw TcpError::new (TcpErrorCode::SOCKET_CLOSED, "");
            }
            fullSize += cast!usize (r);
        }
    }
    

    /**
     * Send a packable class through the stream. 
     * @assume: the piece of software reading on the other side of the stream is aware of how to receive the result. In practice the class is transformed into a packet ([u8]) and sendPacket method is used.
     * @throws:
     *    - &TcpError: if the sending failed (stream closed)
     */
    pub fn send {T impl std::net::packet::Packable} (mut self, a : T) -> void
        throws &TcpError
    {
        if (self._sockfd == 0) throw TcpError::new (TcpErrorCode::SOCKET_CLOSED, "");
        let packet = a.pack ();
        
        // We start by sending the size of the packet
        self:.rawSend (packet.len);
        // And then the packet
        self:.rawSend (packet);
    }

    /**
     * Receive a packet from the stream, and unpack it into an object.
     * @warning: the piece of software sending the data on the other side of the stream is aware of how to send the datas, either by mimicking the creation and sending of a valid packet capable of creating a class, or by using the method `self:.send`.
     * @return: an object if the packet stored an object known by the current program
     * @throws:
     *    - &TcpError: if the reception failed (stream closed)
     *    - &UnpackError: a packet was received but was invalid (e.g. refering to an unkwnown class for example).
     */
    pub fn receive (mut self)-> dmut &Object
        throws &UnpackError, &TcpError
    {
        if (self._sockfd == 0) throw TcpError::new (TcpErrorCode::SOCKET_CLOSED, "");
        
        let mut size = 0us;
        self:.rawReceive (alias &size);
        let packet : [u8] = self:.rawReceive!{u8} (size);
        
        return packet.unpack ();
    }


    /**
     * Send a packet of bytes of any size into the stream.
     * @warning: the piece of software that will receive the packet on the other side should be know how to read the sent datas. In practice the size of the packet is send first using 64 bits so the other side of the stream knowns how many bytes to read for the packet, the packet is then sent directly after. 
     * @throws:
     *    - &TcpError: if the sending failed (stream closed)
     */
    pub fn sendPacket (mut self, packet : [u8])
        throws &TcpError
    {
        if (self._sockfd == 0) throw TcpError::new (TcpErrorCode::SOCKET_CLOSED, "");
        
        self:.rawSend (packet.len);
        self:.rawSend (packet);
    }
    
    /**
     * Receive a packet from the stream, but does not unpack it into an object
     * @returns: a packet of data
     * @cf: std::network::packet
     */
    pub fn receivePacket (mut self)-> [u8]
        throws &TcpError
    {
        if (self._sockfd == 0) throw TcpError::new (TcpErrorCode::SOCKET_CLOSED, "");
        
        let mut size = 0us;
        self:.rawReceive (alias &size);
        
        self:.rawReceive!{u8} (size)
    }
    

    /**
     * @returns: true if the socket can still read, false otherwise
     * @warning: to work properly something has to be sent from the other side of the socket, this is a blocking function
     */
    pub fn isAliveRead (self)-> bool {
        let mut c = '\u{0}'c8;
        recv (self._sockfd, cast!(&void) (&c), 1u32, cast!i32 (SocketFlag::MSG_PEEK)) == 1
    }
    
    prv fn connectV4 (mut self, addr : &SockAddrV4)
        throws &TcpError
    {
        self._sockfd = etc::c::socket::socket (AddressFamily::AF_INET, SocketType::SOCK_STREAM, 0);
        if (self._sockfd == -1) {
            throw TcpError::new (TcpErrorCode::SOCKET_CREATION, "failed to create socket");
        }

        let mut servaddr = sockaddr_in ();
        servaddr.sin_family = AddressFamily::AF_INET;
        
        match addr.ip () {
            v4 : &Ipv4Address => {
                servaddr.sin_addr.s_addr = v4.toN ();
            }
            _ => __pragma!panic ();
        }
        
        servaddr.sin_port =        htons (addr.port ());
        
        if (connect (self._sockfd, &servaddr, cast!u32 (sizeof (sockaddr_in))) != 0) {
            throw TcpError::new (TcpErrorCode::CONNECT, "failed to connect");
        }
    }

    prv fn connectV6 (mut self, addr : &SockAddrV6)
        throws &TcpError
    {
        self._sockfd = etc::c::socket::socket (AddressFamily::AF_INET6, SocketType::SOCK_STREAM, 0);
        if (self._sockfd == -1) {
            throw TcpError::new (TcpErrorCode::SOCKET_CREATION, "failed to create socket");
        }

        let mut servaddr = sockaddr_in6 ();
        servaddr.sin6_family = AddressFamily::AF_INET6;
        servaddr.sin6_port =        htons (addr.port ());
        
        match addr.ip () {
            v6 : &Ipv6Address => {
                servaddr.sin6_addr.s6_addr = v6.toN ();
            }
            _ => __pragma!panic ();
        }

        println (servaddr);
        
        let z = connect (self._sockfd, &servaddr, cast!u32 (sizeof (typeof (servaddr))));
        println (z);
        if (z != 0) {
            throw TcpError::new (TcpErrorCode::CONNECT, "failed to connect");
        }
    }

    prv fn toBigEndian (self, a : [u16 ; 8u32])-> [u8 ; 16u32] {
        let dmut res = [0u8 ; 16u32];
        let mut j = 0us;
        for i in 0us .. 8us {
            res[j + 1us] = cast!u8 ((a[i] & 0x00ffu16));
            res[j] = cast!u8 ((a[i] & 0xff00u16) >> 8u16);
            j += 2us;
        }

        res
    }    

    impl std::stream::Streamable;
    
    impl core::dispose::Disposable {
        /**
         * Close the connection with the remote
         */
        pub over dispose (mut self) {
            if (self._sockfd != 0) {
                etc::c::socket::close (self._sockfd);
                self._sockfd = 0;
                __version WINDOWS {
                    cleanSocketDll ();
                }
            }
        }
    }

    __dtor (mut self) {
        self:.dispose ();
    }    
}


__version WINDOWS {
    static mut __init__ = 0u32;


    struct
    | data : [u8 ; 408u32] = [0u8 ; 408u32]
     -> WSADATA;

    extern (C) fn WSAStartup (version : u16, data : &WSADATA);
    extern (C) fn WSACleanup ();

    
    /**
     * Windows socket lib need to be initialized
     */
    fn initSocketDll () {
        atomic {
            if (__init__ == 0u32) {
                let WSAData = WSADATA ();
                WSAStartup (2u16, &WSAData);
            }

            __init__ += 1u32;
        }
    }

    /**
     * It also needs to be cleaned up (when the last socket use is disposed)
     */
    fn cleanSocketDll () {
        atomic {
            __init__ -= 1u32;
            if (__init__ == 0u32) {
                WSACleanup ();
            }
        }
    }        
}
