/**
 * This module implements the class `TcpListener` and `TcpStream` used to communicate using tcp protocol.
 * @Authors: Emile Cadorel
 * @License: GPLv3
 * <hr>
 * ===
 * import std::net::_;
 *
 * pub def greetsClient (dmut client : &TcpStream) {
 *    // Communicate with the client
 *    client:.rawSend ("Hello !!"s8);
 * }
 *
 * // Create a tcp listener, listening on an ipv4 address at port 4000
 * with dmut server = TcpListener::listen ("127.0.0.1:4000"s8) {
 *     loop {
 *         let dmut client = server:.accept ();
 *         println ("New client connected : ", client);
 *         greetsClient (alias client);
 *     }
 * }
 * ===
 */

mod std::net::tcp;

import core::object, core::typeinfo, core::exception;
import core::duplication;
import core::dispose;
import core::atom;

import etc::c::socket, etc::c::files;

import std::io, std::stream, std::traits;
import std::net::address;
import std::net::packet;

/**
 * The types of error that can occur when listening, or connecting to a TCP socket
 */
pub enum
| ADDR_TYPE       = 0u8
| SOCKET_CREATION = 1u8
| BIND            = 2u8
| LISTEN          = 3u8
| CONNECT         = 4u8
| ACCEPT          = 5u8
| SOCKET_CLOSED   = 6u8
 -> TcpErrorCode;

/**
 * Exception that can occur when trying to create a TcpListener, or a TcpStream.
 */
pub class TcpError over Exception {

    pub let msg  : [c32];

    pub let code : TcpErrorCode;

    pub self (code : TcpErrorCode, msg : [c32])
        with msg = msg,
    code = code
    {}

    impl Streamable {
        pub over toStream (self, dmut stream : &StringStream) {
            self::super.toStream (alias stream);
        }
    }
    
}

/**
 * A tcp socket server that is listening for incoming connection.
 */
pub class @final TcpListener {

    /** The listening socket */
    let mut _sockfd : i32 = 0;
    let mut _addr : &SockAddress;
    let mut _port : u16 = 0u16;
    
    /**
     * Create a new TcpListener and bind it to the specific address.
     * The create listener is ready for accepting connection.
     * @info: by setting the socket address port to 0, a unused port is automatically selected.
     * @throws: 
     *   - &TcpError: 
     *      + The address is invalid
     *      + The port binding failed
     * @example:
     * ===
     * import std::net::_;
     * 
     * // Accept incoming connection from any address on port 4000
     * with dmut server = TcpListener::listen (SockAddrV4::new (Ipv4::UNSPECIFIED, 4000u16)) {
     *     let dmut client = server:.accept ();
     *     client:.rawSend ("Hi !");
     *     client:.close ();
     * }
     * ===
     */
    pub self listen (addr : &SockAddress)
        with _addr = addr
        throws &TcpError
    {
        match addr {
            v4 : &SockAddrV4 => {
                __version WINDOWS {
                    initSocketDll ();
                }
                
                self:.bindV4 (v4);
            }
            v6 : &SockAddrV6 => {
                __version WINDOWS {
                    initSocketDll ();
                }

                self:.bindV6 (v6);
            }
            _ => {
                throw TcpError::new (TcpErrorCode::ADDR_TYPE, "Unknown addr type : " ~ addr::typeinfo.name);
            }
        }
    }

    /**
     * Create a new TcpListener and bind it to the specific address.
     * The create listener is ready for accepting connection.
     * @info: by setting the socket address port to 0, a unused port is automatically selected.
     * @throws: 
     *   - &TcpError: 
     *      + The address is invalid 
     *      + The port binding failed
     * @example:
     * ===
     * import std::net::_;
     * 
     * // Accept incoming connection from localhost on port 8080
     * with dmut server = TcpListener::listen ("127.0.0.1:8080"s8) {
     *     let dmut client = server:.accept ();
     *     client:.rawSend ("Hi !");
     *     client:.close ();
     * }
     * ===
     */    
    pub self listen (addr : [c8])
        with _addr = {
            address::to!{&SockAddress} (addr)
        } catch {
            _ : &CastFailure => throw TcpError::new (TcpErrorCode::ADDR_TYPE, "Inalid address : " ~ addr.(conv::to)![c32] ());
        }
    throws &TcpError
    {
        match self._addr {
            v4 : &SockAddrV4 => {
                __version WINDOWS {
                    initSocketDll ();
                }

                self:.bindV4 (v4);
            }
            v6 : &SockAddrV6 => {
                __version WINDOWS {
                    initSocketDll ();
                }
                
                self:.bindV6 (v6);
            }
            _ => {
                throw TcpError::new (TcpErrorCode::ADDR_TYPE, "Unknown addr type : " ~ addr.(conv::to)![c32]());
            }
        }
    }
    
    /**
     * Accept a new client connection. This function is blocking, it waits until a client is connected.
     * @returns: the TcpStream used to communicate with the connected client.
     * @example: 
     * =============
     * pub def greets_client (dmut client : &TcpStream) {
     *    // Communicate with the client
     *    client:.rawSend ("Hello !!"s8);
     * }
     *
     * let dmut server = TcpListener::listen (SockAddrV4::new (Ipv4::LOCALHOST, 4000u16));
     * loop {
     *    let dmut client = server:.accept ();
     *    println ("New client connected : ", client);
     *    greets_client (alias client);
     * }
     * =============
     */
    pub def accept (mut self) -> dmut &TcpStream
        throws &TcpError
    {
        match self._addr {
            SockAddrV4 () => {
                let mut client = sockaddr_in ();
                let mut len = sizeof (sockaddr_in);
                
                let sock = etc::c::socket::accept (self._sockfd, alias (&client), alias (&len));
                if (sock <= 0) {
                    throw TcpError::new (TcpErrorCode::ACCEPT, "failed to accept client");
                }        
                
                return TcpStream::new (sock, self.createAddr (client));
            }
            SockAddrV6 () => {
                let mut client = sockaddr_in6 ();
                let mut len = sizeof (sockaddr_in);
                
                let sock = etc::c::socket::accept (self._sockfd, alias (&client), alias (&len));
                if (sock <= 0) {
                    throw TcpError::new (TcpErrorCode::ACCEPT, "failed to accept client");
                }        
                
                return TcpStream::new (sock, self.createAddr (client));
            }
            _ => {
                throw TcpError::new (TcpErrorCode::ACCEPT, "failed to accept client");
            }
        }
    }

    /**
     * @returns: the file descriptor of the socket
     * @warning: closing this socket will make the listener close, this should not be done outside the listener
     */
    pub def getFd (self)-> i32 {
        self._sockfd
    }
    
    /**
     * @returns: the port on which the listener is listening
     */
    pub def getPort (self)-> u16 {
        self._port
    }

    /**
     * Bind the tcp listener to an ipv4 address.
     */
    prv def bindV4 (mut self, ip : &SockAddrV4)
        throws &TcpError
    {
        self._sockfd = etc::c::socket::socket (AddressFamily::AF_INET, SocketType::SOCK_STREAM, 0);
        if (self._sockfd == -1) {
            throw TcpError::new (TcpErrorCode::SOCKET_CREATION, "socket creation failed");
        }

        let mut servaddr = sockaddr_in ();
        match ip.ip () {
            v4 : &Ipv4Address => {        
                servaddr.sin_family = AddressFamily::AF_INET;
                servaddr.sin_addr.s_addr = v4.toN ();
            }
            _ => __pragma!panic ();
        }

        servaddr.sin_port        = htons (ip.port ());        
        if (bind (self._sockfd, &servaddr, sizeof (sockaddr_in)) != 0) {
            throw TcpError::new (TcpErrorCode::BIND, "socket bind failed");
        }

        if (listen (self._sockfd, 100) != 0) {
            throw TcpError::new (TcpErrorCode::LISTEN, "socket listen failed");
        }

        if (ip.port () == 0us) {
            let mut len = sizeof (sockaddr_in);
            let r = etc::c::socket::getsockname (self._sockfd, alias &servaddr, alias &len);
            if (r == 0) {
                self._port = ntohs (servaddr.sin_port);
            }
        } else self._port = ip.port ();
    }

    /**
     * Bind the tcp listener to an ipv6 address.
     */
    prv def bindV6 (mut self, ip : &SockAddrV6)
        throws &TcpError
    {
        self._sockfd = etc::c::socket::socket (AddressFamily::AF_INET6, SocketType::SOCK_STREAM, 0);
        if (self._sockfd == -1) {
            throw TcpError::new (TcpErrorCode::SOCKET_CREATION, "socket creation failed");
        }

        let mut servaddr = sockaddr_in6 ();
        match ip.ip () {
            v6 : &Ipv6Address => {
                servaddr.sin6_family = AddressFamily::AF_INET6;
                servaddr.sin6_addr.s6_addr = v6[];
            }
            _ => __pragma!panic ();
        }

        servaddr.sin6_port        = htons (ip.port ());        
        if (bind (self._sockfd, &servaddr, sizeof (sockaddr_in6)) != 0) {
            throw TcpError::new (TcpErrorCode::BIND, "socket bind failed");
        }

        if (listen (self._sockfd, 100) != 0) {
            throw TcpError::new (TcpErrorCode::LISTEN, "socket listen failed");
        }

        if (ip.port () == 0us) {
            let mut len = sizeof (sockaddr_in6);
            let r = etc::c::socket::getsockname (self._sockfd, alias &servaddr, alias &len);
            if (r == 0) {
                self._port = ntohs (servaddr.sin6_port);
            }
        } else self._port = ip.port ();          
    }
    

    /**
     * Read a sockaddr_in structure and create the associated SockAddress
     */
    prv def createAddr (self, s_addr : sockaddr_in) -> &SockAddress
        throws &TcpError
    {
        match s_addr.sin_family {
            AddressFamily::AF_INET => {
                {
                    let h = s_addr.sin_addr.s_addr;
                    let pack : &u8 = cast!(&u8) (cast!(&void) (&h));
                    let a = *pack, b = *(pack + 1u32), c = *(pack + 2u32), d = *(pack + 3u32);
                    let port : u16 = ntohs (s_addr.sin_port);
                    return SockAddrV4::new (Ipv4Address::new (a, b, c, d), port);
                } catch {
                    _ => {
                        throw TcpError::new (TcpErrorCode::ADDR_TYPE, "unknown address type");
                    }
                }
            }
            _ => {
                throw TcpError::new (TcpErrorCode::ADDR_TYPE, "unknown address type");
            }
        }
    }

    /**
     * Read a sockaddr_in structure and create the associated SockAddress
     */
    prv def createAddr (self, s_addr : sockaddr_in6) -> &SockAddress
        throws &TcpError
    {
        match s_addr.sin6_family {
            AddressFamily::AF_INET6 => {
                {
                    let h = s_addr.sin6_addr.s6_addr;
                    let port : u16 = ntohs (s_addr.sin6_port);
                    return SockAddrV6::new (Ipv6Address::new (h[0], h[1], h[2], h[3],
                                                              h[4], h[5], h[6], h[7]), port);
                }
            }
            _ => {
                throw TcpError::new (TcpErrorCode::ADDR_TYPE, "unknown address type");
            }
        }
    }

    
    impl std::stream::Streamable;

    impl core::dispose::Disposable {
        /**
         * Close the listener
         */
        pub over dispose (mut self) {
            if (self._sockfd != 0) {
                etc::c::socket::close (self._sockfd);
                self._sockfd = 0;
                __version WINDOWS {
                    cleanSocketDll ();
                }
            }
        }

    }

    __dtor (mut self) {
        self:.dispose ();
    }
    
}



/**
 * A tcp stream is a tcp connection from a client to a server, or a server to a client
 * It can be acquired directly by construction, or using a TcpListener
 * @example: 
 * ===============
 * pub def greets_client (client : &TcpStream) {
 *    // Communicate with the client
 *    client:.rawSend ("Hello !!"s8);
 * }
 *
 * let dmut server = TcpListener::new ("127.0.0.1:8080");
 * loop {
 *    let dmut client = server:.accept ();
 *    println ("New client connected : ", client);
 *    greets_client (client);
 * }
 * ===============
 */
pub class TcpStream {

    let mut _sockfd : i32;
    
    let _addr : &SockAddress;

    /**
     * Create a TcpStream on a already opened socket
     */
    pub self (socket : i32, addr : &SockAddress)
        with _sockfd = socket, _addr = addr
    {}


    pub self empty ()
        with _sockfd = 0i32, _addr = SockAddrV4::new (Ipv4::UNSPECIFIED, 0u16)
    {}
    
    /**
     * Connect a client to address `addr`.
     * @example: 
     * ==========     
     * import std::net::_;
     * 
     * let addr = SockAddrV4 (Ipv4Address::new (127u8, 0u8, 0u8, 1u8), 8080u16);
     * with dmut client = TcpStream::connect (addr) {
     *      client:.rawSend ("Ping !"s8);
     * }
     * ==========
     */
    pub self connect (addr : &SockAddress)
        with _sockfd = 0,
    _addr = addr
        throws &TcpError
    {
        match self._addr {
            v4 : &SockAddrV4 => {
                __version WINDOWS {
                    initSocketDll ();
                }
                self:.connectV4 (v4);
            }
            v6 : &SockAddrV6 => {
                __version WINDOWS {
                    initSocketDll ();
                }
                self:.connectV6 (v6);
            }
            _ => {
                throw TcpError::new (TcpErrorCode::ADDR_TYPE, "unknwon addr type : " ~ (self._addr)::typeinfo.name);
            }
        }
    }    

    /**
     * Connect a client to address `addr`.
     * @example: 
     * ===
     * import std::net::_;
     * 
     * with dmut client = TcpStream::connect ("[::1]:8080"s8) {
     *      client:.rawSend ("Ping !"s8);
     * }
     * ===
     */
    pub self connect (addr : [c8])
        with _sockfd = 0, _addr = {
            addr.to!{&SockAddress} ()
        } catch {
            _ : &CastFailure => throw TcpError::new (TcpErrorCode::ADDR_TYPE, "Invalid address " ~ (addr.(conv::to)![c32] ()));
        }
    throws &TcpError
    {
        match self._addr {
            v4 : &SockAddrV4 => {
                __version WINDOWS {
                    initSocketDll ();
                }
                self:.connectV4 (v4);
            }
            v6 : &SockAddrV6 => {
                __version WINDOWS {
                    initSocketDll ();
                }
                self:.connectV6 (v6);
            }
            _ => {
                throw TcpError::new (TcpErrorCode::ADDR_TYPE, "unknwon addr type : " ~ (self._addr)::typeinfo.name);
            }
        }
    }

    
    /**
     * @returns: the address to which the stream is connected
     */
    pub def getAddr (self)-> &SockAddress {
        self._addr
    }
    
    /**
     * @returns: the file descriptor of the socket
     */
    pub def getFd (self)-> i32 {
        self._sockfd
    }
    
    /**
     * Send data in a raw way (without packing, nor sending the size of the data)
     * This methods are mainly used to communicate with external protocol
     * In Ymir, it is more common to use packet sending via Packable objects
     * @params: 
     * - a: the data to send    
     * @templates: 
     *  - T: a slice type
     *  - U: any type
     */
    pub def rawSend {T of [U], U} (mut self, a : T) -> void
        throws &TcpError
    {
        if (self._sockfd == 0) throw TcpError::new (TcpErrorCode::SOCKET_CLOSED, "");

        let mut fullSize = 0us;
        while (fullSize != a.len * sizeof (U)) {
            let s = etc::c::socket::send (self._sockfd, cast!{&void} (a.ptr) + fullSize, cast!u32 ((sizeof (U) * cast!(usize) (a.len)) - fullSize), 0);
            if (s == -1) {
                self._sockfd = 0;
                throw TcpError::new (TcpErrorCode::SOCKET_CLOSED, "");
            }
            
            fullSize += cast!usize (s);
        }        
    }

    /**
     * Send data in a raw way (without packing)
     * This methods are mainly used to communicate with external protocol
     * @params: 
     *    - a: the data to send
     */
    pub def if (isIntegral!{T} () || is!{T}{U of bool}) rawSend {T} (mut self, a : T)-> void
        throws &TcpError
    {
        if (self._sockfd == 0) throw TcpError::new (TcpErrorCode::SOCKET_CLOSED, "");

        let mut fullSize = 0us;
        while (fullSize != sizeof (T)) {
            let s = etc::c::socket::send (self._sockfd, cast!{&void} (&a) + fullSize, cast!u32 (sizeof (T)) - fullSize, 0);
            if (s == -1) {
                self._sockfd = 0;
                throw TcpError::new (TcpErrorCode::SOCKET_CLOSED, "");
            }
            fullSize += cast!usize (s);
        }
    }

    /**
     * Receive data in a raw way (without unpacking it)
     * @params: 
     *   - nb: the number of element to receive (nb * sizeof(U)) will be read from the stream
     * @templates: 
     * - U: any type
     */
    pub def rawReceive {U} (mut self, nb : usize) -> dmut [U]
        throws &TcpError
    {
        if (self._sockfd == 0) throw TcpError::new (TcpErrorCode::SOCKET_CLOSED, "");
        
        let dmut alloc = core::duplication::allocArray!(U) (nb);
        let mut fullSize = 0us;
        while (fullSize != nb * sizeof (U)) {
            let r = etc::c::socket::recv (self._sockfd, alias cast!(&void) (alloc.ptr) + fullSize, cast!u32 (((nb) * sizeof (U)) - fullSize), 0);
            if (r == -1) {
                self._sockfd = 0;
                throw TcpError::new (TcpErrorCode::SOCKET_CLOSED, "");
            }
            fullSize += cast!usize (r);
        }
        
        return alias alloc;
    }

    /**
     * Receive data in a raw way (without unpacking it)
     * @params: 
     *   - nb: the number of element to receive (nb * sizeof(U)) will be read from the stream
     * @templates: 
     * - U: any type
     */
    pub def rawReceive {U} (mut self, dmut elem : &U) -> void
        throws &TcpError
    {
        if (self._sockfd == 0) throw TcpError::new (TcpErrorCode::SOCKET_CLOSED, "");

        let mut fullSize = 0us;
        while (fullSize != sizeof (U)) {
            let r = etc::c::socket::recv (self._sockfd, alias cast!(&void) (elem) + fullSize, cast!u32 (sizeof (U) - fullSize), 0);
            if (r == -1) {
                self._sockfd = 0;
                throw TcpError::new (TcpErrorCode::SOCKET_CLOSED, "");
            }
            fullSize += cast!usize (r);
        }
    }
    

    /**
     * Send a packable class through the stream
     */
    pub def send {T impl std::net::packet::Packable} (mut self, a : T) -> void
        throws &TcpError
    {
        if (self._sockfd == 0) throw TcpError::new (TcpErrorCode::SOCKET_CLOSED, "");
        let packet = a.pack ();
        
        // We start by sending the size of the packet
        self:.rawSend (packet.len);
        // And then the packet
        self:.rawSend (packet);
    }

    /**
     * Receive a packet from the stream, and unpack it into an object
     * @return: an object if the packet stored an object known by the current program, std::any::None otherwise
     * @cf: std::network::packet
     */
    pub def receive (mut self)-> dmut &Object
        throws &UnpackError, &TcpError
    {
        if (self._sockfd == 0) throw TcpError::new (TcpErrorCode::SOCKET_CLOSED, "");
        
        let mut size = 0us;
        self:.rawReceive (alias &size);
        let packet : [u8] = self:.rawReceive!{u8} (size);
        
        return packet.unpack ();
    }

    /**
     * Receive a packet from the stream, but does not unpack it into an object
     * @returns: a packet of data
     * @cf: std::network::packet
     */
    pub def receivePacket (mut self)-> [u8]
        throws &TcpError
    {
        if (self._sockfd == 0) throw TcpError::new (TcpErrorCode::SOCKET_CLOSED, "");
        
        let mut size = 0us;
        self:.rawReceive (alias &size);
        
        self:.rawReceive!{u8} (size)
    }
    

    /**
     * @returns: true if the socket can still read, false otherwise
     * @warning: to work properly something has to be sent from the other side of the socket, this is a blocking function
     */
    pub def isAliveRead (self)-> bool {
        let mut c = '\u{0}'c8;
        recv (self._sockfd, cast!(&void) (&c), 1u32, cast!i32 (SocketFlag::MSG_PEEK)) == 1
    }
    
    prv def connectV4 (mut self, addr : &SockAddrV4)
        throws &TcpError
    {
        self._sockfd = etc::c::socket::socket (AddressFamily::AF_INET, SocketType::SOCK_STREAM, 0);
        if (self._sockfd == -1) {
            throw TcpError::new (TcpErrorCode::SOCKET_CREATION, "failed to create socket");
        }

        let mut servaddr = sockaddr_in ();
        servaddr.sin_family = AddressFamily::AF_INET;
        
        match addr.ip () {
            v4 : &Ipv4Address => {
                servaddr.sin_addr.s_addr = v4.toN ();
            }
            _ => __pragma!panic ();
        }
        
        servaddr.sin_port =        htons (addr.port ());
        
        if (connect (self._sockfd, &servaddr, cast!u32 (sizeof (sockaddr_in))) != 0) {
            throw TcpError::new (TcpErrorCode::CONNECT, "failed to connect");
        }
    }

    prv def connectV6 (mut self, addr : &SockAddrV6)
        throws &TcpError
    {
        self._sockfd = etc::c::socket::socket (AddressFamily::AF_INET6, SocketType::SOCK_STREAM, 0);
        if (self._sockfd == -1) {
            throw TcpError::new (TcpErrorCode::SOCKET_CREATION, "failed to create socket");
        }

        let mut servaddr = sockaddr_in6 ();
        servaddr.sin6_family = AddressFamily::AF_INET6;
        servaddr.sin6_port =        htons (addr.port ());
        
        match addr.ip () {
            v6 : &Ipv6Address => {
                servaddr.sin6_addr.s6_addr = v6[];
            }
            _ => __pragma!panic ();
        }

        let z = connect (self._sockfd, &servaddr, cast!u32 (sizeof (sockaddr_in6)));
        println (z);
        if (z != 0) {
            throw TcpError::new (TcpErrorCode::CONNECT, "failed to connect");
        }
    }

    impl std::stream::Streamable;
    
    impl core::dispose::Disposable {
        /**
         * Close the connection with the remote
         */
        pub over dispose (mut self) {
            if (self._sockfd != 0) {
                etc::c::socket::close (self._sockfd);
                self._sockfd = 0;
                __version WINDOWS {
                    cleanSocketDll ();
                }
            }
        }
    }

    __dtor (mut self) {
        self:.dispose ();
    }    
}


__version WINDOWS {
    static mut __init__ = 0u32;


    struct
    | data : [u8 ; 408u32] = [0u8 ; 408u32]
     -> WSADATA;

    extern (C) def WSAStartup (version : u16, data : &WSADATA);
    extern (C) def WSACleanup ();

    
    /**
     * Windows socket lib need to be initialized
     */
    def initSocketDll () {
        atomic {
            if (__init__ == 0u32) {
                let WSAData = WSADATA ();
                WSAStartup (2u16, &WSAData);
            }

            __init__ += 1u32;
        }
    }

    /**
     * It also needs to be cleaned up (when the last socket use is disposed)
     */
    def cleanSocketDll () {
        atomic {
            __init__ -= 1u32;
            if (__init__ == 0u32) {
                WSACleanup ();
            }
        }
    }        
}
