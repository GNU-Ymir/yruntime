/**
 * This modules provides some function giving information about the execution environment of program, e.g. username, workding directory, etc. 
 * @Authors: Emile Cadorel
 * @License: GPLv3
 * 
 */
mod std::env;

import etc::c::env, etc::c::memory;
import etc::runtime::env;
import std::fs::path;
import std::stream;
import std::conv;
import core::exception;

/**
 * Error thrown by function in this module when an error occurs
 */
pub class EnvironmentError over Exception {

    // The description of the error
    pub let msg : [c8];

    /**
     * @params: 
     *    - msg: the description of the error
     */
    pub self (msg : [c8]) with msg = msg {}

    impl stream::Streamable {
        pub over toStream (self, dmut stream : &StringStream) {
            self::super.toStream (alias stream);
        }
    }
    
}

/**
 * @returns: the list of arguments passed to the program.
 * @info: this arguments are traditionnaly passed to the main function
 * @example: 
 * ===
 * import std::env;
 * 
 *
 * fn main (args : [[c8]])
 *     throws &AssertError
 * {
 *    assert (env::args () == args);
 * }
 * ===
 */
pub fn args () -> [[c8]] {
    _yrt_get_main_args ()
}
   
/**
 * @returns: the current working directory path
 * @info: 
 * the path is empty if the current directory is invalid, possible explanation : 
 *   - not sufficiant rights to access current working dir
 *   - the current working dir does not exists
 */
pub fn currentDir () -> &Path {
    Path::new (_yrt_get_current_dir ())
}

/**
 * Change the working directory
 * @params: 
 *    - path: the path of the new current dir (relative to actual current dir, or an absolute path)
 * @throws: 
 *   - &EnvironmentError: if the operation failed (e.g. due to permission problems, directory does not exists, etc.)
 * @example: 
 * ===
 * import std::fs::path; // for Path
 * import std::env;
 *
 * setCurrentDir (Path::new ("/tmp/"s8));
 * assert (currentDir ().toStr () == "/tmp"s8);
 * ===
 */
pub fn setCurrentDir (path : &Path)
    throws &EnvironmentError
{
    if (chdir (toStringZ (path.toStr ())) != 0) {
        throw EnvironmentError::new ("failed to change working directory to : "s8 ~ path.toStr ());
    }    
}

/**
 * @returns: the content of an environment variable
 * @example: 
 * ===
 * import std::io; // for println
 * import std::env;
 * 
 * // Retreive the environment variable HOME
 * let home_dir = getVar ("HOME"s8);
 * 
 * // For the user alice
 * println (home_dir); // /home/alice
 * ===
 */
pub fn getVar (name : [c8])-> [c8] {
    let content = __pragma!trusted ({
        etc::c::env::getenv (toStringZ (name))
    });
    
    if (content is null) {
        ""s8
    } else {
        copy
            __pragma!trusted ({
                content.fromStringZ ()
            })
    }        
}

/**
 * Set the value of an environment variable.
 * @params: 
 *    - name: the name of the variable to set
 *    - value: the value to associate to the environment variable
 * @example: 
 * ===
 * import std::io; // for println
 * import std::env;
 * 
 * env::setVar ("KEY"s8, "VALUE"s8);
 * assert (env::getVar ("KEY"s8) == "VALUE"s8);
 * ===
 */
pub fn setVar (name : [c8], value : [c8]) {
    etc::c::env::setenv (toStringZ (name), toStringZ (value), 1);
}

/**
 * Remove an environment variable
 * @params: 
 *    - name: the name of the variable to remove
 * @example: 
 * ===
 * import std::io; // for println
 * import std::env;
 * 
 * env::setVar ("KEY"s8, "VALUE"s8);
 * assert (env::getVar ("KEY"s8) == "VALUE"s8);
 * 
 * env::removeVar ("KEY"s8);
 * assert (env::getVar ("KEY"s8) == ""s8 && !env::isVarSet ("KEY"s8));
 * ===
 */
pub fn removeVar (name : [c8]) {
    etc::c::env::unsetenv (toStringZ (name));
}

/**
 * @returns: `true` if the environment variable `name` is set
 * @example: 
 * ===
 * import std::io; // for println
 * import std::env;
 * 
 * env::setVar ("KEY"s8, "VALUE"s8);
 * assert (env::isVarSet ("KEY"s8));
 * 
 * env::removeVar ("KEY"s8);
 * assert (!env::isVarSet ("KEY"s8));
 * ===
 */
pub fn isVarSet (name : [c8])-> bool {
    let content = etc::c::env::getenv (toStringZ (name));
    content !is null
}

/**
 * @returns: the name of the current user
 * @example: 
 * ===
 * import std::io;  // for println
 * import std::env;
 *
 * // For the user alice
 * println (whoami ()); // alice 
 * ===
 */
pub fn whoami () -> [c8] {
    getVar ("USER"s8)
}

