mod std::env;

import etc::c::env, etc::c::memory;
import etc::runtime::env;
import std::fs::path;
import std::conv;
import core::exception;

/**
 * @returns: the list of arguments that are passed to the program
 * @info: this arguments are traditionnaly passed to the main function
 */
pub def args () -> [[c8]] {
    _yrt_get_main_args ()
}
   
/**
 * @returns: the current working directory path
 * @info: 
 * ================
 * the path is empty if the current directory is invalid, possible explanation : 
 *   - not sufficiant rights to access current working dir
 *   - the current working dir does not exists
 * ===============
 */
pub def currentDir () -> dmut &Path {
    Path::new (_yrt_get_current_dir ())
}


/**
 * @returns: the content of an environment variable
 */
pub def getEnv (name : [c8])-> [c8] {    
    let content = __pragma!trusted ({
        etc::c::env::getenv (name.ptr)
    });
    
    if (content is null) {
        ""s8
    } else {
        copy
            __pragma!trusted ({
                content.fromStringZ ()
            })
    }        
}

/**
 * @returns: the name of the current user
 */
pub def whoami () -> [c8] {
    getEnv ("USER"s8)
}

