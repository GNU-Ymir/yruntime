/**
 * This module implements basic function to manipulate local filesystem, such as creating directories, deleting files, etc.
 * @Authors: Emile Cadorel
 * @License: GPLv3
 */

mod std::fs::sys;

import core::exception;
import core::typeinfo;
import core::object;

import etc::runtime::errno;
import etc::runtime::env;
import etc::c::dirent;
import etc::c::files;
import etc::c::memory;

import std::io, std::stream;
import std::conv;

import std::fs::path;
import std::fs::iteration;
import std::time::instant;
import std::fs::errors;

/**
 * Create the directory at path 
 * @params: 
 *   - path: the path of the new directory, absolute or relative to cwd
 *   - recursive: if true, create the parent directories if they don't exists
 *   - permission: set the permission of the created directory (default: 0o775)
 * @throws:
 *   - FsError: if there was an error in the creation of the directory, cf FsErrorCode
 * @example: 
 * ========================
 * import std::fs::sys;
 * import std::fs::path; // for Path
 * 
 * createDir (Path::new ("./some/dir"s8));
 * assert (isDir (Path::new ("./some/dir"s8)));
 * 
 * // Creation of directory can be recursive 
 * createDir (Path::new ("./some/dir/and/some/sub/directories/"s8), recursive-> true);
 * assert (isDir (Path::new ("./some/dir/and/some/sub/directories/"s8)));
 *
 * // Permission of created directory can be defined
 * createDir (Path::new ("./some/dir/small_permissions"s8), permission-> 0o600);
 * assert (isDir (Path::new ("./some/dir/small_permissions"s8)));
 * ========================
 */
pub def createDir (path : &Path, recursive : bool = false, permission : i32 = 0o775)
    throws &FsError
{
    let parent = path.parent ();
    if (isDir (parent)) {
        let code = etc::c::dirent::mkdir (path.toStr ().toStringZ (), permission);
        if (code == -1) {
            throw FsError::new (errno ().to!(FsErrorCode) (), path.toStr ());
        }
    } else if (recursive) {
        {
            if (parent.toStr () != ""s8) {
                createDir (parent, recursive-> true, permission-> permission);
            }
        } catch {
            x : &FsError => {
                import std::conv;
                throw FsError::new (x.code, path.toStr ());
            }
        }
        etc::c::dirent::mkdir (path.toStr ().toStringZ (), permission);
    } else {
        throw FsError::new (FsErrorCode::PARENT_DONT_EXIST, path.parent ().toStr ());
    }
}


/**
 * Check for the existence of a directory
 * @params: 
 *    - path: the path to the directory to access, absolute or relative to cwd
 * @returns: 
 *     - true if the directory exists and is accessible
 *     - false if it does not exists or if it not a directory or current user does not have permission to access it
 * @example: 
 * ========================
 * import std::fs::sys;
 * import std::fs::path; // for Path
 * 
 * if isDir (Path::new ("./some/dir")) {
 *    println ("Directory exists");
 * } else {
 *    println ("Directory does not exists");
 * }
 * ========================
 */
pub def isDir (path : &Path)-> bool {
    let dir = opendir (path.toStr ().toStringZ ());
    let succ = dir !is null;
    if (succ) {
        closedir (dir);
    }
    succ
}

/**
 * Remove a directory at a given path location
 * @params: 
 *   - path: the path of the directory to remove
 *   - recursive: if true, remove the directory after removing all its content
 * @Warning: recursive deletion must be used very carefully
 * @throws: 
 *    - &FsError: 
 *          + the directory is not empty, (and the removing is not recursive)
 *          + the user lacks the permission
 *          + the path does not exists
 *          + the path is not a directory
 *          + other reasons
 * @example: 
 * ========================
 * import std::fs::sys;
 * import std::fs::path; // for Path
 * 
 * removeDir (Path::new ("./some/dir"));
 * assert (!isDir (Path::new ("./some/dir"s8)));
 * assert (isDir (Path::new ("./some"s8)));
 * ========================
 */
pub def removeDir (path : &Path, recursive : bool = false)
    throws &FsError
{
    if (isDir (path)) {
        if (recursive) {
            for i in readDir (path) {
                match i {
                    f : &FileEntry => { removeFile (f.getPath ()); }
                    d : &DirEntry => {
                        removeDir (d.getPath (), recursive-> true);                        
                    }
                    fs : &FsEntry => {
                        removeFsEntry (fs.getPath ());
                    }
                }
            }
        }
        
        if (etc::c::dirent::rmdir (path.toStr ().toStringZ ()) == -1) {
            throw FsError::new (errno ().to!(FsErrorCode) (), path.toStr ());
        }
    } else {
        throw FsError::new (FsErrorCode::PARENT_DONT_EXIST, path.toStr ());
    }
}


/**
 * Copy the content of a directory into another location
 * @params: 
 *    - src: the directory to copy
 *    - dst: the destination location
 *    - recursive: copy sub directories of srcrecursively
 *    - create: create the destination directory ? (if true, the creation is recursive)
 * @throws: 
 *   - FsError: 
 *      + The source directory does not exist
 *      + The destination directory does not exist, and `create` was set to false
 *      + Permission denied (either reading or writing)
 *      + other reasons
 * @example: 
 * =====================
 * import std::fs::sys;
 * import std::fs::path; // For Path
 * 
 * copyDir (Path::new ("./some/dir"s8), Path::new ("/tmp/some/other/dir"s8), recursive-> true, create-> true);
 * assert (isDir (Path::new ("/tmp/some/other/dir"s8)));
 * =====================
 */
pub def copyDir (src : &Path, dst : &Path, recursive : bool = false, create : bool = false)
    throws &FsError
{
    if isDir (src) {
        if (create && !isDir (dst)) { createDir (dst, recursive-> true); }
        else if !isDir (dst) { throw FsError::new (FsErrorCode::PARENT_DONT_EXIST, dst.toStr ()); }
        for i in readDir (src) {
            match i {
                f : &FileEntry => { copyFile (f.getPath (), dst.push (f.getPath ().removePrefix (src))); }
                d : &DirEntry => {
                    createDir (dst.push (d.getPath ().removePrefix (src)));
                    if (recursive) copyDir (d.getPath (), dst.push (d.getPath ().removePrefix (src)), recursive-> true, create-> create);
                }
                fs : &FsEntry => {
                    copyFsEntry (fs.getPath (), dst.push (fs.getPath ().removePrefix (src)));
                }
            }
        }
    } else {
        throw FsError::new (FsErrorCode::PARENT_DONT_EXIST, src.toStr ());
    }
}

/**
 * @returns: an iterator over the entries of a directory
 * @example:
 * ===
 * import std::fs::sys;
 *
 * // List entries of a directory
 * for entry in readDir (Path::new ("./some/dir"s8)) {
 *     println (entry);     
 * } 
 * ===
 */
pub def readDir (path : &Path)-> dmut &DirEntry
    throws &FsError
{
    if (isDir (path)) {
        return DirEntry::new (path);
    }
    
    throw FsError::new (errno ().to!(FsErrorCode) (), path.toStr ())
}


__version LINUX {
    
    /**
     * Create a temporary directory, and return its path
     * @params: 
     *    - root: the path of the parent temporary directory in which the directory will be created
     *    - prefix: prefix to add at the beginning of the name of the temp directory
     * @returns: the path of the created temporary directory
     */
    pub def tempDirectory (root : &Path = Path::new ("/tmp"s8), prefix : [c8] = ""s8)-> &Path
        throws &FsError
    {    
        let template = root.push (prefix ~ "XXXXXX"s8).toStr ();
        let res = mkdtemp(template.toStringZ ());
        if (res !is null) {
            {
                Path::new (res.fromStringZ ())
            }  catch {
                _ => throw FsError::new (FsErrorCode::IO_ERROR, root.toStr ());
            }
        } else throw FsError::new (errno ().to!(FsErrorCode) (), root.toStr ());
    }
}

__version WINDOWS {

    import std::conv;
    
    extern (C) def GetTempPathA (len : u32, dmut buf : &c8)-> u32;

    /**
     * Create a temporary directory, and return its path
     */
    pub def tempDirectory ()-> &Path
        throws &FsError
    {
        let dmut rootBuf : [c8] = ['\u{0}'c8 ; 255u32];
        let size = GetTempPathA (255u32, alias rootBuf.ptr);
        if (size == 0u32) throw FsError::new (FsErrorCode::IO_ERROR, ""s8);
        
        let mut i = 0;
        let dmut rootPath = Path::new (rootBuf[0u32 .. size], sep-> '\\'c8);
        loop {
            let aux = rootPath.push ("ymir_temp_"s8 ~ (i.to![c8] ()));
            if (!isDir (aux)) {
                createDir (aux);
                break aux;
            }
            
            i += 1;
        }
    }    
    
}


/**
 * Create a new file without openning it
 * @params: 
 *    - name: the absolute path of the file (or relative to the execution)
 * @throws: 
 *   - FsError: 
 *         + the file already exists
 *         + permission denied
 *         + path is invalid
 * @example: 
 * =================
 * import std::fs;
 * 
 * createFile (Path::new ("./some/dir/file.txt"s8));
 * assert (isFile (Path::new ("./some/dir/file.txt"s8));
 * =================
 */
pub def createFile (path : &Path)
    throws &FsError
{
    let f = etc::c::files::fopen (path.toStr ().toStringZ (), "w"s8.ptr);
    if (f is null) {
        throw FsError::new (errno ().to!(FsErrorCode) (), path.toStr ()) 
    }
    
    etc::c::files::fclose (f);
}


/**
 * @returns: the instant of last modification of a file
 * @throws: FsError, if the path does not refer to a file
 * @example: 
 * ============
 * import std::fs::sys;
 * import std::fs::path;
 *
 * let path1 = Path::new ("./some/dir/file.txt"s8);
 * let path2 = Path::new ("./some/dir/file2.txt"s8);
 * 
 * if (fileDate (path1) > fileDate (path2)) {
 *     println ("Path ", path2.toStr (), " is older than ", path1.toStr ());
 * }
 * ============
 */
pub def fileDate (path : &Path)-> std::time::instant::Instant
    throws &FsError
{
    let mut fileStat = etc::c::files::stat_t::init;
    let f = etc::c::files::stat (path.toStr ().toStringZ (), alias &fileStat);
    if (f != 0) {
        throw FsError::new (errno ().to!(FsErrorCode) (), path.toStr ());
    }

    Instant (fileStat.st_mtime, 0u64)
}

/**
 * Check the existence of a file.
 * @params: 
 *    - path: the path of the file, absolute or relative to cwd
 * @returns: 
 *    - true if the file exists and is a file
 *    - false if the file does not exists or is not a file, or the current user does not have permission to access it
 * @example: 
 * =================
 * import std::fs;
 *
 * if (isFile (Path::new ("./some/dir/file.txt"s8))) {
 *     println ("File exists");
 * } 
 * =================
 */
pub def isFile (path : &Path)-> bool {
    etc::c::files::access (path.toStr ().toStringZ (), AccessMode::F_OK) == 0
}

/**
 * Check wether a file exists and is writable by the current user.
 * @params: 
 *    - path: the path of the file, absolute or relative to cwd
 * @returns: true if the file exists and is writable
 * @example: 
 * =================
 * import std::fs;
 *
 * if (isWritable (Path::new ("./some/dir/file.txt")) {
 *     println ("File is writable");
 * } 
 * =================
 */
pub def isWritable (path : &Path)-> bool {
    etc::c::files::access (path.toStr ().toStringZ (), AccessMode::W_OK) == 0
}

/**
 * Check wether a file exists and is readable by the current user.
 * @params: 
 *    - path: the path of the file, absolute or relative to cwd
 * @returns: true if the file exists and is readable
 * @example: 
 * =================
 * import std::fs;
 *
 * if (isReadable (Path::new ("./some/dir/file.txt")) {
 *     println ("File is readable");
 * } 
 * =================
 */
pub def isReadable (path : &Path)-> bool {
    etc::c::files::access (path.toStr ().toStringZ (), AccessMode::R_OK) == 0
}

/**
 * Check wether a file exists and is executable by the current user.
 * @params: 
 *    - path: the path of the file, absolute or relative to cwd
 * @returns: true if the file exists and is executable
 * @example: 
 * =================
 * import std::fs;
 *
 * if (isExecutable (Path::new ("./some/dir/file.txt")) {
 *     println ("File is readable");
 * } 
 * =================
 */
pub def isExecutable (path : &Path)-> bool {
    etc::c::files::access (path.toStr ().toStringZ (), AccessMode::X_OK) == 0
}

/**
 * Remove a file from the file system
 * @params: 
 *    - path: the path of the file, absolute or relative to cwd
 * @throws: 
 *   - &FsError: 
 *       + the file does not exists
 *       + permission denied
 *       + this is not a file
 */ 
pub def removeFile (path : &Path)
    throws &FsError
{
    if (isFile (path)) {
        if unlink (path.toStr ().toStringZ ()) == -1 {
            throw FsError::new (errno ().to!(FsErrorCode) (), path.toStr ())    
        }
    } else {
        throw FsError::new (FsErrorCode::PERMISSION_DENIED, path.toStr ())
    }
}

/**
 * Copy a file to another file location.
 * @params: 
 *    - src: the path of the file to copy
 *    - dst: the path of the file created by the copy (path of the file, not of the parent directory)
 * @throws: 
 *   - &FsError: 
 *      + the src file does not exists
 *      + the dst file already exists
 *      + permission denied
 *      + this is not a file
 * @example:
 * ===
 * import std::fs::sys;
 *
 * assert (isFile (Path::new ("./some/dir/file.txt"s8)));
 * assert (isDir (Path::new ("./some/other/dir"s8)));
 * 
 * copyFile (Path::new ("./some/dir/file.txt"s8), Path::new ("./some/other/dir/copy.txt"s8));
 * assert (isFile (Path::new ("./some/other/dir/copy.txt"s8)));
 * ===
 */
pub def copyFile (src : &Path, dst : &Path)
    throws &FsError
{
    import std::fs::file;
    with dmut srcF = File::open (src) {
        with dmut dstF = File::create (dst, write-> true) {
            dstF:.write (srcF:.readAll ());
        }
    }
}   
    
/**
 * Remove an entry from the file system that is neither a directory nor a file (e.g. a symbolic link).
 * @params: 
 *    - path: the path of the fs entry to remove
 * @throws: 
 *   - FsError: 
 *       + the entry does not exists
 *       + permission denied
 *       + this is a file, or a dir
 */ 
pub def removeFsEntry (path : &Path)
    throws &FsError
{
    if (!isDir (path) && !isFile (path)) {
        if unlink (path.toStr ().toStringZ ()) == -1 {
            throw FsError::new (errno ().to!(FsErrorCode) (), path.toStr ())    
        }
    } else {
        throw FsError::new (FsErrorCode::PERMISSION_DENIED, path.toStr ())
    }
}


/**
 * Copy a filesystem entry that is neither a directory nor a file (e.g. a symbolic link).
 * @params: 
 *    - src: the path of the filesystem entry to copy
 *    - dst: the path of where to create the copy of the filesystem entry
 * @throws: 
 *    - FsError: 
 *       + the src does not exists
 *       + the dst already exists
 *       + permission denied
 *       + this is not a symbolic link
 *       + others
 */
pub def copyFsEntry (src : &Path, dst : &Path)
    throws &FsError
{
    if isReadable (dst) { throw FsError::new (FsErrorCode::ALREADY_EXISTS, dst.toStr ()); }
    __version LINUX {
        if !isDir (src) && !isFile (src) {
            let dmut buf = ['\u{0}'c8 ; 255us];
            if readlink (src.toStr ().toStringZ (), alias buf [].ptr, 255) == -1 {
                throw FsError::new (errno ().to!(FsErrorCode) (), src.toStr ());
            }
            
            if symlink (dst.toStr ().toStringZ (), buf [].ptr) == -1 {
                throw FsError::new (errno ().to!(FsErrorCode) (), src.toStr ());
            }
        }
    } else {
        src; dst;
    }

}

