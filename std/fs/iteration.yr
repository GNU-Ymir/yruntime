/**
 * This module implements iterators, to iterate through directories and files. 
 * @Authors: Emile Cadorel
 * @License: GPLv3
 * <hr>
 * @example: 
 * ===
 * // Iteration through the directory ./some/dir
 * for entry in fs::sys::readDir (Path::new ("./some/dir"s8)) {
 *     match entry {
 *         // path field is public, so it can be used in pattern deconstruction
 *         DirEntry (path-> p : &Path) => println ("Directory : ", p.toStr ());
 *         FileEntry (path-> p : &Path)-> println ("File : ", p.toStr ());
 *     }
 * }
 * ===
 */
mod std::fs::iteration;

import core::dispose;
import std::fs::errors;
import std::fs::path;
import std::io, std::stream;
import std::conv;
import etc::runtime::errno;
import etc::c::dirent;
import core::exception;

extern (C) def printf (c : &c8, ...);


/**
 * A FsEntry is a entry of a file system element, ancestor of DirEntry and FileEntry
 * A FsEntry is also used to represent unknwon entries 
 */
pub class FsEntry {

    // The path of the fs entry
    pub let path : &Path;

    /**
     * @params: 
     *    - path: the path of the fs entry (absolute or relative to the cwd).
     */
    pub self (path : &Path) with path = path {}
    
    impl std::stream::Streamable;
}

/**
 * A directory entry in the file system.
 */
pub class DirEntry over FsEntry {

    /**
     * Create a new dir entry from a given path.
     * @params:
     *     - path: the path of the direntry, (absolute or relative to the cwd).
     */
    pub self (path : &Path) with super (path) {}

    /**
     * Direntries are iterable. 
     * @example: 
     * ===
     * import std::fs::_;
     * 
     * /*
     *  * Verify that a directory contains a file named fName (recursively)
     * */
     * def exists (fName : [c8], dir : &DirEntry)-> bool
     *    throws &FsError
     * {
     *    for e in dir {
     *        match e {
     *            FileEntry (path-> p : _) => { 
     *                if p.file () == fName { return true; }
     *            }
     *            subDir : &DirEntry => {
     *                if (exists (fName, subDir)) return true;
     *            }
     *        }
     *    }
     *
     *    false
     * }
     * 
     * exists ("foo"s8, fs::sys::readDir (Path::new ("./some/dir"s8)));
     * ===
     */
    pub def begin (self)-> dmut &DirIterator {
        DirIterator::new (opendir (self.path.toStr ().toStringZ ()), self.path)
    }

    /**
     * @returns: the iterator to the end of the directory, to know when to stop the iteration.
     */
    pub def end (self)-> &DirIterator {
        DirIterator::new (null, self.path)
    }
    
    impl std::stream::Streamable;    
}

/**
 * A file entry in the file system
 * A file entry is not iterable, but can be used to open File (std::fs::file), and read, write or append content in it.
 * @example: 
 * =================
 * import std::fs::_;
 * 
 * // The following loop prints the content of all the file in a given directory (not recursive)
 * for entry in fs::sys::readDir (Path::new ("./some/dir"s8)) {
 *     match entry {
 *         f : &FileEntry => {
 *             // Open the file to read its content
 *             with dmut file = File::open (f.path) {
 * 
 *                 // print the content of the file (cf std::fs::file)
 *                 println (file:.readAll ());
 *             }
 *         }
 *     }
 * }
 * =================
 */
pub class @final FileEntry over FsEntry {

    /**
     * Create a new file entry from a given path.
     * @params: 
     *    - path: the path of the file entry (absolute or relative to cwd).
     */
    pub self (path : &Path) with super (path) {}

    
    impl std::stream::Streamable;    
}


__version LINUX {

    /**
     * A link entry in the file system.
     * @example: 
     * =================
     * import std::fs::_;
     * 
     * for entry in fs::sys::readDir (Path::new ("./some/dir"s8)); {
     *     match entry {
     *         l : &LinkEntry => {
     *             // the path of the link 
     *             println ("Link : ", l.path.toStr ()); 
     * 
     *             // The path pointed by the link
     *             println (l.follow ().toStr ());
     *         }
     *     }
     * }
     * =================
     */
    pub class @final LinkEntry over FsEntry {

        /**
         * Create a new link entry from a given path.
         * @params: 
         *     - path: the path of the link entry
         */
        pub self (path : &Path) with super (path) {}

        /**
         * Follow the link, and return the path
         * @returns: the path where the link leads
         * @throws: 
         *   - FsError: if the link is invalid
         * @warning: links can point to pathes that do not really exist. This is due to linux filesystem.
         */
        pub def follow (self)-> &Path
            throws &FsError
        {
            let dmut path : [c8] = ['\u{0}'c8 ; 256u32];
            let size = readlink (self.path.toStr ().toStringZ (), alias path.ptr, cast!i32 (path.len));
            if (size == -1) {
                throw FsError::new (errno ().to!(FsErrorCode) (), self.path.toStr ())        
            }
            __pragma!trusted ({ Path::new (path [0 .. size]) })
        }

        
        impl std::stream::Streamable;
        
    }

}

/**
 * Dir iterator, instantiated by DirEntry::begin, and used to iterate through the entries of a directory.
 */
class @final DirIterator {

    // The directory being read (C dir iteration)
    let mut _dir : &(void);

    // The path of the directory being iterated
    let _root : &Path;

    // The iterator on the directory (C dir iteration)
    let mut _curr : &(dirent);

    /**
     * @params: 
     *    - dir: the opendir handle
     *    - root: the path of the directory being iterated
     */
    pub self (dmut dir : &(void), root : &Path) with _dir = dir, _curr = null, _root = root {
        self:.next ();
    }

    /**
     * @returns: true if the iterators point to the same entry
     */
    pub def opEquals (self, o : &DirIterator) -> bool {
        self._dir is o._dir
    }

    /**
     * Advance the iterator to the next element.
     */
    pub def next (mut self)  {
        if (self._dir !is null) {
            self._curr = readdir (self._dir);
            if (self._curr is null) {
                self:.dispose ();
            } else {
                let c = __pragma!trusted ({
                    *self._curr
                });
                
                __version WINDOWS {
                    if (c.d_name.fromStringZ![c8] () == ".."s8 ||
                        c.d_name.fromStringZ![c8] () == "."s8)
                        self:.next ();
                } else {
                    match c.d_type {
                        DirEntryTypes::DT_DIR => { // ignore current and rewind dir
                            if (c.d_name.fromStringZ![c8] () == ".."s8 ||
                                c.d_name.fromStringZ![c8] () == "."s8)
                                self:.next ();
                        }
                    }
                }
            }
        } 
    }

    /**
     * @returns: the entry being pointed by the iterator.
     * @warning: panic if the iterator is invalid
     */
    pub def get {0} (self)-> &FsEntry {
        __pragma!trusted ({
            let c = *self._curr;            
            let path = self._root.push (c.d_name.fromStringZ![c8] ());
                        
            __version WINDOWS {
                if (isDir (path)) { DirEntry::new (path) }
                else if (isFile (path)) { FileEntry::new (path) }
                else { FsEntry::new (path) }
            } else {
                match c.d_type {
                    DirEntryTypes::DT_DIR => { DirEntry::new (path) }
                    DirEntryTypes::DT_REG => { FileEntry::new (path) }                
                    DirEntryTypes::DT_LNK => {
                        __version LINUX {
                            LinkEntry::new (path)
                        } else { FsEntry::new (path) }
                    }
                    _ => { FsEntry::new (path) }
                }
            }
        })
    }

    impl Disposable {

        pub over dispose (mut self) {
            if (self._dir !is null) {
                closedir (self._dir);
                self._dir = null;
            }
        }
        
    }

    /**
     * Not needed, if the iterator is used to iterate, but can be used
     * if the begin method is called outside a for loop (which is totally deprecated, but not easy to ensure)
     */
    __dtor (mut self) {
        self:.dispose ()
    }
       
}
