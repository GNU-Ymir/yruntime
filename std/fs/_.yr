/**
 * Module that imports every filesystem modules : 
 *    - <a href="./std_fs_errors.html">errors</a>
 *    - <a href="./std_fs_file.html">file</a>
 *    - <a href="./std_fs_iteration.html">iteration</a>
 *    - <a href="./std_fs_path.html">path</a>
 *    - <a href="./std_fs_sys.html">sys</a>
 * 
 * <br>
 * @Authors: Emile Cadorel
 * @License: GPLv3
 * <hr>
 *
 * Filesystem modules are used to manage local filesystem, such as directories, files and symbolic links.
 * @example:
 * ===
 * import std::fs::_;
 * 
 * // Fs provides a Path class to manage paths (cf. std::fs::path)
 * let p = Path::new ("/some/dir/").push ("some/other/dir").push ("some_file.txt");
 * 
 * // It provides filesystem management (cf. std::fs::sys)
 * createDir (p.parent (), recursive-> true)?; 
 * 
 * // It also provide file management (std::fs::file)
 * // file are disposable, so close automatically in with construction
 * with dmut file = File::create (p, write-> true) {
 *      // to write, read and append in text mode
 *      file:.write ("Hello World !"s8); 
 *      
 *      // Or in binary mode
 *      file:.writeBytes ([8u8, 9u8, 10u8]);
 * } catch {
 *    // cf. std::fs::error
 *    err : &FsError => {  // If the file failed to be created, or written
 *        println (err);
 *    } 
 * }
 * 
 * // Filesystem management can iterates through directories (cf. std::fs::iteration)
 * for entry in readDir (p.parent ()) {
 *     println (entry);
*  }
 * ===
 */

mod std::fs::_;

pub import std::fs::errors;
pub import std::fs::file;
pub import std::fs::iteration;
pub import std::fs::path;
pub import std::fs::sys;
