/**
 * This module implements the class File, that is used to access an open file in the filesystem. A file can be read and written depending on the options specified when opening it. Files are disposable, meaning that `with` construction should be preferred. When the file is not disposed, it is closed automatically when the garbage free the memory associated with the instance. 
 * @Authors: Emile Cadorel
 * @License: GPLv3
 * 
 * <hr>
 * 
 * @example: 
 * Create a file and write a string in it : 
 * ===
 * import std::fs::file;
 * import std::file::path; // For Path
 * 
 * // Create a file named "foo.txt", and write something in it
 * with dmut file = File::create (Path::new ("foo.txt"s8), write-> true) {
 *     file:.write ("Hello World!"s8); 
 * } catch {
 *     err : &FsError => { // creation failed for some reason
 *         println (err);
 *     }
 * }
 * ===
 * <br>
 * Open an existing file and read its content : 
 * ===
 * import std::fs::file;
 * import std::fs::path; // For Path
 * 
 * let content = {
 *     with dmut file = File::open (Path::new ("foo.txt"s8)) {
 *         file:.readAll () // read the all the content of the file
 *     } catch {
 *        // File does not exist or permission denied
 *        err : &FsError => { ""s8 } // return an empty string
 *     }
 * };
 * 
 * println (content);
 * ===
 * 
 * <br>
 * Open an existing file and append content to it : 
 * ===
 * import std::fs::file;
 * import std::fs::path; // For Path
 * 
 * with dmut file = File::open (Path::new ("foo.txt"s8), append-> true) {
 *     file:.write ("Appending content"s8);
 * } catch {
 *     // File does not exist or permission denied
 *     err : &FsError => { 
 *         println (err);
 *     }
 * }
 * ===
 */

mod std::fs::file;

import core::object, core::typeinfo, core::exception;
import core::duplication, core::array, core::dispose;

import std::conv;
import std::io;
import std::fs::path;
import std::fs::errors;
import std::fs::sys;

import etc::c::files;
import etc::runtime::errno;

/**
 * This class is a reference to a file in the file system.
 */
pub class @final File {

    prv let dmut _handle : &(void) = null;
    
    prv let mut _filename : [c8];

    prv let _read : bool;

    prv let _write : bool;

    prv let _append : bool;    
    
    /**
     * Create a file in the filesystem.
     * @params: 
     *    - path: the path of the file to create
     *    - read: if true open the file in read mode (can be composed with write or append)
     *    - write: if true open the file in write mode (can be composed with read)
     *    - read: if true open the file in append mode (can be composed with read) 
     * @throws: 
     *     - &FsError, if the file failed to be created or opened.
     * @info: if the file already existed, it will be erased.
     */
    pub self create (path : &Path, read : bool = true, write : bool = false, append : bool = false)
        with _filename = path.toStr (),
             _read = read,
             _write = write && !append,
             _append = append
        throws &FsError
    {
        std::fs::sys::createFile (path);
        self:.open ();
    }
    
    /**
     * Open an existing file in the file system.
     * @params: 
     *    - path: the path of the file to create
     *    - read: if true open the file in read mode (can be composed with write or append)
     *    - write: if true open the file in write mode (can be composed with read)
     *    - read: if true open the file in append mode (can be composed with read)
     * @throws: 
     *    - &FsError, if the file does not exists, or current user does not have the proper permissions
     * @info: if append and written are set to true, append is prioritized
     */
    pub self open (path : &Path, read : bool = true, write : bool = false, append : bool = false)
        with _filename = path.toStr (),
             _read = read,
             _write = write && !append,
             _append = append
        throws &FsError
    {
        if fs::sys::isDir (path) || !fs::sys::isReadable (path) {
            throw FsError::new (FsErrorCode::NOT_A_FILE, self._filename);       
        }
        self:.open ();
    }

    /**
     * Open the file 
     */
    prv fn open (mut self)
        throws &FsError
    {
        let mode = self.createMode ();
        self._handle = etc::c::files::fopen ((self._filename.toStringZ ()), mode.ptr);
        if (self._handle is null) {
            throw FsError::new (fs::errors::to!(FsErrorCode) (errno ()), self._filename);               
        }
    }

    /**
     * Read all the content contained in the file from the current cursor position.
     * @throws: 
     *   - &FsError: if the file is not opened, or not readable.
     * @example: 
     * ==============
     * import std::fs::file, std::fs::path; 
     * 
     * // Create a file in read and write mode (read is set by default)
     * with dmut fs = File::create (Path::new ("foo.txt"s8), write-> true) {
     *     fs:.write ("Hello World !"s8);
     * 
     *     // Put the cursor to the beginning of the file
     *     fs:.seek (0u32);
     * 
     *     let res = fs:.readAll ();
     *     assert (res == "Hello World !"s8); 
     * } catch {
     *      err : _ => { 
     *          println (err);
     *      }
     * }
     * ==============
     */
    pub fn readAll (mut self) -> dmut [c8]
        throws &FsError
    {
        if (self._handle is null) {
            throw FsError::new (FsErrorCode::FILE_CLOSED, self._filename);
        } else if (!self._read) {
            throw FsError::new (FsErrorCode::NOT_READABLE, self._filename);
        }
        
        if (!etc::c::files::feof (self._handle)) {
            let cursor = etc::c::files::ftell (self._handle);
            etc::c::files::fseek (self._handle, 0u32, SeekWhence::SEEK_END);
            let len = etc::c::files::ftell (self._handle) - cursor;
            etc::c::files::fseek (self._handle, cursor, SeekWhence::SEEK_SET);
            
            if (len != 0u32) {
                let dmut res = core::duplication::allocArray!(c8) (cast!usize (len));
                etc::c::files::fread (alias cast!(&void) (res.ptr), cast!(u32) (sizeof (c8)), cast!(u32) (len), alias self._handle);
                
                return alias res
            }
        }
        
        []
    }

    /**
     * Read the content of a file until the delimiter text if found or EOF.
     * @params: 
     *    - delim: the delimiter to find in the file content to stop the reading.
     * @throws: 
     *   - &FsError: if the file is not opened, or not readable
     * @example: 
     * ==============
     * import std::fs::file, std::fs::path;
     * 
     * with dmut fs = File::create (Path::new ("foo.txt"s8), write-> true) {
     *     fs:.write ("Hello World !"s8);
     * 
     *     // Put the cursor to the begin of the file
     *     fs:.seek (0u32);
     * 
     *     let res = fs:.readUntil ("Wor"s8);
     *     assert (res == "Hello Wor"s8);
     *
     *     let end = fs:.readAll ();
     *     assert (end == "ld !"s8); 
     * } catch {
     *      err : _ => { 
     *          println (err);
     *      }
     * }
     * ==============
     */
    pub fn readUntil (mut self, delim : [c8])-> dmut [c8]
        throws &FsError
    {
        if (self._handle is null) {
            throw FsError::new (FsErrorCode::FILE_CLOSED, self._filename);
        } else if (!self._read) {
            throw FsError::new (FsErrorCode::NOT_READABLE, self._filename);
        }
        
        import std::collection::vec;
        let dmut res = Vec!(mut c8)::new ();
        let mut current = 0u64;
        
        while (!etc::c::files::feof (self._handle) && current < delim.len) {
            let u : u32 = etc::c::files::fgetc (alias self._handle);
            if (u >= u8::max) break {} // feof is not triggered before trying to read it, so this u can be eof == 256

            let c = cast!(c8) (cast!(u8) (u));
            res:.push (c);
            {
                if (delim [current] == c) { current += 1u64; }
                else { current = 0u64; }
            }
        }
        
        let mut aux : [mut c8] = core::duplication::allocArray!c8 (res.len ());
        core::duplication::memCopy!c8 (res[], alias aux);
        
        return alias aux;
    }
    
    /**
     * Write text in a file.
     * @params: 
     *    - text: the text to write in the file.
     * @throws: 
     *   - &FsError: if the file is not opened, or not writable
     * @example: 
     * ===
     * import std::fs::file, std::fs::path;
     * 
     * with dmut file = File::open (Path::new ("foo.txt"s8), write-> true) {
     *      file:.write ("Some text"s8);
     * } catch {
     *      err : &FsError => { 
     *          println (err);
     *      }
     * }
     * ===
     */
    pub fn write (mut self, text : [c8]) -> void
        throws &FsError
    {
        if (self._handle is null) {
            throw FsError::new (FsErrorCode::FILE_CLOSED, self._filename);
        } else if (!self._write && !self._append) {
            throw FsError::new (FsErrorCode::NOT_WRITABLE, self._filename);
        }
        
        etc::c::files::fwrite (cast!(&void) (text.ptr), cast!(u32) (sizeof (c8)), cast!(u32) (text.len), alias self._handle);        
    }
    

    /**
     * Read all content contained in the file from the current cursor position in byte mode.
     * @throws: 
     *   - FsError: if the file is not opened, or not readable
     * @example: 
     * ==============
     * import std::fs::file, std::fs::path;
     * 
     * with dmut fs = File::create (Path::new ("foo.txt"s8), write-> true) {
     *     fs:.write ("Hello World !"s8);
     *     fs:.seek (0u32);
     * 
     *     let res : [u8] = fs:.readBytesAll ();
     *     assert (res == [72u8, 101u8, 108u8, 108u8, 111u8, 32u8, 87u8, 111u8, 114u8, 108u8, 100u8, 32u8, 33u8]);
     * } catch {
     *      err : _ => { 
     *          println (err);
     *      }
     * }
     * ==============
     */
    pub fn readBytesAll (mut self) -> dmut [u8]
        throws &FsError
    {
        if (self._handle is null) {
            throw FsError::new (FsErrorCode::FILE_CLOSED, self._filename);
        } else if (!self._read) {
            throw FsError::new (FsErrorCode::NOT_READABLE, self._filename);
        }
        
        if (!etc::c::files::feof (self._handle)) {
            let cursor = etc::c::files::ftell (self._handle);
            etc::c::files::fseek (self._handle, 0u32, SeekWhence::SEEK_END);
            let len = etc::c::files::ftell (self._handle) - cursor;
            etc::c::files::fseek (self._handle, cursor, SeekWhence::SEEK_SET);
            
            if (len != 0u32) {
                let dmut res = core::duplication::allocArray!(u8) (cast!(usize) (len));
                etc::c::files::fread (alias cast!(&void) (res.ptr), cast!(u32) (sizeof (u8)), cast!(u32) (len), alias self._handle);
                
                return alias res
            }
        }
        
        []
    }

    /**
     * Read the content of a file until the delimiter bytes is found or EOF.
     * @params: 
     *    - delim: the delimiter to find in the file content to stop the reading.
     * @throws: 
     *   - FsError: if the file is not opened, are not readable
     * @example: 
     * ==============
     * import std::fs::file, std::fs::path;
     * 
     * with dmut fs = File::create (Path::new ("foo.txt"s8), write-> true) {
     *     fs:.write ("Hello World !"s8);
     *     fs:.seek (0u32);
     * 
     *     let res : [u8] = fs:.readBytesUntil ([87u8, 111u8, 114u8]);
     *     assert (res == [72u8, 101u8, 108u8, 108u8, 111u8, 32u8, 87u8, 111u8, 114u8]);
     * 
     *     let end = fs:.readAll ();
     *     assert (end == "ld !"s8);
     * } catch {
     *      err : _ => { 
     *          println (err);
     *      }
     * } 
     * ==============
     */
    pub fn readBytesUntil (mut self, delim : [u8])-> dmut [u8]
        throws &FsError
    {
        if (self._handle is null) {
            throw FsError::new (FsErrorCode::FILE_CLOSED, self._filename);
        } else if (!self._read) {
            throw FsError::new (FsErrorCode::NOT_READABLE, self._filename);
        }
        
        import std::collection::vec;
        let dmut res = Vec!(u8)::new ();
        let mut current = 0u64;
        
        while (!etc::c::files::feof (self._handle) && current < delim.len) {
            let u : u32 = etc::c::files::fgetc (alias self._handle);
            if (u >= u8::max) break {} // feof is not triggered before trying to read it, so this u can be eof == 256

            let c = cast!(u8) (u);
            res:.push (c);
            {
                if (delim [current] == c) { current += 1u64; }
                else { current = 0u64; }
            }
        }
        
        let mut aux : [mut u8] = core::duplication::allocArray!u8 (res.len ());
        core::duplication::memCopy!u8 (res[], alias aux);
        
        return alias aux;
    }
    
    /**
     * Write some bytes to a file.
     * @params: 
     *    - text: the bytes to write in the file
     * @throws: 
     *   - FsError: if the file is not opened, are not writable
     * @example: 
     * ===
     * import std::fs::file, std::fs::path;
     * 
     * with dmut file = File::open (Path::new ("foo.txt"s8), write-> true) {
     *      file:.writeBytes ([83u8, 111u8, 109u8, 101u8, 32u8, 84u8, 101u8, 120u8, 116u8]);
     * } catch {
     *      err : &FsError => { 
     *          println (err);
     *      }
     * }
     * ===
     */
    pub fn writeBytes (mut self, text : [u8]) -> void
        throws &FsError
    {
        if (self._handle is null) {
            throw FsError::new (FsErrorCode::FILE_CLOSED, self._filename);
        } else if (!self._write && !self._append) {
            throw FsError::new (FsErrorCode::NOT_WRITABLE, self._filename);
        }
        
        etc::c::files::fwrite (cast!(&void) (text.ptr), cast!(u32) (sizeof (u8)), cast!(u32) (text.len), alias self._handle);        
    }
    
    
    /**
     * Move the position of the cursor of the file
     * @info: the cursor position is relative to the beginning of the file in number of bytes.
     * @throws: 
     *   - FsError: if the file is not opened
     */
    pub fn seek (mut self, cursor : u32)-> void
        throws &FsError
    {
        if (self._handle is null) {
            throw FsError::new (FsErrorCode::FILE_CLOSED, self._filename);
        }
        etc::c::files::fseek (self._handle, cursor, SeekWhence::SEEK_SET);
    }

    /**
     * Tell the position of the cursor in the file relative to the beginning of the file in number of bytes.
     * @throws: 
     *   - FsError: if the file is not opened
     */
    pub fn tell (self)-> u32
        throws &FsError
    {
        if (self._handle is null) {
            throw FsError::new (FsErrorCode::FILE_CLOSED, self._filename);
        }
        etc::c::files::ftell (self._handle)
    }

    /**
     * @returns: the len of the file (from beginning to end) in number of bytes.
     */
    pub fn len (self)-> u32
        throws &FsError
    {
        let cursor = self.tell ();
        fseek (self._handle, 0u32, SeekWhence::SEEK_END);
        let len = self.tell ();
        fseek (self._handle, cursor, SeekWhence::SEEK_SET);
        len
    }
    
    /**
     * Close the file.
     * @info: if the file was not open, this method does nothing
     */
    pub fn close (mut self) {
        if (self._handle !is null) {
            fclose (alias self._handle);
            self._handle = null;
        }
    }

    impl core::dispose::Disposable {
        
        /**
         * Close the file
         * @info: if the file was not open, this method does nothing
         */
        pub over dispose (mut self) -> void {
            self:.close ();
        }
    }

    /**
     * Create the mode of reading 
     */
    prv fn createMode (self)-> [c8] {
        if (self._write) return "r+"s8;
        if (self._read && self._append) return "a+"s8;
        if (self._append) return "a"s8;
        
        return "r"s8;
    }

    /**
     * Close the file if the user forgot
     * @warning: 
     * =================
     * because we don't know when of even if the destructor will be called, 
     * this must be used as a last resort, it is always better to close the files 
     * =================
     */
    __dtor (mut self) {
        self:.close ();
    }    
}
