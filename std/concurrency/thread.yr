mod std::concurrency::thread;

import core::typeinfo;

import etc::runtime::thread;
import std::io;
import std::concurrency::pipe;

pub struct
| mut id : usize
| pipe : &ThreadPipe
 -> Thread;


/**
 * Spawn the function inside of a thread
 * @warning: This type of thread are heavy thread
 * @info: to spawn light thread, use std::concurrency::future module instead
 * @params: 
 *    - func: the function to run inside a thread
 * 
 * @example: 
 * ============
 * import std::io;
 * import std::concurrency::thread;
 * import std::any;
 *
 * def thread_func (th : Thread) -> void {
 *   let msg = th.pipe.read ();
 *   match msg {
 *      x : &Some!{i32} => {
 *          println ("Ping : ", x);
 *          th.pipe.write (x.unwrap () + 19);
 *      }
 *   }
 * }
 *
 * def main () {
 *   let th = spawn (&thread_func);
 *   th.pipe.write (23);
 *   println ("Pong : ", th.pipe.read ());
 *   th.join ();
 * }
 * ============
 */
pub def spawn (func : fn (Thread) -> void) -> Thread {
    let dmut th = internal::FnThreadLauncher::new (func);    
    Runtime!(&internal::FnThreadLauncher)::_yrt_thread_create (alias &(th.th_content.id), null, &internal::thread_fn_main, th);
    th.th_content
}

/**
 * Spawn a function from a closure inside a thread
 * @warning: This type of thread are heavy thread
 * @info: to spawn light thread, use std::concurrency::future module instead
 * @params: 
 *    - func: the function to run inside a thread
 * 
 * @example: 
 * ==========
 * import std::box;
 * 
 * let dmut i = Box::new (0); // a box is a reference, so it's modification will be visible from a closure
 * let th = spawn (move |_| => {
 *      loop {
 *         println ("I : ", i.get ()); // accessible by closure
 *         if (i.get () == 1) break {}
 *      }
 * });
 * 
 * i:.set (1);
 * th.join ();
 * ==========
 */
pub def spawn (func : dg (Thread)-> void)-> Thread {
    let dmut th = internal::DgThreadLauncher::new (func, true);
    Runtime!(&internal::DgThreadLauncher)::_yrt_thread_create (alias &(th.th_content.id), null, &internal::thread_dg_main, th);
    th.th_content
}


/**
 * Spawn a thread by does not create pipe description
 */
pub def spawnNoPipe (func : dg (Thread)-> void)-> Thread {
    let dmut th = internal::DgThreadLauncher::new (func, false);
    Runtime!(&internal::DgThreadLauncher)::_yrt_thread_create (alias &(th.th_content.id), null, &internal::thread_dg_main, th);
    th.th_content
}


/**
 * Wait the end of execution of a thread
 * @params: 
 *    - th: the thread to wait
 * @example: 
 * =============
 * let x = spawn (|_| => {
 *     for i in 0 .. 1_000_000 {
 *         println (i);
 *     }
 * });
 * 
 * x.join ();
 * println ("Printed a million times already !");
 * =============
 */
pub def join (th : Thread) -> void {
    _yrt_thread_join (th.id, null);           
}

/**
 * Kill a running thread
 * @params: 
 *    - th: the thread to kill
 * @example: 
 * ==============
 * let x = spawn (|_| => {
 *    loop {
 *       println ("Looping forever?");
 *    }
 * });
 * x.kill ();
 * println ("I guess not!");
 * ==============
 */
pub def kill (th : Thread) -> void {
    _yrt_thread_cancel (th.id);           
}

mod Runtime {class T} {
    pub extern (C) def _yrt_thread_create (dmut id : &usize, attr : &void, func : fn (T)-> void, data : T)-> i32;
}

mod internal { 

    /**
     * This function is used to run a thread in a runtime created
     * thread We cannot directly give the closure of run, for obvious
     * reason, this function is a proxy that perform a sort of closure
     * on the thread
     */
    pub def thread_fn_main (actor : &FnThreadLauncher) -> void {
        actor.func (actor.th_content);
    }

    /**
     * A thread is a sequence of instruction that are managed independently
     * They are used to perform asynchronus operation
     */
    pub class @final FnThreadLauncher {

        // The id and the pipe to communicate with the spawned thread
        pub let dmut th_content : Thread = Thread (0us, ThreadPipe::new ());

        // The function that is launch for the thread
        pub let func : fn (Thread)-> void;
        
        pub self (func: fn (Thread)-> void) with func = func {}
            
    }

    /**
     * This function is used to run a thread in a runtime created
     * thread We cannot directly give the closure of run, for obvious
     * reason, this function is a proxy that perform a sort of closure
     * on the thread
     */
    pub def thread_dg_main (actor : &DgThreadLauncher) -> void {
        actor.func (actor.th_content);
    }

    /**
     * A thread is a sequence of instruction that are managed independently
     * They are used to perform asynchronus operation
     */
    pub class @final DgThreadLauncher {

        // The id and the pipe to communicate with the spawned thread
        pub let dmut th_content : Thread = Thread (0us, ThreadPipe::new ());

        // The function that is launch for the thread
        pub let func : dg (Thread)-> void;
                
        pub self (func: dg (Thread)-> void, pipes : bool)
            with th_content = Thread (0us, ThreadPipe::new (pipes)), func = func {}
            
    }

    
}

