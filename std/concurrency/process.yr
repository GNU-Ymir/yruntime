/**
 * This module implements the `SubProcess` class, that is used to spawn sub processes.
 * @Authors: Emile Cadorel
 * @License: GPLv3
 * <hr>
 * @example: 
 * ===
 * // Spawn a sub process that run the ls command in the directory /path/to/print
 * with dmut proc = SubProcess::run ("ls"s8, ["-la"s8], cwd-> Path::new ("/path/to/print"s8)) {
 *      // Wait the end of the proc
 *      proc:.wait ();
 * 
 *      // Print the stdout of the subprocess
 *      println (proc:.stdout ():.read ());
 * }
 * ===
 */

mod std::concurrency::process;

import std::collection::vec;
import std::io;

import core::dispose;
import core::typeinfo;
import core::exception;
import std::stream;
import etc::c::stdio;
import std::fs::path;
import std::conv;
import std::concurrency::thread;
import etc::c::files;

__version LINUX {
    
    import etc::runtime::gc;

    extern (C) fn getpgid ()-> i32;
    extern (C) fn dup2 (stream : i32, type : u32)-> i32;
    extern (C) fn _yrt_print_error (format : &(c8), ...);
    extern (C) fn fork ()-> u32;
    extern (C) fn execvp (cmd : &c8, args : &(&c8))-> i32;
    extern (C) fn _yrt_exit (i : i32);
    extern (C) fn waitpid (pid : u32, dmut status : &i32, ig : i32);
    extern (C) fn kill (pid : u32, sig : i32)-> i32;
    extern (C) fn chdir (path : &c8)-> i32;
    extern (C) fn printf (c : &c8, ...);

    mod allocMod {T} {
        pub extern (C) fn malloc (size : u32)-> dmut T;
    }


    extern (C) fn memcpy (_ : &c8, _ : &c8, size : usize)-> void;
    extern (C) fn free (a : &void);
    extern (C) fn GC_is_disabled()-> i32;

    /**
     * SubProcess class running a command or a program in a given directory. 
     * @info: `SubProcess` are disposable, so it is a good practice to put them in with blocks.
     */
    pub class @final SubProcess {

        // The command to run
        let cmd : [c8];

        // The list of argument passed to the command line
        let args : [[c8]];

        // The path of the execution of the command
        let cwd : [c8];

        // The pid of the command
        let mut pid : u32 = 0u32;

        let _redirectOut : bool = true;

        let _redirectIn : bool = true;

        let _redirectErr : bool = true;

        // The input pipe of the command
        let dmut _stdin = IOPipe::new ();

        // The output pipe of the command
        let dmut _stdout = IOPipe::new ();

        // The error pipe of the command        
        let dmut _stderr = IOPipe::new ();

        /**
         * Run a process in parallel of this process execution
         * @params: 
         *     - cmd: the command to run
         *     - args: the arguments to pass to the command
         *     - cwd: the path in which the command will be ran (Current Working Directory)
         */
        pub self run (cmd : [c8], args : [[c8]], cwd : &Path = Path::new ("."), redirectStdout : bool = true, redirectStderr : bool = true, redirectStdin : bool = true)
            with cmd = cmd, args = args, cwd = cwd.toStr (), _redirectErr = redirectStderr, _redirectIn = redirectStdin, _redirectOut = redirectStdout
        {
            self:.run ();
        }

        /**
         * Run a process in parralel of this process execution
         * @params: 
         *    - path: the path of the program to execute
         *    - args: the argument to pass to the program
         *    - cwd: the path in which the command will be ran (Current Working Directory)
         */
        pub self run (path : &Path, args : [[c8]], cwd : &Path = Path::new ("."), redirectStdout : bool = true, redirectStderr : bool = true, redirectStdin : bool = true)
            with self (path.toStr (), args, cwd-> cwd, redirectStdout -> redirectStdout, redirectStdin-> redirectStdin, redirectStderr-> redirectStderr)
        {}
        
        prv fn run (mut self) {
            _yrt_disable_GC ();
            self.pid = fork (); // if nothing is written in the fork process the pages are not copied
            // Thus fork is lightweight
            
            if (self.pid == 0u32) {
                self:.child ()
            } else {
                _yrt_enable_GC ();
            }

            if (self._redirectOut) {
                self._stdout:.opipe ():.dispose ();
                self._stdout:.ipipe ().setNonBlocking ();
            }

            if (self._redirectIn) {
                self._stdin:.ipipe ():.dispose ();
                self._stdin:.opipe ().setNonBlocking ();
            }

            if (self._redirectErr) {
                self._stderr:.opipe ():.dispose ();
                self._stderr:.ipipe ().setNonBlocking ();
            }
        }

        prv fn child (mut self) {
            self._stderr:.opipe ().setNonBlocking ();
            self._stdout:.opipe ().setNonBlocking ();    

            if (self._redirectOut) {
                close (cast!i32 (STDOUT_FILENO));
                dup2 (self._stdout:.opipe ().getHandle (), STDOUT_FILENO);
                self._stdout:.dispose ();
            }
            if (self._redirectErr) {
                close (cast!i32 (STDERR_FILENO));
                dup2 (self._stderr:.opipe ().getHandle (), STDERR_FILENO);
                self._stderr:.dispose ();
            }

            if (self._redirectIn) {
                close (cast!i32 (STDIN_FILENO));
                dup2 (self._stdin:.ipipe ().getHandle (), STDIN_FILENO);
                self._stdin:.dispose ();
            }

            __pragma!trusted ({
                let dmut res = allocMod!{&(&c8)}::malloc (cast!u32 (sizeof (&c8) * (self.args.len + 2us)));
                *res = allocMod!{&c8}::malloc (cast!u32 (sizeof (c8) * self.cmd.len + 1us));
                memcpy (*res, self.cmd.ptr, self.cmd.len);
                *((*res) + self.cmd.len) = '\u{0}'c8;
                
                for i in 0us .. self.args.len {
                    *(res + (i + 1us) * sizeof (&c8)) = allocMod!{&c8}::malloc (cast!u32 (sizeof (c8) * self.args [i].len + 1us));
                    memcpy (*(res + (i + 1us) * sizeof (&c8)), self.args [i].ptr, self.args [i].len);
                    *(*(res + (i + 1us) * sizeof (&c8)) + self.args [i].len) = '\u{0}'c8;
                };

                *(res + (self.args.len + 1us) * sizeof (&c8)) = null;

                let dmut cwd = allocMod!{&c8}::malloc (cast!u32 (sizeof (c8) * (self.cwd.len + 1us)));
                memcpy (cwd, self.cwd.ptr, self.cwd.len + 1us);
                *(cwd + self.cwd.len) = '\u{0}'c8;
                
                chdir (cwd);

                printf ("Calling execvp:"s8.ptr);
                let out = execvp (*res, res);
                printf ("Res execvp%d\n"s8.ptr, out);
                if (out == -1) {
                    _yrt_print_error (("execvp () failed"s8).ptr);            
                }
            });        

            
            _yrt_exit (0);
        }

        /**
         * @returns: the input pipe of the subprocess
         * @example: 
         * ===
         * with dmut prc = SubProcess::run ("tee"s8, ["out.txt"s8]) {
         *     prc:.stdin ():.write ("Hello \n"s8);
         *     // close the input pipe, so the sub process does not wait for further inputs
         *     prc:.stdin ():.dispose (); 
         * 
         *     println (prc:.wait ()); // wait the end of the sub process
         *     println (prc:.stdout ():.read ());  // print Hello \n
         * }  
         * ===
         */
        pub fn stdin (mut self) -> dmut &OPipe {
            alias self._stdin:.opipe ()
        }

        /**
         * @returns: the output pipe of the process
         * @example: 
         * ===
         * with dmut prc = SubProcess::run ("ls"s8, ["-la"s8]) {
         *     println (prc:.wait ()); // wait the end of the sub process
         *     println (prc:.stdout ():.read ());  // print the list of file and directory in the pwd
         * }  
         * ===
         */
        pub fn stdout (mut self)-> dmut &IPipe {
            alias (self._stdout:.ipipe ())
        }

        /**
         * @returns: the pipe connected to the error pipe of the process
         * @example: 
         * ===
         * with dmut prc = SubProcess::run ("ls"s8, ["/root/"s8]) {
         *     println (prc:.wait ()); // wait the end of the sub process
         *     println (prc:.stderr ():.read ());  // ls: cannot open directory '/root/': Permission denied
         * }  
         * ===
         */
        pub fn stderr (mut self)-> dmut &IPipe  {
            alias (self._stderr:.ipipe ())
        }

        /**
         * @returns: true if the subprocess is finished
         * @info: 
         * this function return immediately
         */
        pub fn isFinished (self)-> bool {
            waitpid (self.pid, null, 1);
            if (kill (self.pid, 0) == -1) return true;

            return false;                
        }

        /**
         * Wait for the end of the subprocess
         * @returns: the return code of the subprocess
         */
        pub fn wait (mut self)-> i32 {
            let mut status = 0i32;
            self._stdin:.dispose ();
            waitpid (self.pid, alias &status, 0);
            return status;
        }

        impl core::dispose::Disposable {

            pub over dispose (mut self) {
                self._stdin:.opipe ():.dispose ();
                self._stdout:.ipipe ():.dispose ();
                self._stderr:.ipipe ():.dispose ();
            }
            
        }

        impl std::stream::Streamable {
            pub over toStream (self, dmut stream : &StringStream) {
                stream:.write (typeof (self)::typeid, "("s8, self.cmd, " "s8, self.args, ", cwd = "s8, self.cwd, ")"s8);
            }
        }
        
    }
}

__version WINDOWS {
    
    import etc::c::files;

    extern (C) fn CreateProcessA (appName : &c8, cmdLine : &c8, processAttr : &void, threadAttr : &void, inheritHandle : i32, creationFlags : i32, env : &void, currentDir : &c8, startupInfo : &STARTUPINFO, processInfo : &PROCESS_INFORMATION)-> i32;

    extern (C) fn SetHandleInformation (handle : &void, flag : i32, value : i32)-> i32;
    
    extern (C) fn WaitForSingleObject (handle : &void, timeout : i32)-> i32;

    extern (C) fn GetExitCodeProcess (handle : &void, status : &i32)-> i32;


    struct
    | hProcess : &void = null
    | hThread : &void = null
    | dwProcessId : u32 = 0u32
    | dwThreadId : u32 = 0u32
     -> PROCESS_INFORMATION;

    struct
    | cb : i32 = cast!i32 (sizeof (STARTUPINFO))
    | lpReserved : &void = null
    | lpDesktop : &void = null
    | lpTitle : &void = null
    | dwX : i32 = 0
    | dwY : i32 = 0
    | dwXSize : i32 = 0
    | dwYSize : i32 = 0
    | dwXCountChars : i32 = 0
    | dwYCountChars : i32 = 0
    | dwFillAttributes : i32 = 0
    | mut dwFlags : i32 = 0
    | wShowWindow : bool = false
    | cbReserved2 : u8 = 0u8
    | lpReserved2 : &void = null
    | mut hStdInput : &void = null
    | mut hStdOutput : &void = null
    | mut hStdError : &void = null
     -> STARTUPINFO;
    
    pub class @final SubProcess {
        
        let cmd : [c8];
        
        let args : [[c8]];

        let cwd : [c8];
        
        let mut _processHandle : &void = null;
        
        let dmut _stdin = IOPipe::new ();
        let dmut _stdout = IOPipe::new ();
        let dmut _stderr = IOPipe::new ();

        /**
         * Run a process in parallel of this process execution
         * 
         */
        pub self run (cmd : [c8], args : [[c8]], cwd : &Path = Path::new (".")) with cmd = cmd, args = args, cwd = cwd.toStr () {
            self:.run ();
        }

        pub self run (path : &Path, args : [[c8]], cwd : &Path = Path::new (".")) with self (path.toStr (), args, cwd-> cwd) {}
        
        prv fn run (mut self) {
            self:.createChild ();               
        }

        prv fn createChild (mut self) {
            let dmut stream = StringStream::new ();
            stream:.write (self.cmd, " ");
            for i, a in self.args {
                if (i != 0us) stream:.write (" ");
                stream:.write (a);
            }

            SetHandleInformation (self._stdin:.opipe ():.getHandle (), 1, 0);
            SetHandleInformation (self._stdout:.ipipe ():.getHandle (), 1, 0);
            SetHandleInformation (self._stderr:.ipipe ():.getHandle (), 1, 0);
            
            let mut startupinfo = STARTUPINFO ();
            startupinfo.hStdError = self._stderr:.opipe ():.getHandle ();
            startupinfo.hStdOutput = self._stdout:.opipe ():.getHandle ();
            startupinfo.hStdInput = self._stdin:.ipipe ():.getHandle ();
            startupinfo.dwFlags = 256;
            
            let mut piProcInfo = PROCESS_INFORMATION ();
            
            CreateProcessA (null, stream[].ptr, null, null, 1, 0, null, self.cwd.ptr, &startupinfo, &piProcInfo);
            self._processHandle = piProcInfo.hProcess;
            
            self._stdin:.ipipe ():.dispose ();
            self._stdout:.opipe ():.dispose ();
            self._stderr:.opipe ():.dispose ();
        }

        pub fn stdin (mut self) -> dmut &OPipe {
            alias self._stdin:.opipe ()
        }
        
        pub fn stdout (mut self)-> dmut &IPipe {
            alias (self._stdout:.ipipe ())
        }

        pub fn stderr (mut self)-> dmut &IPipe  {
            alias (self._stderr:.ipipe ())
        }

        pub fn isFinished (self)-> bool {
            let mut status = 0i32;

            
            GetExitCodeProcess (self._processHandle, &status);
            if (status == 259) return false;

            return true;            
        }
        
        pub fn wait (mut self)-> i32 {
            let mut status = 0i32;
            self._stdin:.dispose ();
            
            WaitForSingleObject (self._processHandle, -1);
            GetExitCodeProcess (self._processHandle, &status);
            CloseHandle (self._processHandle);
            self._processHandle = null;
            
            return status;
        }

        impl Disposable {

            pub over dispose (mut self) {
                self._stdin:.dispose ();
                self._stdout:.dispose ();
                self._stderr:.dispose ();
            }
            
        }
        
    }
    
}


__version LINUX {

    /**
     * Single way pipe to write data to a IPipe (or another process)
     */
    prv class @final OPipe {


        let mut _pipe : i32;

        /**
         * @params: 
         *    - pipe: the file descriptor of the pipe
         */
        pub self (pipe : i32) with _pipe = pipe
        {}

        /**
         * Write raw data to the pipe
         * @params : 
         *     - msg: the data to write in the pipe
         */
        pub fn write (mut self, msg : [c8]) {
            write (self._pipe, msg.ptr, msg.len);
        }

        /**
         * @returns: the file descriptor of the pipe
         */
        pub fn getHandle (self)-> i32 {
            self._pipe
        }

        /**
         * Set the pipe to non blocking meaning that from now on, we can write in the pipe without waiting the read on the other end
         */
        pub fn setNonBlocking (mut self) {
            let err_flags = fcntl(self._pipe, FileFlags::F_GETFL, 0u32);
            fcntl(self._pipe, FileFlags::F_SETFL, err_flags | O_NONBLOCK);
        }    

        impl core::dispose::Disposable {

            pub over dispose (mut self) {     
                if (self._pipe != 0) {
                    close (self._pipe);
                    self._pipe = 0;
                }
            }
            
        }
        
        __dtor (mut self) {
            self:.dispose ();
        }
    }


    /**
     * Single way pipe to read from a OPipe, or another process
     */
    prv class @final IPipe {

        let mut _pipe : i32;
        
        pub self (pipe : i32) with _pipe = pipe
        {}
        
        /**
         * Read raw data from the pipe
         * @returns: all the data that were in the pipe
         */
        pub fn read (mut self) -> [c8] {
            let dmut ret = Vec!(c8)::new ();
            loop {
                let mut c = '\u{0}'c8;
                let n = read (self._pipe, alias &c, sizeof c8);
                if (n != -1 && n != 0) {
                    ret:.push (c);
                } else break {}
            }
            ret:.fit ();
            return ret [];
        }

        /**
         * Read raw data from the pipe
         * @params:
         *    - len: the number of bytes to read 
         * @returns: some of the data that were in the pipe
         */
        pub fn readSome (mut self, len : u32 = 1u32)-> [c8] {
            let dmut buf = ['\u{0}'c8 ; new len];
            let n = read (self._pipe, alias buf.ptr, (sizeof c8 * buf.len));
            if (n != 0is && n != -1) {
                return buf[0is .. n];
            }

            return [];
        }
        
        /**
         * @returns: the file handle of the pipe
         */
        pub fn getHandle (self)-> i32 {
            self._pipe
        }

        /**
         * Change the behaviour of the pipe. From now on, the read function will return immediately even if nothing was read
         */
        pub fn setNonBlocking (mut self) {
            let err_flags = fcntl(self._pipe, FileFlags::F_GETFL, 0u32);
            fcntl(self._pipe, FileFlags::F_SETFL, err_flags | O_NONBLOCK);
        }

        
        impl core::dispose::Disposable {
            pub over dispose (mut self) {
                if (self._pipe != 0) {
                    close (self._pipe);
                    self._pipe = 0;
                }
            }
        }
        
        __dtor (mut self) {
            self:.dispose ();
        }
        
    }    

    prv class @final IOPipe {
        let dmut _read : &IPipe = IPipe::new (0);
        
        let dmut _write : &OPipe = OPipe::new (0);
        
        pub self () with self (createPipes ()) {}
        
        pub self (pipes : [i32 ; 2u32])
            with _read = IPipe::new (pipes [0]), _write = OPipe::new (pipes [1])
        {}

        pub fn opipe (mut self)-> dmut &OPipe {
            alias self._write
        }

        pub fn ipipe (mut self)-> dmut &IPipe {
            alias self._read
        }

        impl Disposable {
            pub over dispose (mut self) {
                self._read:.dispose ();
                self._write:.dispose ();
            }
        }        
    }

    prv fn createPipes ()-> [i32; 2u32] {
        let dmut ret = [0i32; 2u32];
        etc::c::files::pipe (alias (ret).ptr);
        return ret;
    }

}


__version WINDOWS {

    prv class OPipe {
        let mut _pipe : &void;

        pub self (pipe : &void) with _pipe = pipe
        {}
        
        pub fn write (mut self, msg : [c8]) {
            WriteFile (self._pipe, msg.ptr, cast!i32 (msg.len), null, null);
        }

        pub fn setNonBlocking (self) {
            if (SetHandleInformation (self._pipe, 1, 0) != 1) {
                __pragma!panic ();
            }
        }

        pub fn getHandle (mut self) -> &void {
            self._pipe
        }
        
        impl Disposable {

            pub over dispose (mut self) {
                if (self._pipe !is null) {
                    CloseHandle (self._pipe);
                    self._pipe = null;
                }
            }
            
        }
        
        __dtor (mut self) {
            self:.dispose ();
        }
    }


    prv class IPipe {

        let mut _pipe : &void;

        pub self (pipe : &void) with _pipe = pipe
        {}

        
        pub fn setNonBlocking (self) {
            if (SetHandleInformation (self._pipe, 1, 0) != 1) {
                __pragma!panic ();
            }
        }

        pub fn getHandle (mut self) -> &void {
            self._pipe
        }
        
        pub fn read (mut self)-> [c8] {
            let dmut res = Vec!{c8}::new ();
            loop {
                let mut c = '\u{0}'c8;

                let mut n = 0i32;
                ReadFile (self._pipe, alias &c, cast!i32 (sizeof c8), alias &n, null);
                if (n != -1 && n != 0) {
                    res:.push (c);
                } else break {}
            }

            res:.fit ();
            return res[];
        }

        pub fn readSome (mut self, len : u32 = 1u32)-> [c8] {
            let dmut buf = ['\u{0}'c8 ; new len];
            let mut n = 0i32;
            ReadFile (self._pipe, alias buf.ptr, cast!i32 (sizeof c8 * buf.len), alias &n, null);

            if (n != -1 && n != 0) {
                return buf[0 .. n];
            }

            return [];
        }        

        impl Disposable {
            pub over dispose (mut self) {
                if (self._pipe !is null) {
                    CloseHandle (self._pipe);
                    self._pipe = null;
                }
            }
        }

        __dtor (mut self) {
            self:.dispose ();
        }    
    }


    prv class IOPipe {

        let dmut _ipipe : &IPipe;

        let dmut _opipe : &OPipe;

        pub self () with self (createPipes ()) {}

        pub self (pipes : (&void, &void)) with _ipipe = IPipe::new (pipes.0), _opipe = OPipe::new (pipes.1)
        {}


        pub fn opipe (mut self)-> dmut &OPipe {
            alias self._opipe
        }

        pub fn ipipe (mut self)-> dmut &IPipe {
            alias self._ipipe
        }

        impl Disposable {
            pub over dispose (mut self) {
                self._ipipe:.dispose ();
                self._opipe:.dispose ();
            }
        }
        
    }

    struct
    | nLength : u64 = cast!u64 (sizeof (SECURITY_ATTRIBUTES))
    | lpSecurityDescriptor : &void = null
    | bInheritHandle : i32 = 1
     -> SECURITY_ATTRIBUTES;
    
    extern (C) fn CreatePipe (mut readP : &(mut &void), mut writeP : &(mut &void), saAttr : &SECURITY_ATTRIBUTES, ig : i32)-> i32;
    extern (C) fn SetHandleInformation (pipe : &void, flag : i32, ig : i32)-> i32;

    fn createPipes () -> (&void, &void) {
        let mut writeP : &void = null;
        let mut readP : &void = null;

        let mut saAttr = SECURITY_ATTRIBUTES ();
        
        if (CreatePipe (alias &readP, alias &writeP, &saAttr, 0) != 1) {
            __pragma!panic ();
        }
        
        (readP, writeP)
    }
    
}
