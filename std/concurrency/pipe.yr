/**
 * This module implements a way of communication between threads.
 * @Authors: Emile Cadorel
 * @License: GPLv3
 * <hr>
 * Depending on the context, (shared memory or not), different type of pipes can be choosed. ThreadPipe are used to communicate between threads of the same process.
 * @example: 
 * ===
 * import std::box; // For Box!{T}
 * 
 * let dmut a = A::new ();
 *
 * let th = spawn (move |th : Thread| => {
 *    // Spawn open a thread pipe for the thread that can be used directly to communicate
 *    match th.pipe.read () { // read is blocking
 *        Box!{i32}(value-> x : _) => println ("Received a i32 : ", x);
 *        Box!{f64}(value-> x : _) => println ("Received a f64 : ", x);
 *        _ => {
 *            println ("Received something else.");
 *        }
 *    }
 *
 *    match th.pipe.read () { // read only the reference of classes stored in the heap
 *        x : &A => println (x is a); // true
 *    }  
 * });
 *
 * th.pipe.write  (87); // write is blocking, and waits until the other end of the pipe is reading
 * th.pipe.write (a); // Classes can be sent directly by reference without copy
 * th.join ();
 * ===
 * Because `ThreadPipe` are blocking, they can be used to synchronize threads. Asynchronous communication can be made using a `MailBox` instead.
 */
mod std::concurrency::pipe;

import core::typeinfo, core::array;
import core::dispose;
import core::exception, core::object;
import etc::runtime::thread;
import etc::c::stdio;
import etc::c::files;

import std::io;
import std::box;

import std::concurrency::sync;
import std::stream;
import std::collection::vec;

mod IOThreadPipe {T} {

    __version LINUX {
        pub extern (C) def _yrt_read_pipe (stream : i32, size : usize)-> T;
        
        pub extern (C) def _yrt_write_pipe (stream : i32, data : T, size : usize);
    }

    __version WINDOWS {
        pub extern (C) def _yrt_read_pipe (stream : &void, size : usize)-> T;
        
        pub extern (C) def _yrt_write_pipe (stream : &void, data : T, size : usize);
    }

    
    
}

/**
 * A pipe is a way to communicate between threads.
 * It is assumed that pipes are used in shared memory context, and are only used to send references to class.
 * Other type of data that are not classes are encapsulated into an `std::box::Box` type.
 * @warning: 
 * ThreadPipes are blocking, meaning that before writing inside the pipe we assure that another thread is reading on the other side.
 */
pub class @final ThreadPipe {
    
    __version LINUX {
        /** The read side of the pipe */
        prv let mut _read : i32 = 0;
        
        /** The write side of the pipe */
        prv let mut _write : i32 = 0;
    }

    __version WINDOWS {
        
        prv let mut _read : &void = null;

        prv let mut _write : &void = null;
        
    }

    prv let mut _mutex = Mutex::new ();
    
    prv let mut _cond = Condition::new ();
    
    prv let mut _sem = Semaphore::new ();

    /**
     * Create a thread pipe
     */
    pub self () with self (true) {}

    /**
     * Create a thread pipe
     * @params: 
     *    - create: if false, the pipe is not allocated and will not work
     */
    pub self (create : bool) {
        if (create) {
            __version WINDOWS {
                let (read, write) = create_pipes ();
                self._read = read;
                self._write = write;
            } else {
                let mut pipes : [mut i32 ; 2u64] = [0 ; 2u64];
                pipe (alias (pipes).ptr);
                self._read = pipes [0];
                self._write = pipes [1];
            }
        }
    }
    
    /**
     * Get the reference of a object, that has been written in the pipe
     * @warning: it is a blocking process, the thread will wait until something is read
     * @returns: an instance of an object
     * @info: 
     * Only objects can be written inside the pipe, if data that are not any object are written they are written inside a std::box::Box
     */
    pub def read (self) -> &Object {                        
        self._mutex.lock ();
        self._sem.post ();
        self._cond.wait (self._mutex);
        let ret = IOThreadPipe!{&Object}::_yrt_read_pipe (self._read, sizeof &Object);                    
        self._mutex.unlock ();
        ret
    }

    /**
     * Write a reference to a object in the pipe to be read by another thread
     * @warning: it is a blocking process, the thread will wait until a thread has read the written data
     */
    pub def write {class T} (self, x : T) {            
        self._sem.wait ();
        self._mutex.lock ();        
        IOThreadPipe!(T)::_yrt_write_pipe (self._write, x, sizeof T);
        self._cond.signal (); 
        self._mutex.unlock ();
    }
    
    /**
     * Write data in the pipe.
     * @info: Because data are not an instance of class, a std::box::Box is allocated.
     * @warning: it is a blocking process, the thread will wait until another thread is reading on the other end.
     */
    pub def write {T} (self, x : T) -> void {
        self.write!{&Box!{T}} (Box::new (x))
    }    
    
    impl core::dispose::Disposable {
        /**
         * Close the bidirectional pipe
         */
        pub over dispose (mut self) {
            __version LINUX {
                if (self._read != 0) {
                    close (self._read);
                    self._read = 0;
                }
                
                if (self._write != 0) {
                    close (self._write);
                    self._write = 0;
                }
            }

            __version WINDOWS {
                if (self._read !is null) {
                    CloseHandle (self._read);
                    self._read = null;
                }
                
                if (self._write !is null) {
                    CloseHandle (self._write);
                    self._write = null;
                }
            }
        }
    }


    impl std::stream::Streamable {
        pub over toStream (self, dmut stream : &StringStream) {
            stream:.write ("("s8):.write (self._read):.write (", "s8):.write (self._write):.write (")"s8);
        }
    }

    
    __dtor (mut self) {
        self:.dispose ();
    }
    
}

