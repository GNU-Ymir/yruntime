/**
 * This module implements a thread safe list that can be used to communicate between threads.
 * @Authors: Emile Cadorel
 * @Licence: GPLv3
 * <hr>
 * @example: 
 * ===
 * import std::concurrency::thread; // spawn
 * import std::time::dur; // sleep
 * import std::concurrency::mailbox;
 *
 * let dmut box = MailBox!{i32}::new ();
 * let th = spawn (move |_| => {
 * loop {
 *     let msg = box:.receive ();
 *     match msg {
 *         Ok (x : i32) => {
 *             println ("Finally received a message : ", x, " !!");
 *                   break {}
 *             }
 *             _ => {
 *                 println ("Still waiting for a mail, sleep 1 second.");
 *                 sleep ((1u64).seconds ()); 
 *             }
 *         }
 *     }
 * });
 *
 * sleep ((2u64).seconds ());
 *
 * box:.send (42);
 * th.join ();
 * ===
 * 
 */

mod std::concurrency::mailbox;

import core::typeinfo;
import core::exception;
import std::collection::list;
import std::concurrency::sync;
import std::any;
import std::io;

/**
 * A mail box is a way of sending messages between threads in a non blocking manner unlike pipes.
 * Its implementation is just an atomic list (Cf. <a href="./std_collection_list.html#List">std::collection::list::List</a>)
 * @waranty: 
 * Mailbox is thread safe, and that is the whole point.
 */
pub class @final MailBox {T} {

    let dmut _mails = List!{T}::new ();

    let _mutex = Mutex::new ();
    
    pub self () {}

    /**
     * Send a mail in the mail box
     * @info: this function is not blocking
     * @params: 
     *    - x: the value to send 
     * @templates: 
     *    - T: any type
     */
    pub def send (mut self, x : T) -> void {
        //println ("lock");
        self._mutex.lock ();        
        self._mails:.push (x);
        self._mutex.unlock ();
        //println ("unlock");
    }

    /**
     * Check if there is mail to receive in the mail box, and return it encapsulated in option type
     * @info: this function is not blocking
     * @templates: 
     *     - T: any type
     * @returns: 
     *    - Ok(T): if a message was found in the box
     */
    pub def receive (mut self) -> T? {
        //println ("lock");
        self._mutex.lock ();
        let ret = self._mails:.popFront ()?;
        self._mutex.unlock ();
        //println ("unlock");
        ret
    }    

    /**
     * Clear the mailbox
     */
    pub def clear (mut self) {
        self._mutex.lock ();
        self._mails = List!{T}::new ();
        self._mutex.unlock ();
    }
    
    /**
     * @returns: the number of mails in the box
     */
    pub def len (self) -> usize {
        //println ("lock");
        self._mutex.lock ();
        let res = self._mails.len ();
        self._mutex.unlock ();
        //println ("unlock");
        res
    }
    
}



