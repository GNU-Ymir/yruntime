/**
 * This module implements the class TaskPool, that encapsulate a task queue and a set of worker thread to execute the tasks.
 * The task queue is a FIFO queue. 
 * @Authors: Emile Cadorel
 * @License: GPLv3
 * <hr>
 * @example: 
 * ===============
 * import std::io; // for println
 * import std::conv; // for to
 * import std::concurrency::task;
 * 
 * fn computePi (prec : i32)-> f64 {
 *    let mut res = 0.0;
 *    let n = prec.to!f64 ();
 *    for i in 0 .. prec {
 *        res += (4.0 / n) / ( 1.0 + (( to!f64 (i) - 0.5 ) * (1.0 / n)) * (( to!f64 (i) - 0.5 ) * (1.0 / n)));
 *    }
 *    res     
 * }

 * fn main () {
 *     let dmut pool = TaskPool::new (2u64); // Creating a task pool with at most two threads
 *   
 *     // Only two threads are spawned to perform 1_000_000 jobs
 *     for _ in 0 .. 1_000_000 {
 *         pool:.submit (move || => {
 *             println (computePi (i32::max / 1000));
 *         });
 *     }
 *
 *     pool:.join ();    
 *     // Does not need to empty the pool, the thread are exited if there is no job to do
 * }
 * ===============
 * One can note the similarity between Task and Future. Indeed a Future is an advanced version of a task that can be waited and can return a value. 
 */
mod std::concurrency::task;

import std::io;
import core::object, core::exception;

import std::collection::map;
import std::concurrency::mailbox;
import std::concurrency::thread;
import std::concurrency::sync;
import etc::c::sysinfo;
import std::algorithm::comparison;
import std::time::dur;

import core::typeinfo;


def EXIT_THREAD_AFTER_LOST = 10us;

/**
 * A task pool is a set of threads executing a list of tasks submitted through a task queue.
 * @warning: 
 *   - There is no guarantee on the order of execution of the tasks, if they are submitted from different threads.
 *   - There is no preemption of tasks, so if there is infinite tasks in the task queue, (at least as many as there are threads) they will block the execution of the following submissions.
 *   - Task pools don't communicate, meaning that if you have two task pools spawning n threads, there can be n*2 threads spawned at a time. 
 * We are thinking about a way to make tasks preemptible, so that they can be paused when they take a long time in order to be able to execute the other tasks so that the second limitation can be removed.
 * @info: the number of thread running in the task queue may vary depending of the workload, it there is no need to spawn the number of asked thread, then they are not spawned. They may be spawned in the future to treat a pick of load, but the number of threads is always lower or equal to the maximum number specified when creating the `TaskPool`.
 */

pub class @final TaskPool {

    // The list of submitted tasks that are not completed yet
    let dmut _jobs = MailBox!{&Task}::new ();

    // The maximum number of thread that can be spawned
    let _nbThreads : u64 = 0u64;

    // The threads that are currently running threads
    let dmut _runningThreads = HashMap!{usize, Thread}::new ();

    // The mail box used by the thread to tell they are dead
    let dmut _exited = MailBox!{usize}::new ();

    let _mutex  = Mutex::new ();
    
    /**
     * Create an empty task pool, no threads are launched before the first submission
     * @info: by default the number of thread in the pool is the number of cores available in the system
     * @params: 
     *    - nbThreads: The number of threads to spawn in the task pool
     */
    pub self (nbThreads : u64 = cast!u64 (etc::c::sysinfo::_yrt_get_nprocs ()))
        with _nbThreads = nbThreads
    {}
    
    /**
     * Submit a new task to execute in the task pool
     * @params: 
     *    - task: the task to execute
     * @info: the task will be executed in the future when a thread is available.
     * @example:
     * =============
     * class MyTask over Task {
     *     let n : i32;
     *     
     *     pub self (n : i32) with n = n {}
     *     
     *     pub over execute (self) { 
     *         println ("Asynchronus printing of n = ", n, " messages");
     *         for i in 0 .. n {
     *             println ("Message nb : ", i);
     *         }
     *     }
     * }
     * 
     * let dmut pool = TaskPool::new (2u64); // Two threads
     * for _ in 0 .. 100 {
     *     pool:.submit (MyTask::new (100));
     * }
     * pool:.join ();
     * =============
     */
    pub fn submit (mut self, task : &Task) -> void {
        self._jobs:.send (task);
        self:.removeExitedThreads ();
        let jobLen = cast!u64 (self._jobs.len ()) + 1u64;
        let max_th = self._nbThreads - cast!u64 (self._runningThreads.len ());
        if (max_th != 0us) {
            if (max_th > jobLen) {
                self:.spawnThreads (jobLen, cast!u64 (self._runningThreads.len ()));
            } else {
                self:.spawnThreads (max_th, cast!u64 (self._runningThreads.len ()));
            }
        }
    }

    /**
     * Submit a new task to execute in the task pool.
     * @params: 
     *    - task: the task to submit
     * @info: the task will be executed in the future when a thread is available.
     * @example:
     * ===
     * fn foo () {
     *     println ("Function pointer task");
     * }
     * 
     * let dmut pool = TaskPool::new (2u64); // Two threads
     * for _ in 0 .. 100 {
     *     pool:.submit (|| => {
     *           println ("Lambda function task");
     *     });
     * }
     * 
     * for _ in 0 .. 100 {
     *     pool:.submit (&foo); // Function pointer from named function
     * }
     * pool:.join ();
     * ===
     */     
    pub fn submit (mut self, task : (fn ()-> void)) {
        self:.submit (FnTask::new (task))
    }

    /**
     * Submit a new task to execute in the task pool.
     * @params: 
     *    - task: the task to submit
     * @info: the task will be executed in the future when a thread is available.
     * @example:
     * ===
     * class Foo {
     *    let mut i = 0;
     * 
     *    pub self () {}
     *    
     *    pub fn foo (mut self) {
     *        println ("Method task ", self.i);
     *        self.i += 1;
     *    }
     * }
     * 
     * let dmut pool = TaskPool::new (2u64); // Two threads
     * for i in 0 .. 100 {
     *     pool:.submit (move || => {
     *           println ("Closure function task : ", i);
     *     });
     * }
     * 
     * let dmut f = Foo::new ();
     * for _ in 0 .. 100 {
     *     pool:.submit (&(f:.foo));  // closure from method
     * }
     * pool:.join ();
     * ===
     */
    pub fn submit (mut self, task : (dg ()-> void)) {
        self:.submit (DgTask::new (task))
    }

    /**
     * Wait the completion of all submitted tasks.
     * @warning: wait the end of the running tasks, if one of them is an infinite loop this function will never quit
     * @info: After this function the task queue is empty, but the task pool is still usable.
     * @example:
     * =============
     * let dmut pool = TaskPool::new (2u64);
     * pool:.submit (&heavy_function_1 ());
     * pool:.submit (&heavy_function_2 ());
     * pool:.join (); // wait the completion of heavy_functions 1 and 2
     * 
     * pool:.submit (&heavy_function_3 ()); // pool is still usable afterwards
     * pool:.join (); // wait the completion of heavy_function_3
     * =============
     */
    pub fn join (mut self) -> void {
        for _, th in self._runningThreads {
            th.join ()            
        }

        self._runningThreads:.clear ();
    }
    
    __version LINUX {
        
        /**
         * Remove all submitted tasks from the task queue
         * @warning: wait the end of the already running tasks, if one of them is an infinite loop this function will never quit
         */
        pub fn cancel (mut self)-> void {
            self._jobs:.clear ();
                        
            for _, th in self._runningThreads {
                join (th);
            }
        }
    }

    /**
     * @returns: the number of spawnable threads in the task pool.
     * @warning: this is not the number of running thread, but the maximum number of thread the task pool is allowed to spawn.
     * @example: 
     * ===============
     * let dmut pool = TaskPool::new (2u64);
     * assert (pool.getNbThreads () == 2u64); 
     * ===============
     */
    pub fn getNbThreads (self) -> u64 {
        self._nbThreads
    }
    
    /**
     * Spawn threads that can perform actions
     * @params: 
     *    - nb: the number of thread to spawn
     *    - id: the id of the first thread  
     */
    prv fn spawnThreads (mut self, nb : u64, id : u64) {
        for i in 0u64 .. nb {            
            let th = spawnNoPipe (move |th| => {
                let mut nb_skips = 0us;
                loop {
                    let msg = self._jobs:.receive ();                    
                    match msg {
                        Ok (x : &Task) => {
                            nb_skips = 0us;
                            x.execute (i + id)
                        }
                        Err () => {
                            nb_skips += 1us;

                            // Exit the thread if it failed to get a task for EXIT_THREAD_AFTER_LOST time
                            if (nb_skips > EXIT_THREAD_AFTER_LOST) {
                                break {}
                            }
                            
                            sleep ((1u64).millis ());
                        }
                    }
                }
                
                self._exited:.send (th.id);
            });
            
            (alias self._runningThreads) [th.id] = th;
        }
    }    

    /**
     * Remove all the threads that have exited because there were no task to execute
     */
    prv fn removeExitedThreads (mut self) {
        loop {
            match self._exited:.receive () {
                Ok (x : usize) => {
                    let th = (self._runningThreads [x])?;
                    match th {
                        Ok (z : Thread) => {
                            z.join ();
                            // join remove the thread from the known thread, this is necessary to avoid incapacity of creating new thread
                        }
                    }

                    self._runningThreads:.remove (x)
                }
                _ => {
                    break {}
                }
            }
        }
    }
    
}

/**
 * Ancestor of all class Task that can be launch in the task Pool.
 * Task are really close to `Future`, but with less guarantees, e.g. we cannot wait the end of execution of a `Task`.
 * @example: 
 * ===========
 * class MyTask over Task {
 *     pub self () {}
 * 
 *     pub over execute (self, id : u64) {
 *          println ("I'm executed by thread number : ", id);
 *          assert (id == 0u64 || id == 1u64); // Only two threads
 *     }
 * }
 * 
 * let dmut pool = TaskPool::new (2u64); 
 * let task = MyTask::new (12);
 * for _ in 0 .. 100 {
 *     pool:.submit (task); // Execute the task 100 times
 * }
 * pool:.join (); 
 * ===========
 */
pub class @abstract Task {

    /**
     * Create an empty task
     */
    prot self () {}

    /**
     * Method called by a task pool thread when the task is executed
     */
    pub fn execute (self, id : u64);

}

/**
 * A FnTask is a callable task pool task, that calls a function
 * @example: 
 * ==============
 * let dmut pool = TaskPool::new (2u64);
 * pool:.submit (FnTask::new (|| => println ("foo")));
 * // Exactly the same as 
 * pool:.submit (|| => println ("foo"));
 * pool:.join ();
 * ==============
 */
class @final FnTask over Task {
    let func : fn () -> void;
    pub self (func : fn () -> void) with func = func {}
    pub over execute (self, _ : u64) {
        self.func ()
    }
}

/**
 * A DgTask is a callable task pool task, that calls a closure
 * @example: 
 * ==============
 * let dmut pool = TaskPool::new (2u64);
 * let i = 0;
 * pool:.submit (DgTask::new (move || => println ("foo ", i)));
 * // Exactly the same as 
 * pool:.submit (move || => println ("foo ", i));
 * pool:.join ();
 * ==============
 */
class @final DgTask over Task {
    let func : dg () -> void;
    pub self (func : dg () -> void) with func = func {}
    pub over execute (self, _ : u64) {
        self.func ()
    }
}
    


