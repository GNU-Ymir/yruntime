mod std::concurrency::task;

import std::io;
import core::object, core::exception;

import std::collection::map;
import std::concurrency::mailbox;
import std::concurrency::thread;
import std::concurrency::sync;
import etc::c::sysinfo;
import std::algorithm::comparison;

import core::typeinfo;

/**
 * A task pool is a set of threads that are performing a list of given jobs
 * @example: 
 * ===============
 * 
 * let dmut pool = TaskPool::new (2); // Creating a task pool with at most two threads
 * 
 * // Only two threads are spawned to perform 1_000_000 jobs
 * for i in 0 .. 1_000_000 {
 *     pool:.submit (move || => {
 *          println ("Job : ", i);
 *     });
 * }
 * 
 * pool:.join () // Wait for the completion of all jobs in the task pool
 * // Does not need to empty the pool, the thread are exited if there is no job to do
 * ===============
 * @warning: 
 *   - There is no guarantee on the order of execution of the jobs
 *   - There is no preemption of jobs, so if there is in a task pool infinite jobs, (at least as many as there is threads) they will block the execution of the following submissions
*    - If jobs are to short (as the example above), there will be loss of efficiency due to spawning and killing many threads 
 *   - Task pools don't communicate, meaning that if you have two task pools spawning n threads, there can be n*2 threads spawned at a time
 */

pub class @final TaskPool {

    // The list of submitted jobs that are not completed yet
    let dmut _jobs = MailBox!{&Task}::new ();

    // The maximum number of thread to spawn
    let _nbThreads : u64 = 0u64;

    // The threads that are currently running threads
    let dmut _runningThreads = HashMap!{usize, Thread}::new ();

    // The mail box used by the thread to tell they are dead
    let dmut _exited = MailBox!{usize}::new ();

    let _mutex  = Mutex::new ();
    
    /**
     * Create an empty task pool, no threads are launched before the first submission
     * @params: 
     *    - nbThreads: The number of threads to spawn in the task pool
     */
    pub self (nbThreads : u64) with _nbThreads = nbThreads {}

    /**
     * Create an empty task pool
     * @info: the number of thread in the pool is the number of cores available in the system - 1, or 1 if there is only one available core
     */
    pub self () with _nbThreads = cast!u64 (std::algorithm::comparison::max (etc::c::sysinfo::get_nprocs () - 1, 1)) {}
    
    /**
     * Submit a new job to execute in the task pool
     * @example: 
     * =============
     * class MyTask over Task {
     *     let n : i32;
     *     
     *     pub self (n : i32) with n = n {}
     *     
     *     pub over execute (self) { 
     *         println ("Asynchronus printing of n = ", n, " messages");
     *         for i in 0 .. n {
     *             println ("Message nb : ", i);
     *         }
     *     }
     * }
     * 
     * let dmut pool = TaskPool::new (2u64); // Two threads
     * for _ in 0 .. 100 {
     *     pool:.submit (MyTask::new (100));
     * }
     * pool.join ();
     * =============
     */
    pub def submit (mut self, task : &Task) -> void {
        self._jobs:.send (task);
        self:.removeExitedThreads ();
        let jobLen = cast!u64 (self._jobs.len ()) + 1u64;
        let max_th = self._nbThreads - cast!u64 (self._runningThreads.len ());
        if (max_th > jobLen) {
            self:.spawnThreads (jobLen, cast!u64 (self._runningThreads.len ()));
        } else {
            self:.spawnThreads (max_th, cast!u64 (self._runningThreads.len ()));
        }
    }

    /**
     * 
     * def foo () {
     *     println ("Function pointer job");
     * }
     * 
     * let dmut pool = TaskPool::new (2u64); // Two threads
     * for _ in 0 .. 100 {
     *     pool:.submit (|| => {
     *           println ("Lambda function job");
     *     });
     * }
     * 
     * for _ in 0 .. 100 {
     *     pool:.submit (&foo); 
     * }
     * pool.join ();
     * =============
     */     
    pub def submit (mut self, task : (fn ()-> void)) {
        self:.submit (FnTask::new (task))
    }

    /**
     * class Foo {
     *    let mut i = 0;
     * 
     *    pub self () {}
     *    
     *    pub def foo (mut self) {
     *        println ("Method job ", self.i);
     *        self.i += 1;
     *    }
     * }
     * 
     * let dmut pool = TaskPool::new (2u64); // Two threads
     * for i in 0 .. 100 {
     *     pool:.submit (move || => {
     *           println ("Closure function job : ", i);
     *     });
     * }
     * 
     * let dmut f = Foo::new ();
     * for _ in 0 .. 100 {
     *     pool:.submit (&(f:.foo));  // closure from method
     * }
     * pool.join ();
     * =============
     */
    pub def submit (mut self, task : (dg ()-> void)) {
        self:.submit (DgTask::new (task))
    }

    /**
     * Wait the completion of all submitted jobs
     * @example:
     * =============
     * let dmut pool = TaskPool::new (2u64);
     * pool:.submit (&heavy_function_1 ());
     * pool:.submit (&heavy_function_2 ());
     * pool.join (); // wait the completion of heavy_functions 1 and 2
     * 
     * pool:.submit (&heavy_function_3 ()); // pool is still usable afterwards
     * pool.join (); // wait the completion of heavy_function_3
     * =============
     */
    pub def join (mut self) -> void {
        for _, th in self._runningThreads {
            th.join ()            
        }
    }

    /**
     * Kill all the tasks that are currently executing in the task pool, and the jobs that are in waiting queue
     * The task pool is still usable afterwards
     */
    pub def cancel (mut self)-> void {
        self._jobs = MailBox!{&Task}::new (); // clear all the remaining jobs
        for _, th in self._runningThreads {
            kill (th);
        }
    }
    
    /**
     * Get the number of spawnable threads in the task pool
     * @example: 
     * ===============
     * let dmut pool = TaskPool::new (2u64);
     * assert (pool.getNbThreads () == 2u64); 
     * ===============
     */
    pub def getNbThreads (self) -> u64 {
        self._nbThreads
    }
    
    /**
     * Spawn threads that can perform actions
     */
    prv def spawnThreads (mut self, nb : u64, id : u64) {        
        for i in 0u64 .. nb {
            let th = spawnNoPipe (move |th| => {
                loop {
                    let msg = self._jobs:.receive ();                    
                    match msg {
                        Ok (x : &Task) => {
                            x.execute (i + id)
                        }
                        Err () => {
                            break {}
                        }
                    }
                }
                
                self._exited:.send (th.id);
            });
            
            (alias self._runningThreads) [th.id] = th;
        }
    }    

    /**
     * Remove all the threads that have exited because there were no job to execute
     */
    prv def removeExitedThreads (mut self) {
        loop {
            match self._exited:.receive () {
                Ok (x : usize) => {
                    let th = (self._runningThreads [x])?;
                    match th {
                        Ok (z : Thread) => {
                            z.join ();
                            // join remove the thread from the known thread, this is necessary to avoid incapacity of creating new thread
                        }
                    }
                    self._runningThreads:.remove (x)
                }
                _ => {
                    break {}
                }
            }
        }
    }
    
}

/**
 * Ancestor of all class Task that can be launch in the task Pool
 * @info: Not really usefull for external use, and kind of too wordy, you may prefer submit jobs with function and closure 
 * @example: 
 * ===========
 * class MyTask over Task {
 *     pub self () {}
 * 
 *     pub over execute (self, id : u64) {
 *          println ("I'm executed by thread number : ", id);
 *          assert (id == 0u64 || id == 1u64); // Only two threads
 *     }
 * }
 * 
 * let dmut pool = TaskPool::new (2u64); 
 * let task = MyTask::new (12);
 * for _ in 0 .. 100 {
 *     pool:.submit (task); // Execute the task 100 times
 * }
 * pool.join (); 
 * ===========
 */
pub class @abstract Task {
    // Does nothing
    prot self () {}

    /**
     * Method called by a task pool thread
     */
    pub def execute (self, id : u64);

}

/**
 * A FnTask is a callable task pool task, that calls a function
 * @example: 
 * ==============
 * let dmut pool = TaskPool::new (2u64);
 * pool:.submit (FnTask::new (|| => println ("foo")));
 * // Exactly the same as 
 * pool:.submit (|| => println ("foo"));
 * pool.join ();
 * ==============
 */
class @final FnTask over Task {
    let func : fn () -> void;
    pub self (func : fn () -> void) with func = func {}
    pub over execute (self, _ : u64) {
        self.func ()
    }
}

/**
 * A DgTask is a callable task pool task, that calls a closure
 * @example: 
 * ==============
 * let dmut pool = TaskPool::new (2u64);
 * let i = 0;
 * pool:.submit (DgTask::new (move || => println ("foo ", i)));
 * // Exactly the same as 
 * pool:.submit (move || => println ("foo ", i));
 * pool.join ();
 * ==============
 */
class @final DgTask over Task {
    let func : dg () -> void;
    pub self (func : dg () -> void) with func = func {}
    pub over execute (self, _ : u64) {
        self.func ()
    }
}
    


