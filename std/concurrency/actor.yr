/**
 * @warning: work in progress
 */

mod std::concurrency::actor;

import core::typeinfo;
import core::object;
import core::exception;
import core::dispose;

import std::concurrency::mailbox;
import std::concurrency::task;
import std::concurrency::pipe;
import std::concurrency::thread;
import std::any, std::box;
import std::net::_;
import etc::c::socket;
import std::collection::vec;
import std::collection::map;

import etc::c::socket;
import std::io, std::box, std::any;
import std::stream;


/**
 * Exception thrown when an error occur in an actor system
 */
pub class ActorError over Exception {
    pub let msg  : [c8];
    
    pub self (msg : [c8])
        with msg = msg
    {}
    
    impl Streamable {
        pub over toStream (self, dmut stream : &StringStream) {
            self::super.toStream (alias stream);
        }
    }
}


/**
 * A simple class used for the actor design pattern
 * A poison pill is the message sent to an actor to kill it
 */
pub class @final PoisonPill {
    pub self () {}
    impl Packable;
}


/**
 * An actor is a a class managed by a object that can receive messages asynchronusly.
 * <br>
 * Actors can be instanciated on different processes, or even on different machines, and are identified by their name.
 * @info: all messages received in a given actor are synchronized, but multiple actors managed by the same actor system can receive messages at the same time.
 */
pub class @abstract Actor {

    // The name of the actor
    let _name : [c8];

    // The actor system managing the actor
    let dmut _sys : &ActorSystem;
       

    /**
     * @params: 
     *    - sys: the actor system that will manage the actor
     *    - name: the name of the actor
     */
    prot self (dmut sys : &ActorSystem, name : [c8])
        with _name = name, _sys = alias sys
    {
        sys:.register (alias self);
    }

    /**
     * Process the message acquired inside the mailbox of the actor
     * @warning: If multiple actors have sent message, there is no guarantee on the order of reception
     * @params:
     *    - actor: the actor who sent the message
     *    - msg: the content of the message
     * @info: if the message was not an object originally, it is placed inside a Box
     * @example:
     * ===
     * class MyActor over Actor {
     *     // ...
     *     pub over receive (actor : &ActorRef, msg : &Object) {
     *         match (msg) {
     *              Box!{i32} (value-> i : i32) => {
     *                  println ("Received a i32 from : ", actor, " : ", i);
     *              }
     *         }
     *     }
     * }
     * ===
     */
    pub def receive (mut self, msg : &Object)-> void;

    /**
     * Method to call to kill the actor
     * @info: it can be triggered by sending a poison pill to the actor for example
     */
    prot def @final exit (mut self) {
        self._sys:.remove (self._name);
    }
    
    /**
     * @returns: a reference to the actor 
     */
    pub def getRef (mut self)-> dmut &ActorRef {        
        return alias self._sys:.localActor (self._name);
    } catch {
        err : _ => {
            println (err);
            __pragma!panic ();
        }
    }
        
    
    /**
     * @returns: the name of the actor
     */
    pub def getName (self)-> [c8] {
        self._name
    }    
}

/**
 * An actor ref is a reference to an actor, used to communicate with an actor instance.
 */
pub class ActorRef {

    // The name of the actor that is referenced    
    let _name : [c8];

    // The connection to the actor system managing the actor
    let dmut _stream : &TcpStream;

    /**
     * @params: 
     *    - name: the name of the actor referenced by this instance
     *    - stream: the connection to the actor system managing the actor
     */
    pub self (name : [c8], dmut stream : &TcpStream)
        with _name = name, _stream = alias stream
    {}

    /**
     * Send a message to  the actor reference by this instance
     * @warning: there is no guarantee on the order of the reception of messages send by ActorRef instances
     * @params:
     *   - msg: the message to send
     * @example: 
     * ===
     * class MyActor over Actor {   
     *     // ...
     *     pub over receive (actor : &ActorRef, msg : &Object) {
     *         match (msg) {
     *              Box!{i32} (value-> i : i32) => {
     *                  actor:.send (i + 1);
     *              }
     *         }
     *     }
     * }
     * ===
     * @info: if the type of message `T` is not a class, it is packed inside `std::box::Box!{T}`.
     */
    pub def send {T} (mut self, msg : T)-> void
        throws &TcpError
    {
        atomic self._stream {
            self._stream:.rawSend ([self._name.len]);
            self._stream:.rawSend (self._name);
            cte if (is!T {U impl Packable}) {
                self._stream:.send (msg);
            } else {
                self._stream:.send (Box::new (msg));
            }
        }
    }

    /**
     * @returns: the name of the actor ref
     */
    pub def @final getName (self)-> [c8] {
        self._name
    }

    impl std::stream::Streamable {

        pub over toStream (self, dmut stream : &StringStream) {            
            stream:.write ("std::concurrency::actor::ActorRef ("s8,
                           self._name, ", "s8);
            let (ip, port)  = match self._stream.getAddr () {
                i : &SockAddrV4 => {
                    (i.ip ()[], i.port ())
                }
                _ => { ([0u8 ; 4us], 0u16) }
            }

            stream:.write (ip[0], '.'c8, ip[1], '.'c8, ip[2], '.'c8, ip[3], '@'c8, port, ')'c8);
        }
    }

    impl core::dispose::Disposable {

        /**
         * Dispose the connected stream
         */
        pub over dispose (mut self) {
            self._stream:.dispose ();
        }        
    }

    __dtor (mut self) {
        self:.dispose ();
    }
}


/**
 * An actor system, the is used to manage the actors
 * @example: 
 * =================
 * class MyActor over Actor {
 *     let _i : i32;
 * 
 *     pub self (dmut sys : &ActorSystem, name : [c8], i : i32) 
 *         with super (alias sys, name), _i = i
 *     {
 *         println ("New actor spawned : ", self._name, " with i = ", self._i);
 *     }
 *    
 *     pub over receive (dmut self, _ : &ActorRef, obj : &Object) {
 *           match (obj) {
 *               Box!{[c8]} (value-> str : _) => {
 *                   println ("Received : ", str);
 *               }
 *           }
 *     }
 * }  
 * 
 * let dmut sys = ActorSystem::new (SockAddrV4::new (Ipv4::UNSPECIFIED, 8000u16));
 *
 * let dmut fstActorRef = MyActor::new (alias sys, "fst"s8).getRef (); 
 * fstActorRef.send ("Hello !!"s8);
 * sys:.join (); 
 * =================
 */
pub class @final ActorSystem {

    // The tcp listener of the actor system
    let dmut _listener : &TcpListener;

    // The list of connected stream to remote ActorSystems
    let dmut _streams = Vec!{dmut &TcpStream}::new ();

    // The stream to local actors
    let dmut _localStream = TcpStream::empty ();

    // The stream to poison pill
    let dmut _poisonPill : &TcpStream = TcpStream::empty ();
    
    // The task pool used to treat received messages 
    let dmut _pool : &TaskPool;

    // The thread of the polling thread (waiting for incoming connections, and messages)
    let dmut _th : Thread = Thread (0us, ThreadPipe::new (create-> false));
    
    // The set of local actors
    let dmut _actors = HashMap!{[c8], dmut &Actor}::new ();

    // The port of the actor system
    let mut _port : u16;

    // True if the polling thread is running
    let mut _isRunning : bool = true;
    
    /**
     * Create a new actor system listening to the address
     * @info: Start a TaskPool waiting for remote connection and messages
     * @params:
     *    - addr: the address of the actor system
     */
    pub self (addr : &SockAddress)
        with _listener = TcpListener::listen (addr),
             _pool = TaskPool::new (),
             _port = 0u16
        throws &TcpError
    {
        self._port = self._listener.getPort ();        
        self._th = spawnNoPipe (&self:.run);
        self._poisonPill = TcpStream::connect (SockAddrV4::new (Ipv4::LOCALHOST, self._port));
    }


    /**
     * Create an actor system with a automatic port, listening from every address
     * @info: Start a TaskPool waiting for remote connection and messages
     */
    pub self ()
        with _listener = TcpListener::listen (),
             _pool = TaskPool::new (),
             _port = 0u16
        throws &TcpError
    {
        self._port = self._listener.getPort ();
        self._th = spawnNoPipe (&self:.run);
        self._poisonPill = TcpStream::connect (SockAddrV4::new (Ipv4::LOCALHOST, self._port));
    }
    
    /**
     * The port binded by the listener
     */
    pub def getPort (self)-> u16 {
        self._port
    }
    
    
    /**
     * Register a new actor in the system
     * This actor will now be used, and accessible from external code, and actors
     * @params: 
     *    - ac: the actor to register in the system
     */
    pub def register (mut self, dmut ac : &Actor) {    
        atomic self {
            self._actors:.insert (ac.getName (), alias ac);
        }
    }
    
    /**
     * Remove an actor from the system
     * @params: 
     *    - name: the name of the actor to remove
     * @info: does nothing if there is no actor named `name`
     */
    pub def remove (mut self, name : [c8]) {
        atomic self {
            self._actors:.remove (name);
        }
    } 

    /**
     * Create an actor ref connected to an actor managed by this actor system
     * @params: 
     *    - name: the name of the local actor
     * @returns: an actor ref to send message to an actor declared in this local system
     * @throws: 
     *   - &ActorError: if there is no actor named `name`
     */
    pub def localActor (mut self, name : [c8]) -> dmut &ActorRef
        throws &ActorError
    {
        if (name !in self._actors) {
            throw ActorError::new ("No local actor "s8 ~ name);
        }
        
        if (self._localStream.getFd () == 0) {
            self._localStream = TcpStream::connect (SockAddrV4::new (Ipv4::LOCALHOST, self._port));
            self._localStream:.rawSend (name.len);
            self._localStream:.rawSend (name);
            
            let mut exists = false;
            self._localStream:.rawReceive (alias &exists);
        } catch {
            _ => {
                throw ActorError::new ("No local actor "s8 ~ name);
            }
        }

        println ("New actor : ", name);
                   
        ActorRef::new (name, alias self._localStream)            
    }

    /**
     * Create an actor ref connected to an actor managed by a remote actor system
     * @params: 
     *    - name: the name of the actor
     *    - addr: the remote address of the remote actor system
     * @returns: an actor ref to send message to an actor declared in this local system
     */
    pub def remoteActor (self, name : [c8], addr : &SockAddress) -> dmut &ActorRef
        throws &ActorError
    {
        import std::conv;
        
        {
            let dmut stream = TcpStream::connect (addr);
            stream:.rawSend (name.len);
            stream:.rawSend (name);

            let mut exists = false;
            stream:.rawReceive (alias &exists);
            if (exists) {
                    return ActorRef::new (name, alias stream);            
            }
        } catch {
            _ => {
                throw ActorError::new ("Connection failed to remote system"s8 ~ std::conv::to![c8] (addr));
            }
        }
        
        throw ActorError::new ("No remote actor  "s8 ~ name ~ " at "s8 ~ std::conv::to![c8] (addr));
    }

    /**
     * Close the actor system, and the actors running
     * @warning: This functions waits for the end of the treatment of already submitted messages. If these treatments are infinite loops, this function will never return
     */
    pub def terminate (mut self) {
        self._poisonPill:.rawSend (true)?;
        
        self._th.join ();
        self._pool:.cancel ();        
        
        atomic self {
            self._actors:.clear ();
        }
    }
    
    /**
     * Wait for the actor system to finish.
     * @warning: this will happen only if all registered actor are killed, and the system is terminated, otherwise this function will never return.
     */
    pub def join (mut self)-> void {
        self._pool:.join ();
        self._th.join ();        
    }
     
    /**
     * The thread part of the actor system
     * This function run in background, accept new client connections, and client messages
     */
    prv def run (mut self, _ : Thread) {
        let dmut pill = {
            alias self._listener:.accept ()
        } catch {
            x : _ => { println (x); return {} }
        }
        
        let acceptSock = self._listener.getFd ();
        
        let dmut polls : [pollfd_t] = [pollfd_t (acceptSock, PollEvent::POLLIN),
                                       pollfd_t (pill.getFd (), PollEvent::POLLIN)];

        let dmut clients : [&TcpStream] = [alias pill];

        while self._isRunning {
            if (poll (polls.ptr, polls.len, 5000u32) > 0) {                
                let mut current_len = polls.len;
                let mut closing = false;
                for i in 0us .. current_len {
                    if (polls [i].revents == PollEvent::POLLIN) {                        
                        if (i == 0us) {
                            {
                                let dmut str = self._listener:.accept ();
                                let name = self.receiveName (alias str);
                                atomic self {
                                    if (name in self._actors) {
                                        str:.rawSend (true);
                                    } else {
                                        str:.rawSend (false);
                                    }
                                }
                                
                                clients = alias (clients ~ [alias str]);
                                polls = alias (polls ~ [pollfd_t (str.getFd (), PollEvent::POLLIN)]);
                            } catch {
                                x : &TcpError => {
                                    println (x);
                                }
                            }
                        } else if (i == 1us) { // the second is the poison pill
                            let mut b = false;
                            pill:.rawReceive (alias &b)?;
                            self._isRunning = false;
                        } else if (clients [i - 1us].isAliveRead ()) {
                            {
                                let name = self.receiveName (alias clients [i - 1us]);
                                atomic self {
                                    let dmut actor = (alias self._actors)[name];
                                    let obj = clients [i - 1us]:.receive ();
                                    self._pool:.submit (move || {
                                        atomic actor {
                                            actor:.receive (obj);
                                        }
                                    });
                                }
                                
                            } catch {
                                x : _ => {                                    
                                    println ("Failure ? :", x);                                    
                                    closing = true;                            
                                    clients [i - 1us]:.dispose ();
                                    polls [i] = pollfd_t (-1, PollEvent::NONE);
                                }                                
                            }
                        } else {
                            closing = true;                            
                            clients [i - 1us]:.dispose ();
                            polls [i] = pollfd_t (-1, PollEvent::NONE); 
                        }                    
                    } 
                }
                
                if (closing) {
                    let mut i = 0us;
                    while i < polls.len {
                        if (polls [i].fd == -1) {
                            polls = alias (polls [0us .. i] ~ polls [i + 1us .. $]);
                            if (i != 0us) {
                                clients = alias (clients [0us .. i - 1us] ~ clients [i .. $]);
                            }
                        }
                        i += 1us;
                    }
                }
            }
        }
    }        
    

    /**
     * Receive the name of an actor from a client tcp stream
     * @params: 
     *    - client: the stream on which the name of the actor will be read
     * @returns: the name of the actor that was read
     */
    prv def receiveName (self, dmut client : &TcpStream) -> [c8]
        throws &TcpError
    {
        let dmut size  = 0us;        
        client:.rawReceive (alias &size);
        client:.rawReceive!{c8} (size)
    }


    impl Disposable {

        /**
         * Close the tcp listener and all alive connections
         */
        pub over dispose (mut self) {
            self:.terminate ();
            self._listener:.dispose ();
        }        
    }

    __dtor (mut self) {
        self:.dispose ();
    }
    
}
