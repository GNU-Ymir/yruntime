mod std::concurrency::sync;

import core::typeinfo;
import etc::runtime::thread;

/**
 * Mutex are used to perform synchronization between basic threads
 * @example: 
 * ===========
 * let mutex = Mutex::new ();
 * {
 *     mutex.lock (); 
 *     // Do some atomic computation
 * } exit {
 *     mutex.unlock ();
 * }
 * ===========
 */
pub class @final Mutex {

    pub let _lock : _yrt_thread_mutex_t;

    /**
     * New mutex that allows synchronization between threads
     */
    pub self () with _lock = _yrt_thread_mutex_t::init {
        _yrt_thread_mutex_init (&self._lock, null);
    }

    /**
     * Wait for the mutex to be free
     * And then lock it
     */
    pub def lock (self) {
        _yrt_thread_mutex_lock (&self._lock);
    }

    /**
     * Unlock the mutex
     */
    pub def unlock (self) {
        _yrt_thread_mutex_unlock (&self._lock);            
    }
    
}

/**
 * Semaphore are used to perform synchronization between basic threads
 */
pub class @final Semaphore {

    let _sem : sem_t;
    
    pub self () with _sem = sem_t::init {
        _yrt_thread_sem_init (&self._sem, 0, 0);
    }
    
    pub def post (self) {
        _yrt_thread_sem_post (&self._sem);
    }
    
    pub def wait (self) {
        _yrt_thread_sem_wait (&self._sem);
    }
    
}
    
pub class @final Condition {
    
    let _cond : _yrt_thread_cond_t;
    
    pub self () with _cond = _yrt_thread_cond_t::init {
        _yrt_thread_cond_init (&self._cond, null);
    }
    
    pub def wait (self, mutex : &(Mutex)) {
        _yrt_thread_cond_wait (&self._cond, &mutex._lock);
    }
    
    pub def signal (self) {
        _yrt_thread_cond_signal (&self._cond);
    }
    
}

