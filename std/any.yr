/**
 * This module register the class type `Any` that can encapsulate any
 * value, primitive or user defined.  It uses the the strength of
 * pattern matching to perform the type specialization and
 * retreival. 
 * <br>
 * It can be considered as some kind of option type, where
 * in addition to have optional value, it can have different types.
 * @Authors: Emile Cadorel
 * @Licence: GPLv3 
 * <hr>
 * @example:
 * ===
 * import std::io, std::any, std::conv;
 * 
 * /*
 *  * Function that can return anything
 *  */ 
 * def foo (x : i32)-> &Any {
 *     if (x < 10) {
 *         Some::new (14) // returns a i32, if x < 10
 *     } else if (x < 100) {
 *         Some::new ("foo"s8) // returns a [c8] if x < 100 and x >= 10
 *     } else { 
 *         None::new () // returns nothing if x >= 100
 *     }
 * }
 *
 * def main () {
 *     let a = foo (27); // foo can return anything
 *  
 *     // One can use pattern matching to safely unwrap the Any type
 *     match a { 
 *        x : &Some!{i32} => 
 *            println (x.unwrap ()); // maybe its an i32
 *        y : &Some!{f32} => 
 *            println (y.unwrap ()); // maybe its an f32
 * 
 *        Some!{i64} (val-> z : _) => 
 *            println (z); // unwrapping can also be made by accessing the public value `val`
 *     }
 * 
 *     // Or by using catching scope guard
 *     {
 *        println (a.unwrap!{[c8]} ()); // Maybe its a [c8]
 *     } catch {
 *        x : &CastFailure => // unwraping failed (cf. std::conv)
 *            println ("Failed to unwrap to [c8] :\\n"s8, x);
 *     }
 * }
 * ===
 */

mod std::any;
import std::conv;
import std::io, std::stream;

/** 
 * You will see this importation in many std files 
 * Std is compiled with -nostdinc (obviously), so core files are not automatically include
 * but we need typeinfo to declare classes
 */
import core::typeinfo;

/**
 * An any type, that can store anything
 * <br>
 * This type is immutable, so it only can store immutable value
 * 
 */
pub class @abstract Any {

    /**
     * The class is abstract, 
     * only the successor have acces to the constructor
     */
    prot self () {}

    /**
     * Transform self into T
     * @throws: 
     *     - CastFailure: if self doen't store a value of type T
     * @templates: 
     *    - T: any type
     */
    pub def unwrap {T} (self) -> T
        throws &CastFailure
    {
        match (self) {
            s : &Some!{T} => { return s.unwrap () }
            _ : &Any => { throw CastFailure::new ((Some!T)::typeinfo, self::typeinfo) }
        }
    }

    /**
     * An any type is printable
     */
    impl Streamable;

}


/**
 * An any value, that actually store a value
 * @Templates: 
 *    - T: the type of the value to store
 * @info: the stored value is immutable
 */
pub class Some {T} over Any {

    // The value
    pub let val : T;

    /**
     * Create a value on the heap that store the value `val`
     * @info: the stored value is immutable but not pure
     * @params: 
     *    - val: a value of type T
     */
    pub self (val : T) with val = val {}

    /**
     * @returns: the value stored
     */    
    pub def unwrap (self)-> T {
        self.val
    }
    
    
    impl Streamable {

        pub over toStream (self, dmut stream : &StringStream) {
            cte if (__pragma!compile ({ stream:.write (self.val); })) {
                stream:.write (self.val);
            } else {
                stream:.write (T::typeid);
            }
        }
    }
        
}

/**
 * An any value, that stores nothing
 * It can be used as a unit type 
 */
pub class None over Any {

    /**
     * Stores nothing
     */
    pub self () {}

    impl Streamable {

        pub over toStream (self, dmut stream : &StringStream) {
            stream:.write (typeof (self)::typeid);
        }
        
    }
    
}
