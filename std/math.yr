/**
 * This module defines some common mathematical constants and functions.
 * @Authors: Emile Cadorel
 * @License: GPLv3
 */

mod std::math;


/**
 * τ = 2 * π.
 */                     
pub aka TAU =        6.28318530717958647692;

/**
 * π
 */
pub aka PI =         3.14159265358979323846;

/**
 * π / 2.
 */
pub aka PI_2 =       1.57079632679489661923;

/**
 * π / 4.
 */
pub aka PI_4 =       0.785398163397448309616;

/**
 * 1 / π.
 */
pub aka M_1_PI =     0.318309886183790671538;

/**
 * 2 / π.
 */
pub aka M_2_PI =     2.0*M_1_PI;                              


mod Runtime {
    pub extern (C) fn sqrt (x : f64)-> f64;
    pub extern (C) fn sqrtf (x : f32)-> f32;
    pub extern (C) fn roundf (x : f32)-> f32;

    pub extern (C) fn asinf (x : f32)-> f32;
    pub extern (C) fn sinf (x : f32)-> f32;
    
    pub extern (C) fn acosf (x : f32)-> f32;
    pub extern (C) fn cosf (x : f32)-> f32;

    pub extern (C) fn atanf (x : f32)-> f32;
    pub extern (C) fn atan2f (x : f32, y : f32)-> f32;
    pub extern (C) fn tanf (x : f32)-> f32;

    pub extern (C) fn asin (x : f64)-> f64;
    pub extern (C) fn sin (x : f64)-> f64;
    
    pub extern (C) fn acos (x : f64)-> f64;
    pub extern (C) fn cos (x : f64)-> f64;

    pub extern (C) fn atan (x : f64)-> f64;
    pub extern (C) fn atan2 (x : f64, y : f64)-> f64;
    pub extern (C) fn tan (x : f64)-> f64;

    pub extern (C) fn fmodf (f : f32, m : f32)-> f32;
    pub extern (C) fn fmod (f : f64, m : f64)-> f64;
}

/**
 * @returns: the square root of `x`.
 */
pub fn sqrt (x : f32)-> f32 {
    Runtime::sqrtf (x)
}

/**
 * @returns: the square root of `x`.
 */
pub fn sqrt (x : f64)-> f64 {
    Runtime::sqrt (x)
}

/**
 * @returns: `x` to the power of `y`.
 */
pub fn pow (x : isize, y : isize)-> isize {
    let mut res = x;
    for _ in 0is .. y {
        res = res * x;
    }
    res
}

/**
 * @returns: `x` rounded to `nb` numbers after the decimal point.
 */
pub fn round (x : f32, nb : u32)-> f32 {
    import std::conv;
    let p = pow (10is, cast!isize (nb)).to!f32 ();
    Runtime::roundf (x * p) / p 
}

/**
 * @returns: arc sin value of `x` expressed in radians.
 */
pub fn asin (x : f32)-> f32 {
    Runtime::asinf (x)
}

/**
 * @returns: sin value of `x` expressed in radians.
 */
pub fn sin (x : f32)-> f32 {
    Runtime::sinf (x)
}

/**
 * @returns: arc cos value of `x` expressed in radians.
 */
pub fn acos (x : f32)-> f32 {
    Runtime::acosf (x)
}

/**
 * @returns: cos value of `x` expressed in radians.
 */
pub fn cos (x : f32)-> f32 {
    Runtime::cosf (x)
}

/**
 * @returns: arc tan value of `x` expressed in radians.
 */
pub fn atan (x : f32)-> f32 {
    Runtime::atanf (x)
}

/**
 * @returns: arc tangent of `y/x` expressed in radians.
 */
pub fn atan2 (x : f32, y : f32)-> f32 {
    Runtime::atan2f (x, y)
}

/**
 * @return: the tangent value of `x` expressed in radians.
 */
pub fn tan (x : f32)-> f32 {
    Runtime::tanf (x)
}

/**
 * @returns: arc sin value of `x` expressed in radians.
 */
pub fn asin (x : f64)-> f64 {
    Runtime::asin (x)
}

/**
 * @returns: sin value of `x` expressed in radians.
 */
pub fn sin (x : f64)-> f64 {
    Runtime::sin (x)
}

/**
 * @returns: arc cos value of `x` expressed in radians.
 */
pub fn acos (x : f64)-> f64 {
    Runtime::acos (x)
}

/**
 * @returns: cos value of `x` expressed in radians.
 */
pub fn cos (x : f64)-> f64 {
    Runtime::cos (x)
}

/**
 * @returns: arc tangent value of `x` expressed in radians.
 */
pub fn atan (x : f64)-> f64 {
    Runtime::atan (x)
}

/**
 * @returns: arc tangent value of `y/x` expressed in radians.
 */
pub fn atan2 (x : f64, y : f64)-> f64 {
    Runtime::atan2 (x, y)
}

/**
 * @returns: tangent value of `x` expressed in radians.
 */
pub fn tan (x : f64)-> f64 {
    Runtime::tan (x)
}

/**
 * @returns: the floating point remainder of `x / b` (rounded toward 0)
 */
pub fn fmod (x : f32, b : f32)-> f32 {
    Runtime::fmodf (x, b)
}

/**
 * @returns: the floating point remainder of `x / b` (rounded toward 0)
 */
pub fn fmod (x : f64, b : f64)-> f64 {
    Runtime::fmod (x, b)
}
