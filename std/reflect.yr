/**
 * This module implements utility functions for reflective
 * programming. Reflection is used for example in the module
 * `std::net::packet` to create a class from a packet of
 * bytes. Reflection is the ability to call function, methods and
 * construct class instances during the runtime using named unknown at
 * compilation time. When reflection is a strong semantic it should
 * be used with parsimony.
 * @Authors: Emile Cadorel 
 * @License: GPLv3
 */

mod std::reflect;

import etc::runtime::reflect;
import std::any;
import std::collection::vec;

import core::typeinfo, core::object;
import core::exception;


/**
 * Instantiate an object from the typeid of a class. The class must
 * have a constructor with no parameters for the function to work
 * properly, as this is the constructor that will be called by the
 * factory. 
 * @params: 
 *    - name: the typeid of the class (full typeid)
 * @returns: the instantiated object
 * @throws:
 *    - &RuntimeError: if the instanciation failed :
 *        + the class does not exist
 *        + It has no constructor with no parameter
 * @example: 
 * ===========
 * mod main;
 * import std::reflect;
 * import std::io;
 * 
 * class X {
 *    pub let i = 42;
 * 
 *    pub self () {}
 *    impl Streamable;
 * }
 * 
 * // Instanciate and construct a value of type main::X.
 * // The full path name is mandatory
 * let dmut o = factory ("main::X"s8)?;
 * 
 * match o {
 *   Ok (X (i -> i : i32)) => { // Got a valid instance of main::X
 *       println ("Created an X (", i, ")");
 *   }
 *   
 *   Err (err : _) => println ("Failed to create X due to : ", err);
 * }
 * ===========
 */
pub def factory (name : [c8]) -> dmut &Object
    throws &RuntimeError
{
    let mangled = _yrt_mangle_path (name);
    let dmut ret = _yrt_reflect_create_class_from_name (mangled);
    alias ret
}


/**
 * Call a function using its string name. The name of the function must be the full path of the function (module::name)
 * @warning: function call does not work if any function parameter is mutable.
 * @params: 
 *    - name: the path name of the function
 *    - params: the list of parameter to pass to the function
 * @returns: the value returned by the called function.
 * @throws: 
 *    - &RuntimeError: if the function does not exists
 * @example: 
 * ==========
 * mod main;
 * import std::reflect, std::io;
 * 
 *
 * def foo (x : i32)-> i32 {
 *     x + 12
 * }
 *
 * def bar (x : i32, f : f32)-> void {
 *     println ("Bar : ", x, " ", y);
 * }
 * 
 * // Call the function foo declared in the module main, and returning a value of type i32
 * let z = ("main::foo"s8).call!{i32} (30);
 * assert (z == 42);
 *
 * // Call the function bar that takes two parameter and returns nothing
 * ("main::bar"s8).call!{void} (89, 34.65f);
 * ==========
 */
pub def call {T, F...} (name : [c8], params : F) -> T
    throws &RuntimeError
{
    import std::conv;
    let dmut names = Vec!{[c8]}::new ();
    cte if (is!F {U of (J,), J...}) {
        for i in params {
            names:.push ((__pragma!mangle (typeof (i))).to![c8]());
        }
    } else {
        names:.push ((__pragma!mangle (typeof (params))).to![c8] ());
    }
    
    let ret = Reflect!{fn (F)-> T}::_yrt_reflect_get_function (_yrt_mangle_path (name), (__pragma!mangle (T)).to![c8] (), names[]);
    ret (expand params)
}

    
/**
 * Call a function using its string name. The name of the function must be the full path of the function (module::name).
 * @params: 
 *    - name: the full path name of the function
 * @returns: the value returned by the called function.
 * @throws: 
 *    - &RuntimeError: if the function does not exists
 * @example: 
 * ==========
 * mod main;
 * import std::reflect;
 * import std::io;
 *
 * def foo ()-> i32 {
 *     42
 * }
 *
 * def bar () {
 *    println ("In function bar");
 * }
 *
 * // Call the function foo with no parameters
 * let z = ("main::foo"s8).call!{i32} ();
 * assert (z == 42);
 * 
 * // Call the function bar that takes no parameter and returns nothing
 * ("main::bar"s8).call!{void} ();
 * ==========
 */
pub def call {T} (name : [c8]) -> T
    throws &RuntimeError
{
    import std::conv;

    let ret = Reflect!{fn ()-> T}::_yrt_reflect_get_function (_yrt_mangle_path (name), (__pragma!mangle (T)).to![c8] (), []);
    ret ()
}

/**
 * Call a method using its string name.
 * @params: 
 *    - s: the instance that calls the method
 *    - name: the name of the method to call
 *    - params: the list of parameters to pass to the method
 * @returns: the value returned by the method.
 * @warning: function call does not work if any function parameter is mutable
 * @throws: 
 *    - &RuntimeError: if the method does not exist
 * @example: 
 * ==========
 * mod main;
 * import std::reflect;
 * import std::io;
 *
 * class X {
 *    let i : i32;
 *    pub self (i : i32) with i = i {}
 * 
 *    pub def foo (self, i : i32) -> i32 {
 *        self.i + i
 *    }
 * }
 * 
 *
 * 
 * let x = X::new (12);
 *
 * // Call the method foo of the class X, using the instance x
 * let z = x.callMethod!{i32} ("foo"s8, 30);
 * assert (z == 42);
 * 
 * // this calling can be made on instances with dynamic types
 * class Z over X {
 *      pub self () with super (89) {}
 * 
 *      pub def bar (self, i : i32, j : i32)-> i32 {
 *          println ("Inside bar of Z ");
 *          self.foo (i) + self.foo (j)
 *      }     
 * }
 *
 * let child : &X = Z::new ();
 * 
 * // child is of type &X at compile time, but of type &Z at runtime
 * let z2 = child.callMethod!{i32} ("bar"s8, 1, 2);
 * assert (z2 == 181);
 * ==========
 */
pub def callMethod {T, class S, F...} (s : S, name : [c8], params : F) -> T
    throws &RuntimeError
{
    import std::conv;
    let dmut names = Vec!{[c8]}::new ();
    cte if (is!F {U of (J,), J...}) {
        for i in params {
            names:.push ((__pragma!mangle (typeof (i))).to![c8] ());
        }
    } else {
        names:.push ((__pragma!mangle (typeof (params))).to![c8] ());
    }

    let s_name = _yrt_mangle_path (s::typeinfo.name.to![c8] ());
    let ret = Reflect!{fn (S, F)-> T}::_yrt_reflect_get_method (s_name, name, ( __pragma!mangle (T)).to![c8] (), names[]);
    ret (s, expand params)
}

/**
 * Call a method using its string name.
 * @params: 
 *    - s: the instance that will call the method.
 *    - name: the name of the method to call.
 * @returns: the value returned by the called method.
 * @throws: 
 *    - &RuntimeError: if the method does not exist
 * @example: 
 * ==========
 * mod main;
 * import std::reflect;
 * import std::io;
 *
 * class X {
 *    let i : i32;
 *    pub self (i : i32) with i = i {}
 * 
 *    pub def foo (self) -> i32 {
 *        self.i
 *    }
 * }
 * 
 * let x = X::new (12);
 * let z = x.callMethod!{i32} ("foo"s8);
 * assert (z == 12);
 *
 * // this calling can be made on instances with dynamic types
 * class Z over X {
 *      pub self () with super (89) {}
 * 
 *      pub def bar (self)-> i32 {
 *          println ("Inside bar of Z ");
 *          self.foo () + self.foo ()
 *      }     
 * }
 *
 * let child : &X = Z::new ();
 * 
 * // child is of type &X at compile time, but of type &Z at runtime
 * let z2 = child.callMethod!{i32} ("bar"s8);
 * assert (z2 == 178);
 * ==========
 */
pub def callMethod {T, class S} (s : S, name : [c8]) -> T
    throws &RuntimeError
{
    import std::conv;
    
    let s_name = _yrt_mangle_path (s::typeinfo.name.to![c8] ());
    let ret = Reflect!{fn (S)-> T}::_yrt_reflect_get_method (s_name, name, (__pragma!mangle (T)).to![c8] (), []);
    ret (s)
}

/**
 * Call a mutable method using its string name.
 * @params: 
 *    - s: the mutable instance that will call the method.
 *    - name: the method to call
 *    - params: the list of parameters to pass to the method.
 * @returns: the value returned by the method.
 * @warning: function call does not work if any function parameter is mutable (other than the class instance).
 * @info: as for the immutable version, this function can use dynamic types (cf `std::reflect::callMethod`).
 * @example: 
 * ==========
 * mod main;
 * import std::reflect;
 * import std::io;
 *
 * class X {
 *     let mut i = 0;
 *     pub self () {}
 *     
 *     pub def foo (mut self, i : i32) -> i32 {
 *         self.i = 12;
 *         self.i + i
 *      }
 * }
 *  
 * let dmut z = X::new ();
 * 
 * // Calling the mutable method foo on the mutable instance z 
 * let v = z:.callMethodMutable!{i32} ("foo"s8, 30);
 * assert (v == 42);
 *  
 *  
 * // this calling can be made on instances with dynamic types
 * class Z over X {
 *     pub self () with super () {}
 *     
 *     pub def bar (mut self, i : i32, j : i32)-> i32 {
 *         println ("Inside bar of Z ");
 *         self:.foo (i) + self:.foo (j)
 *     }     
 * }
 *  
 * let dmut child : &X = Z::new ();
 *  
 * // child is of type &X at compile time, but of type &Z at runtime
 * let z2 = child:.callMethodMutable!{i32} ("bar"s8, 1, 2);
 * assert (z2 == 27);
 * ==========
 */
pub def callMethodMutable {T, class S, F...} (dmut s : S, name : [c8], params : F) -> T
    throws &RuntimeError
{
    import std::conv;
    
    let dmut names = Vec!([c8])::new ();
    cte if (is!F {U of (J,), J...}) {
        for i in params {
            names:.push ((__pragma!mangle (typeof (i))).to![c8] ());
        }
    } else {
        names:.push ((__pragma!mangle (typeof (params))).to![c8] ());
    }

    let s_name = _yrt_mangle_path (s::typeinfo.name.to![c8] ());
    let ret = Reflect!{fn (dmut S, F)-> T}::_yrt_reflect_get_method_mutable (s_name, name, (__pragma!mangle (T)).to![c8] (), names[]);
    
    ret (alias s, expand params)
}


/**
 * Call a mutable method using its string name.
 * @params: 
 *    - s: the mutable instance that will call the method.
 *    - name: the method to call
 * @returns: the value returned by the method.
 * @info: as for the immutable version, this function can use dynamic types (cf `std::reflect::callMethod`).
 * @example: 
 * ==========
 * mod main;
 * import std::reflect;
 * import std::io;
 *
 * class X {
 *     let mut i = 0;
 *     pub self () {}
 *     
 *     pub def foo (mut self) -> i32 {
 *         self.i = 12;
 *         self.i
 *      }
 * }
 *  
 * let dmut z = X::new ();
 * 
 * // Calling the mutable method foo on the mutable instance z 
 * let v = z:.callMethodMutable!{i32} ("foo"s8);
 * assert (v == 12);
 *  
 *  
 * // this calling can be made on instances with dynamic types
 * class Z over X {
 *     pub self () with super () {}
 *     
 *     pub def bar (mut self)-> i32 {
 *         println ("Inside bar of Z ");
 *         self:.foo () + self:.foo ()
 *     }     
 * }
 *  
 * let dmut child : &X = Z::new ();
 *  
 * // child is of type &X at compile time, but of type &Z at runtime
 * let z2 = child:.callMethodMutable!{i32} ("bar"s8);
 * assert (z2 == 24);
 * ==========
 */
pub def callMethodMutable {T, class S} (dmut s : S, name : [c8])-> T
    throws &RuntimeError
{
    import std::conv;
    
    let s_name = _yrt_mangle_path (s::typeinfo.name.to![c8] ());
    let ret = Reflect!{fn (dmut S)-> T}::_yrt_reflect_get_method_mutable (s_name, name, (__pragma!mangle (T)).to![c8] (), []);
    ret (alias s)
}

/**
 * Call method declared inside an implement block. The name of the impl method must be the full path name of the method inside the trait declaring it.
 * @params: 
 *     - s: the class instance
 *     - name: the name of the implemented method.
 *     - params: the list of parameters to pass to the method
 * @returns: the value returned by the method
 * @throws:
 *    - &RuntimeError: if the method was not found
 * @example:
 * ===
 * mod main;
 * import std::reflect, std::io;
 * 
 * trait MyTrait {
 *    pub def foo (mut self, i : i32) {
 *        self.i = i;
 *    }
 * }
 *
 *
 * class X {
 *     pub let mut i = 0;
 *     pub self () {}
 * 
 *     impl MyTrait;
 * } 
 * 
 * let dmut x = X::new ();
 * x:.callImplMutable!{void} ("main::MyTrait::foo"s8, 89);
 * 
 * assert (x.i == 89);
 * ===
 */
pub def callImplMutable {T, class S, F...} (dmut s : S, name : [c8], params : F) -> T
    throws &RuntimeError
{
    {
        import std::conv;
        
        let dmut names = Vec!([c8])::new ();
        cte if (is!F {U of (J,), J...}) {
            for i in params {
                names:.push ((__pragma!mangle (typeof (i))).to![c8] ());
            }
        } else {
            names:.push ((__pragma!mangle (typeof (params))).to![c8] ());
        }
        
        let s_name = _yrt_mangle_path (s::typeinfo.name.to![c8] ());
        let ret = Reflect!{fn (dmut S, F)-> T}::_yrt_reflect_get_impl_method_mutable (s_name, name, (__pragma!mangle (T)).to![c8] (), names[]);
        ret (alias s, expand params)
    } 
}


/**
 * Call method declared inside an implement block. The name of the impl method must be the full path name of the method inside the trait declaring it.
 * @params: 
 *     - s: the class instance
 *     - name: the name of the implemented method.
 *     - params: the list of parameters to pass to the method
 * @returns: the value returned by the method
 * @throws:
 *    - &RuntimeError: if the method was not found
 * @example:
 * ===
 * mod main;
 * import std::reflect, std::io;
 * 
 * trait MyTrait {
 *    pub def foo (self, i : i32)-> i32 {
 *        self.i + i;
 *    }
 * }
 *
 *
 * class X {
 *     pub let i : i32;
 *     pub self (i : i32) with i = i {}
 * 
 *     impl MyTrait;
 * } 
 * 
 * let dmut x = X::new (12);
 * let res = x:.callImplMutable!{void} ("main::MyTrait::foo"s8, 30);
 * 
 * assert (res == 42);
 * ===
 */
pub def callImpl {T, class S, F...} (s : S, name : [c8], params : F) -> T
    throws &RuntimeError
{
    {
        import std::conv;
        
        let dmut names = Vec!([c8])::new ();
        cte if (is!F {U of (J,), J...}) {
            for i in params {
                names:.push ((__pragma!mangle (typeof (i))).to![c8] ());
            }
        } else {
            names:.push ((__pragma!mangle (typeof (params))).to![c8] ());
        }
        
        let s_name = _yrt_mangle_path (s::typeinfo.name.to![c8] ());
        let ret = Reflect!{fn (S, F)-> T}::_yrt_reflect_get_impl_method (s_name, name, (__pragma!mangle (T)).to![c8] (), names[]);
        ret (s, expand params)
    } 
}
