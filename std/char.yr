/**
 * Some utility functions on ASCII and Unicode characters.
 * There are two sets of functions, verifications `isX` and conversions `toX`.
 * @Authors: Emile Cadorel
 * @License: GPLv3
 */

mod std::char;
import std::algorithm::searching;


/**
 * @returns: true if `c` is a punctuation
 */
pub fn isPunctuation (c : c32)-> bool {
    match ['!', '"', '#', '$', '%', '&', '\'', '(', ')', '*', '+', '-', '.', '/', ':', ';', ' ', '?', '@', '[', '\\', ']', '^', '_', '`', '{', '|', '}', '~', '\n', ','].find (c) {
        Ok () => true
            _ => false
    }
}

/**
 * @returns: true if `c` is a punctuation
 */
pub fn isPunctuation (c : c8)-> bool {
    match ['!'c8, '"'c8, '#'c8, '$'c8, '%'c8, '&'c8, '\''c8, '('c8, ')'c8, '*'c8, '+'c8, '-'c8, '.'c8, '/'c8, ':'c8, ';'c8, ' 'c8, '?'c8, '@'c8, '['c8, '\\'c8, ']'c8, '^'c8, '_'c8, '`'c8, '{'c8, '|'c8, '}'c8, '~'c8, '\n'c8, ','c8].find (c) {
        Ok () => true
            _ => false
    }
}

/**
 * @returns: true if `c` is a letter in A..Z, a..z
 */
pub fn isAlpha (c : c32)-> bool {
    if c >= 'A' && c <= 'Z' { return true; }
    if c >= 'a' && c <= 'z' { return true; }
    false
}

/**
 * @returns: true if `c` is a letter in A ... Z, a ... z
 */
pub fn isAlpha (c : c8)-> bool {
    if c >= 'A'c8 && c <= 'Z'c8 { return true; }
    if c >= 'a'c8 && c <= 'z'c8 { return true; }
    false
}

/**
 * @returns: true if `c` is a lower case letter a ... z
 */
pub fn isLower (c : c32)-> bool {
    if c >= 'a' && c <= 'z' { true }
    else { false }
}

/**
 * @returns: true if `c` is a lower case letter a ... z
 */
pub fn isLower (c : c8)-> bool {
    if c >= 'a'c8 && c <= 'z'c8 { true }
    else { false }
}

/**
 * @returns: true if `c` is an upper case letter A ... Z
 */
pub fn isUpper (c : c32)-> bool {
    if c >= 'A' && c <= 'Z' { true }
    else { false }
}

/**
 * @returns: true if `c` is an upper case letter A ... Z
 */
pub fn isUpper (c : c8)-> bool {
    if c >= 'A'c8 && c <= 'Z'c8 { true }
    else { false }
}

/**
 * @returns: true if `c` is ascii char (in range 0 ... 0x7f)
 */
pub fn isAscii (c : c32)-> bool {
    if c <= cast!c32 (cast!c8 (0x7fu8)) { true }
    else { false }
}

/**
 * @returns: true
 */
pub fn isAscii (_ : c8)-> bool {
    true
}

/**
 * @returns: true if `c` is a digit 0..9
 */
pub fn isDigit (c : c32)-> bool {
    if c >= '0' && c <= '9' { true }
    else { false }
}

/**
 * @returns: true if `c` is a digit in decimal 0 ... 9
 */
pub fn isDigit (c : c8)-> bool {
    if c >= '0'c8 && c <= '9'c8 { true }
    else { false }
}

/**
 * @returns: true if `c` is a digit in base 8 (0 ... 7)
 */
pub fn isOctalDigit (c : c32)-> bool {
    if c >= '0' && c <= '7' { true }
    else { false }
}

/**
 * @returns: true if `c` is a digit in base 8 (0 ... 7)
 */
pub fn isOctalDigit (c : c8)-> bool {
    if c >= '0'c8 && c <= '7'c8 { true }
    else { false }
}

/**
 * @returns: true if `c` is a digit in base 16 (0 ... 9, A ... F, a ... f)
 */
pub fn isHexDigit (c : c32)-> bool {
    if c >= '0' && c <= '9' { true }
    else if c >= 'A' && c <= 'F' { true }
    else if c >= 'a' && c <= 'f' { true }
    else { false }
}

/**
 * @returns: true if `c` is a digit in base 16 (0 ... 9, A ... F, a ... f)
 */
pub fn isHexDigit (c : c8)-> bool {
    if c >= '0'c8 && c <= '9'c8 { true }
    else if c >= 'A'c8 && c <= 'F'c8 { true }
    else if c >= 'a'c8 && c <= 'f'c8 { true }
    else { false }
}

/**
 * @returns: true if `c` is a white char (space, tab, vertical tab, form feed, carriage return and linefeed character)
 */
pub fn isWhite (c : c32)-> bool {
    if c == ' ' { true }
    else if c == '\t' { true }
    else if c == '\v' { true }
    else if c == '\f' { true }
    else if c == '\n' { true }
    else if c == '\r' { true }
    else { false }
}

/**
 * @returns: true if `c` is a white char (space, tab, vertical tab, form feed, carriage return and linefeed character)
 */
pub fn isWhite (c : c8)-> bool {
    if c == ' 'c8 { true }
    else if c == '\t'c8 { true }
    else if c == '\v'c8 { true }
    else if c == '\f'c8 { true }
    else if c == '\n'c8 { true }
    else if c == '\r'c8 { true }
    else { false }
}


/**
 * @returns: `c` to lower case if it was an upper case letter, untransformed `c` otherwise
 */
pub fn toLower (c : c32)-> c32 {
    if c >= 'A' && c <= 'Z' {
        c - 'A' + 'a'
    } else { c }
}

/**
 * @returns: `c` to lower case if it was an upper case letter, untransformed `c` otherwise
 */
pub fn toLower (c : c8)-> c8 {
    if c >= 'A'c8 && c <= 'Z'c8 {
        c - 'A'c8 + 'a'c8
    } else { c }
}

/**
 * @returns: `c` to upper case if it was a lower case letter, untransformed `c` otherwise
 */
pub fn toUpper (c : c32)-> c32 {
    if c >= 'a' && c <= 'z' {
        c - 'a' + 'A'
    } else { c }
}

/**
 * @returns: `c` to upper case if it was a lower case letter, untransformed `c` otherwise
 */
pub fn toUpper (c : c8)-> c8 {
    if c >= 'a'c8 && c <= 'z'c8 {
        c - 'a'c8 + 'A'c8
    } else { c }
}
