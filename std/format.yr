mod std::format;
import std::conv;
import std::traits;
import std::stream;
import std::io;
import core::exception, core::object, core::array;

/**
 * Exception thrown by the format function, when the format is not respected
 * This exception contains two fields, 1) index, the index of the error in the format string, 2) msg, the diagnosis of the error
 * @example: 
 * ==============
 * { 
 *     let _ = format ("{1:}", 12);
 * } catch {
 *    err : &FormatError => { assert (err.index == 2us && err.msg == "No argument 1"); }
 * }
 * ==============
 */
pub class FormatError over Exception {
    pub let index : usize;
    pub let msg : [c32];
    
    pub self (index : usize, msg : [c32]) with index = index, msg = msg {}

    impl Streamable {
        pub over toStream (self, dmut stream : &StringStream) {
            self::super.toStream (alias stream);
        }
    }
}

/**
 * The common format function available in many languages. 
 * The grammar of the format string : 
 * @verbatim:
 * =================
 * format_string := (any_c8 | maybe_format)*
 * maybe_format := ('{' '{') | format
 * format := '{' (argument)? (':' format_spec)? '}'
 * argument := ([0-9]*)
 * 
 * format_spec := (fill align)? (sign)? (type)? (width)? ('.' precision)?
 * fill := any_c8
 * align := '<' | '^' | '>'
 * sign := '+'
 * width := ([0-9])* | '*'
 * precision := ([0-9])* | '*'
 * =================
 * 
 * @example:
 * ================
 * let f = format ("{{{:=^*.*e}}"s8, 20, 3, 314.0); 
 * // arg '3' is centered and formated in scientific format, aligned with '=', the width is the argument '0', the precision the argument '1' and the value '2'
 * assert (f == "{=====3.140e+02======}"s8);
 *
 * let f2 = format ("{1:+<*x} {0}"s8, 10, 255u32);
 * // arg '1' is left aligned and in hex format, width is arg '0'
 * assert (f2 == "0xff+++++ 10"s8);
 *
 * let f3 = format ("{1:->10b} {0}"s8, "foo", 4u32); 
 * // arg '1' is right aligned in binary format, width is 10, and arg '0' is formated after
 * assert (f3 == "----0b100 foo"s8);
 * 
 * let f4 = format ("{} and {}"s8, 1, true);
 * assert (f4 == "1 and true"s8);
 * ================
 * 
 * @params;
 *   - str: the format
 *   - a: the list of values to format
 * @throws: 
 *   - FormatError: if the format is not valid for the type of values
 */
pub def format {T...} (str : [c8], a : T)-> [c8]
    throws &FormatError
{
    let dmut stream = StringStream::new ();
    cte if isTuple!{T} () {
        inner::format (str, a, alias stream);
    } else {
        inner::format (str, (a,), alias stream);
    }
    stream []
}

mod inner {

    pub def format {T of (U,), U...} (str : [c8], a : T, dmut stream : &StringStream)
        throws &FormatError
    {
        let mut i = 0us, mut current = 0us;
        {
            while i < str.len {
                let j = str [i];
                match j {
                    '{'c8 => {
                        if (i + 1us < str.len) {
                            if (str [i + 1us] == '}'c8) {                                
                                inner::formatValue!{T} (a, alias stream, current, i);
                                current += 1us;
                                i += 1us;
                            } else if str [i + 1us] == ':'c8 {
                                let (endIndex, current_) = inner::specialFormat (str [i + 2us .. $], a, alias stream, current, i);
                                current = current_ + 1us;
                                i += endIndex + 2us;
                                if (str [i] != '}'c8) throw FormatError::new (i, "Expected }, not " ~ [cast!c32 (str [i])]);
                            } else if (str [i + 1us] == '{'c8) {
                                stream:.write ('{'c8);
                                i += 1us;
                            } else {
                                let (arg, endIndex_) = getInt (str [i + 1us .. $]);
                                i += endIndex_ + 1us;
                                if (str [i] == '}'c8) inner::formatValue!{T} (a, alias stream, cast!usize (arg), i);
                                else if str [i] == ':'c8 {
                                    let (endIndex, _) = inner::specialFormat!{T} (str [i .. $], a, alias stream, cast!usize (arg), i, explicitIndex-> true);
                                    i += endIndex;
                                    if (str [i] != '}'c8) throw FormatError::new (i, "Expected }, not " ~ [cast!c32 (str [i])]);
                                } else throw FormatError::new (i, "Expected : or }, not " ~ [cast!c32 (str [i])]);
                            }
                        } else {
                            stream:.write (j);
                        }
                    }
                    _ => {
                        stream:.write (j);
                    }
                }
                i += 1us;
            }    
        } catch {
            x : &FormatError => throw x;
            _ => {
                throw FormatError::new (i, "Invalid format");
            }
        }
    }

    prv def specialFormat {T} (str : [c8], a : T, dmut stream : &StringStream, index : usize, explicitIndex : bool = false, globalIndex : usize) -> (usize, usize)
        throws &FormatError
    {
        let mut current = 0us; // 0 = align, 1 = sign, 2 = '#', 3 = width, 4 = precision, 5 = type
        let mut m_index = index;
        let mut align = '\u{0}'c8, mut sign = '\u{0}'c8, mut fill = ' 'c8, mut type = '\u{0}'c8;
        let mut width = 0u32, mut starWidth = false;
        let mut prec  = 0u32, mut starPrec  = false;

        let mut i = 0us;
        {
            while i < str.len {
                let j = str [i];
                if j == '}'c8 break {}
                
                match (current, j) {
                    (0us, '<'c8 | '^'c8 | '>'c8) => { align = j; current = 1us; }
                    (2us, '<'c8 | '^'c8 | '>'c8) => { align = j; current = 1us; fill = sign; sign = '\u{0}'c8; }
                    (0us | 1us, '+'c8) => { sign = j; current = 2us; }
                    (0us ... 4us, '.'c8) => {
                        if str [i + 1us] == '*'c8 {
                            starPrec = true;
                            if !explicitIndex { m_index += 1us; }
                            i += 1us;                            
                        } else {
                            let (_prec, _i) = {
                                inner::getInt (str[i + 1us .. $])
                            } catch {
                                _ => throw FormatError::new (globalIndex + i + 1us, "Expected int value, or *");
                            }
                            i += _i;   
                            prec = _prec;
                        }
                        current = 5us;                        
                    }
                    (0us ... 3us, _) => {
                        match j {
                            'o'c8 | 'x'c8 | 'b'c8 | 'e'c8  => { type = j; current = 6us; }
                            _ => {
                                match str [i + 1us] {
                                    '<'c8 | '^'c8 | '>'c8 => { align = str [i + 1us]; current = 1us; fill = j; }
                                    _ => {
                                        if j != '*'c8 {
                                            let (_width, _i) = {
                                                inner::getInt (str[i .. $])
                                            } catch {
                                                _ => throw FormatError::new (globalIndex + i + 1us, "Expected int value, or *");
                                            }
                                            if (_i != 0us) i += _i - 1us;                                            
                                            width = _width;
                                        } else {
                                            if !explicitIndex { m_index += 1us; }
                                            starWidth = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    (4us ... 5us,  'o'c8 | 'x'c8 | 'b'c8 | 'e'c8) => { type = j; }
                    b : _ => {
                        throw FormatError::new (i + globalIndex, "Invalid format " ~ [cast!c32(b._1)]);
                    }
                    
                }
                i += 1us;
            }
        } catch {
            x : &FormatError => throw x;
            _ => throw FormatError::new (i + globalIndex, "Invalid format");
        }

        formatValue (a, alias stream, fill, align, sign, type, width, starWidth, prec, starPrec, m_index, globalIndex);
        (i, m_index)
    }

    prv def formatValue {T} (a : T, dmut stream : &StringStream, index : usize, globalIndex : usize)
        throws &FormatError
    {
        if (index >= T::arity) { throw FormatError::new (globalIndex, "No argument " ~ index.to![c32] ()); }
        let mut j = 0us;
        for i in a {
            if j == index {
                stream:.write (i);
                return {}
            }
            j += 1us;
        }

    }

    prv def formatValue {T} (a : T, dmut stream : &StringStream, fill : c8, align : c8, sign : c8, type : c8, width : u32, starWidth : bool, prec : u32, starPrec : bool, index : usize, i : usize)
        throws &FormatError
    {
        if (index >= T::arity) { throw FormatError::new (i, "No argument " ~ index.to![c32] ()); }
        let mut j = 0us;
        let mut gotWidth = false, mut gotPrec = false, mut resWidth = cast!usize (width), mut resPrec = prec;
        for x in a {
            if starWidth && !starPrec && j == index - 1us { 
                cte if !isIntegral!{typeof x} () { throw FormatError::new (i, "Alignment width (at position " ~ (index - 1us).to![c32] () ~ " must be an integer"); }
                else {
                    resWidth = cast!usize (x);
                    gotWidth = true;
                }
            } else if starWidth && starPrec && j == index - 2us {
                cte if !isIntegral!{typeof x} () { throw FormatError::new (i, "Alignment width (at position " ~ (index - 2us).to![c32] () ~ " must be an integer"); }
                else {
                    resWidth = cast!usize (x);
                    gotWidth = true;
                }
            } else if starPrec && j == index - 1us {
                cte if !isIntegral!{typeof x} () { throw FormatError::new (i, "Precision (at position " ~ (index - 1us).to![c32] () ~ " must be an integer"); }
                else {
                    resPrec = cast!u32 (x);
                    gotPrec = true;
                }
            } else if j == index {
                if starWidth && !gotWidth { throw FormatError::new (i, "Undefined alignment width for argument at position " ~ index.to![c32] ()); }
                if starPrec && !gotPrec { throw FormatError::new (i, "Undefined precision for argument at position " ~ index.to![c32] ()); }
                let elem = {
                    convertValue (x, sign, type, resPrec)
                } catch {
                    err : &AssertError => throw FormatError::new (i, err.msg);
                }
                
                if elem.len < resWidth {
                    match align {
                        '<'c8 => {
                            stream:.write (elem);
                            for _ in elem.len .. resWidth {
                                stream:.write (fill);
                            }
                        }
                        '>'c8 => {
                            for _ in 0us .. (resWidth - elem.len) {
                                stream:.write (fill);
                            }
                            stream:.write (elem);
                        }
                        _ => {
                            let toAdd = resWidth - elem.len;
                            for _ in 0us .. toAdd / 2us {
                                stream:.write (fill);
                            }
                            stream:.write (elem);
                            for _ in toAdd/2us .. toAdd {
                                stream:.write (fill);
                            }
                        }                            
                    }
                } else {
                    stream:.write (elem);
                }
                return {}
            }            
            j += 1us;
        }
    }

    prv def convertValue {T} (value : T, sign : c8, type : c8, prec : u32) -> [c8]
        throws &AssertError
    {
        cte if isFloating!{T} () {
            let m_prec = if prec == 0u32 { 5u32 } else { prec }
            let mut res = ""s8;
            match type {
                '\u{0}'c8 => { res = value.to![c8] (prec-> m_prec); }
                'e'c8 => { res = value.to!{[c8], "e"} (prec-> m_prec); }
                _ => assert (false, "Invalid type format " ~ [cast!c32 (type)] ~ " for type " ~ T::typeid);
            }
            if sign == '+'c8 && value > cast!T (0.0) { return [sign] ~ res; }
            return res;
        } else cte if isUnsigned!{T} () {
            if prec > 0u32 { assert (false, "Precision only applies on floating types"); }
            let mut res = ""s8;
            match type {
                '\u{0}'c8 => { res = value.to![c8] (); }
                'b'c8 => { res = value.to!{[c8], "b"} (); }
                'o'c8 => { res = value.to!{[c8], "o"} (); }
                'x'c8 => { res = value.to!{[c8], "x"} (); }
                _ => assert (false, "Invalid type format " ~ [cast!c32 (type)] ~ " for type " ~ T::typeid);
            }
            if value > cast!T (0) && sign != '+'c8 { return [sign] ~ res; }
            return res;
        } else cte if is!{T}{U of [C], C of c8} {
            sign;
            if prec > 0u32 { assert (false, "Precision only applies on floating types"); }
            if (type != '\u{0}'c8) {
                assert (false, "Invalid type format " ~ [cast!c32 (type)] ~ " for type " ~ T::typeid);
            }
            return value;
        } else {
            sign;
            if prec > 0u32 { assert (false, "Precision only applies on floating types"); }
            if (type != '\u{0}'c8) {
                assert (false, "Invalid type format " ~ [cast!c32 (type)] ~ " for type " ~ T::typeid);
            }
            return value.to![c8] ();
        }
    }

    prv def getInt (str : [c8])-> (u32, usize)
        throws &CastFailure
    {
        for i in 0us .. str.len {
            if str [i] < '0'c8 || str [i] > '9'c8 { return (str [0us .. i].to!u32 (), i); }
        }

        return (str.to!u32 (), str.len)
    }
        
}
