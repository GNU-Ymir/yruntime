/**
 * This module implements the class `StringStream` to which string can be added without having to reallocate a new string slice for every concatenation.
 * The stringstream can be seen as a specialized version of the class `std::collection::Vec!{c8}`, with easier formatting capabilities to append elements that are not necessarily strings but can be any types.
 * @authors: Emile Cadorel
 * @License: GPLv3
 * <hr>
 * @example: 
 * ===
 * import std::stream;
 * import std::io; // for println
 *
 * class A {
 *     let _i : i32;
 *     pub self (i : i32) with _i = i {}
 * 
 *     // Streamable has a default implementation that stream all fields of the class
 *     impl Streamable;
 * } 
 * 
 * let dmut stream = StringStream::new ();
 * stream:.writeln ("{");
 * 
 * // From now on every new line will be preceded by the string "== "
 * stream:.entabing (txt-> "== "s8);
 * 
 * stream:.writeln (A::new (89)); // A is streamable
 * 
 * // Multiple entabing can be used
 * stream:.entabing (txt-> "--"s8);
 *
 * // Write methods are varidic
 * stream:.writeln (" ", 12, " ", 3.14f); 
 * 
 * // Stop the last entabing (only "== " will be used from now on)
 * stream:.detabing ();
 *
 * // Any type can be written inside a stream
 * stream:.writeln ((1, 2, 3));
 * 
 * // Stop all the entabing
 * stream:.detabing ();
 * stream:.writeln ("}"s8);
 * 
 * // Retreive the content of the stream
 * let str : [c8] = stream[];
 * print (str);
 * 
 * // StringStream are streamable
 * print (stream); // exactly the same as print (stream[]);
 * ===
 */

mod std::stream;

import core::exception, core::typeinfo, core::array;
import core::object, core::dispose;

import std::collection::vec;
import std::io, std::traits;



mod Runtime {F, T} {
    
    /**
     * Runtime unsafe cast of a pointer to another 
     * This is used to initialized the fields even when they are not mutable 
     * This is unsafe but we can argue that if a class has successfuly produced a packet 
     * Then the packet contains a valid class that can be copied as it is
     */
    pub extern (C) def _yrt_unsafe_cast (x : F)-> dmut T;

}

mod DcopyMap {
    pub extern (C) def _yrt_dcopy_map_is_started ()-> bool;
    pub extern (C) def _yrt_purge_dcopy_map ();
    
    pub extern (C) def _yrt_find_dcopy_map (_ : &void)-> dmut &void;
    pub extern (C) def _yrt_insert_dcopy_map (_ : &void, _ : &void);
}


/**
 * Trait to implement for a class to be streamable inside a `StringStream` or printable by `std::io` module functions. 
 * The default implementation of the Streamable traits writes the name of the types followed by the value of all its field withing parentheses. 
 * @example: 
 * ====================
 * class X {
 *     // ...
 *     impl utils::stream::Streamable;
 * }
 *
 * let a = X::new ();
 * let dmut stream = StringStream::new ();
 * stream:.write ("Test on : ", a); 
 * println (stream[]);
 * ====================

 * @warning: 
 * Streamable function stream static typeinfo
 * Which means that for the following example: 
 * ===========
 * mod main;
 * 
 * class Foo {
 *     pub self () {}
 *     
 *     impl std::io::Streamable;
 * }
 * 
 * class Bar over Foo {
 *    pub self () {}
 * }
 * 
 * def main () {
 *     let x = Bar::new ();
 *     let dmut stream = StringStream::new ();
 *     stream:.write (x);
 *     println (stream);
 * }
 * ===========
 * The result will be : 
 * ============
 * main::Foo ()
 * ============
 * Because, `main::Bar` does not reimplement Streamable, so the definition of main::Foo is used. If you want the stream to contain `main::Bar ()`, you just have to implement the trait inside the `Bar` class.
 *
 * @info: The default implementation is able to keep track of the class instances so there won't be any recursive problem as a class instance that is currently written cannot be written again in the same recursive call. 
 */
pub trait Streamable {

    /**
     * Print the content of the class on stdout
     * @returns: true if something has been printed, false otherwise    
     */
    prot def __stream__streamContent (self, dmut stream : &StringStream) -> bool {
        stream;
        cte if (__pragma!compile ({self::super.__stream__streamContent (alias stream);})) {
            let printed = self::super.__stream__streamContent (alias stream);
            if (typeof (__pragma!local_tupleof (self))::arity != 0u32 && printed)
                stream:.write (", "s8);
        }
        
        cte if (typeof (__pragma!local_tupleof (self))::arity != 0u32) {
            let mut j = 0;
            for i in __pragma!local_tupleof (self) {
                if (j != 0) stream:.write (", "s8);
                cte if (__pragma!compile ({stream:.write (i);})) {
                    stream:.write (i);
                } else {
                    stream:.write (typeof (i)::typeid);
                }
                j += 1;
            }
        }
        
        cte (typeof (__pragma!local_tupleof (self))::arity != 0u32)
    }

    /**
     * Print the class name and content into the stream.
     * This default implementation prints the typename followed by the value of the fields between parentheses. If a recursive field is detected only `(...)` is written for the field values.
     * @params: 
     *     - stream: the stream in which the class instance will be written
     */
    pub def toStream (self, dmut stream: &StringStream)-> void {
        let started = DcopyMap::_yrt_dcopy_map_is_started ();
        {
            let dmut res = DcopyMap::_yrt_find_dcopy_map (Runtime!{typeof self, &void}::_yrt_unsafe_cast (self));
            stream:.write (typeof (self)::typeid):.write ("("s8);
            if (res is null) {
                DcopyMap::_yrt_insert_dcopy_map (Runtime!{typeof self, &void}::_yrt_unsafe_cast (self), Runtime!{typeof self, &void}::_yrt_unsafe_cast (self));
                self.__stream__streamContent (alias stream);
            } else {
                stream:.write ("..."s8);
            }
            stream:.write (')'c8);
        } exit {
            if (!started) {
                DcopyMap::_yrt_purge_dcopy_map ();
            } 
        }
    }
    
}

/**
 * A stringstream is used to write content to a string in a more efficient manner than concatenation.
 */
pub class @final StringStream {

    let dmut _content = Vec!{c8}::new ();
    
    let dmut _entabing = Vec!{[c8]}::new ();

    let mut _willEntab = false;
    
    /**
     * Create an empty stringstream
     */
    pub self () {}

    /**
     * Stores a list of entabing string, and write them at the beginning of each new line.
     * @params: 
     *    - txt: the text to write at the beginning of every new line.
     * @example: 
     * ==================
     * let dmut str = StringStream::new ();
     * 
     * str:.write ("Array {\n");
     * str:.entabing (); // write "\t" at the beginning of new line from now on
     * for i in 0 .. 10 {
     *     str:.write (i, "\n"); // writes \t i \n
     * }
     * 
     * str:.detabing ();
     * str:.write ("}"); 
     * ==================
     */
    pub def entabing (mut self, txt : [c8] = "\t"s8) {
        self._entabing:.push (txt);
    }

    /**
     * Stop the current entabing (if there is any, does nothing otherwise).
     */
    pub def detabing (mut self) {
        self._entabing:.pop ()?;
    }
    
    /**
     * Write a c8 into the stream.
     * @params: 
     *     - c: the c8 to append at the end of the stream.
     */
    pub def write (mut self, c : c8) -> dmut &StringStream {                
        if self._willEntab {
            for j in self._entabing {
                for z in j {
                    self._content:.push (z);
                }
            }
            self._willEntab = false;
        }
        
        self._content:.push (c);
        if (c == '\n'c8) {
            self._willEntab = true;
        }
        alias self
    }

    /**
     * Write a string in utf8 into the stream.
     * @params: 
     *     - c: the string to append at the end of the stream.
     */
    pub def write {T of [U], U of c8} (mut self, c : T) -> dmut &StringStream {
        for i in c {
            if self._willEntab {
                for j in self._entabing {
                    for z in j {
                        self._content:.push (z);
                    }
                }
                self._willEntab = false;
            }
            if i != '\u{0}'c8 {
                self._content:.push (i);
            }
            if (i == '\n'c8) {
                self._willEntab = true;
            }
        };
        alias self
    }

    /**
     * Write a element in the stream
     * @info: the element must be convertible to a [c8] using `std::conv` module.
     * @params: 
     *    - c: the element to write that is neither a struct nor a class
     */
    pub def if (!is!T {struct U} && !is!T {class U}) write {T} (mut self, c : T) -> dmut &StringStream {
        import std::conv;
        self:.write (c.to![c8] ());
        alias self
    }

    /**
     * Write a pointer in the stream. 
     * @params: 
     *    - c: the pointer whose address to write in the stream.
     * @example: 
     * ===
     * let j = 123;
     * let i = &j;
     * 
     * let dmut stream = StringStream::new ();
     * 
     * // Every pointer can be casted to &void, but it has to be written explicitely
     * stream:.write (cast!{&void} (i));
     * ===
     */
    pub def write (mut self, c : &(void))-> dmut &StringStream {
        let val = Runtime!{&void, usize}::_yrt_unsafe_cast (c);
        import std::conv;
        self:.write (val.to!{[c8], "x"} ());
        alias self
    }
    
    /**
     * Assert error, the class must impl Streamable. 
     * @info: This method does not compile, it is here to give a proper error message.
     * @params: 
     *    - c: a class that does not implement Streamable.
     */
    pub def write {class T} (mut self, c : T) -> dmut &StringStream {
        cte assert (false, "class " ~ T::typeid ~ " does not impl Streamable");
    }

    /**
     * Write an object that implement the trait `Streamable` in the stream.
     * @params: 
     *    - c: a class instance that implements the trait `Streamable`.
     */
    pub def write {T impl Streamable} (mut self, c : T) -> dmut &StringStream {
        c.toStream (alias self);
        alias self
    }

    /**
     * Write a string in utf32 at the end of the stream.
     * @params: 
     *     - c: an utf32 string
     */
    pub def write {T of [U], U of c32} (mut self, c : T) -> dmut &StringStream {
        import std::conv;
        alias self:.write (c.to![c8] ())
    }
    
    /**
     * Write a slice into the stream.
     * @params: 
     *    - c: a slice of anything (that is streamable)
     */
    pub def if !isChar!{U} () write {T of [U], U} (mut self, c : T) -> dmut &StringStream {
        let mut j = 0us;        
        self:.write ('['c8);
        for i in c {
            if (j != 0us) {
                self:.write (", "s8);                 
            }
            j += 1us;
            self:.write (i);            
        }
        self:.write (']'c8);        
        alias self
    }

    /**
     * Write multiple element into the stream. 
     */
    pub def write {F, T...} (mut self, f : F, r : T) -> dmut &StringStream {
        self:.write (f);
        cte if (is!T {Z of (U,), U...}) {
            for i in r
                self:.write (i);
        } else {
            self:.write (r);
        }
        alias self
    }

    /**
     * Write multiple element into the stream, and add a line return afterwards.
     */
    pub def writeln {F, T...} (mut self, f : F, r : T) -> dmut &StringStream {
        self:.write (f);
        cte if (is!T {Z of (U,), U...}) {
            for i in r
                self:.write (i);
        } else {
            self:.write (r);
        }
        self:.write ("\n");
        alias self
    }

    /**
     * Write an element in the stream and add a line return afterwards.
     */
    pub def writeln {F} (mut self, f : F)-> dmut &StringStream {
        self:.write (f);
        self:.write ("\n");
        alias self
    }

    /**
     * Append a line return at the end of the stream.
     */
    pub def writeln (mut self)-> dmut &StringStream {
        self:.write ("\n");
        alias self
    }
    
    /**
     * Write a tuple into the stream.
     * @params: 
     *    - a: a tuple of streamable values.
     */
    pub def write {T of (U,), U...} (mut self, a : T) -> dmut &StringStream {
        self:.write ('('c8);
        let mut j = 0;
        for i in a {
            if j != 0 {
                self:.write (','c8);
            }
            self:.write (i);
            j += 1;
        }        
        if (j == 1) self:.write (','c8);
        self:.write (')'c8);
        alias self
    }

    /**
     * Write an option type into the stream.
     * @params: 
     *     - a: an option of a streamable value.
     */
    pub def write {T} (mut self, a : T?) -> dmut &StringStream {
        match a {
            Ok  (x:_)   => self:.write ("Ok("s8, x, ')'c8);
            Err (msg:_) => self:.write ("Err("s8, msg, ')'c8);
            Err ()      => self:.write ("Err()"s8);
        }
        alias self
    }

    /**
     * Write an struct into the stream. Write the typename of the struct followed by the value of its field between parentheses.
     * @info: all field of the struct must be streamable to be streamable.
     * @params: 
     *     - a: a streamable struct
     */
    pub def write {struct T} (mut self, a : T) -> dmut &StringStream {
        self:.write (T::typeid, '('c8);
        cte if (typeof (__pragma!tupleof (a))::arity > 0us) {
            let mut j = 0;
            for i in __pragma!tupleof (a) {
                if (j != 0) self:.write (", "s8);
                self:.write (i);
                j += 1;
            }
        }
        self:.write (')'c8);
        alias self
    }
    
    /**
     * @returns: the content of the stream, in a utf8 string.
     * @complexity: O(1)
     */
    pub def opIndex (self) -> [c8] {
        self._content []
    }

    /**
     * Clear the content of the stream. 
     * @example: 
     * ===
     * import std::stream;
     * 
     * let dmut stream = StringStream::new ();
     * stream:.write ("Some content");
     * stream:.clear ();
     * 
     * assert (stream[] == ""s8);
     * ===
     */
    pub def clear (mut self) {
        self._content:.clear ();
    }
    
    impl std::stream::Streamable {

        /**
         * Write the content of the stream inside another stream.
         */
        pub over toStream (self, dmut stream: &StringStream) {
            stream:.write (self[]);
        }
        
    }
    
}
