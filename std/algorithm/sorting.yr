/**
 * Module containing generic sorting algorithms.
 * @authors: Emile Cadorel
 * @licence: GPLv3
 */

mod std::algorithm::sorting;

import core::duplication;
import core::exception;
import std::stream, std::rand;


/**
 * Sort the slice `a` using the predicate x < y.
 * <br>
 * This function implements the quick sort algorithm.
 * @params: 
 *    - a: the slice to sort
 * @returns: the result of the sort
 * @example:
 * ===
 * let a = [4, 65, 2, -31, 0, 99, 2, 83, 782, 1];
 * let b = sort (a);
 *
 * assert (a == [4, 65, 2, -31, 0, 99, 2, 83, 782, 1]);
 * assert (b == [-31, 0, 1, 2, 2, 4, 65, 83, 99, 782]);
 * ===
 */
pub def sort {T of [U], U} (a : T)-> mut [mut U] {
    let mut result : mut [mut U] = copy a;
    quicksort_simple!{T} (alias result);

    alias result
}


/**
 * Sort the slice `a` using the predicate `F`.
 * <br>
 * This function implements the quick sort algorithm.
 * @params: 
 *    - a: the slice to sort
 * @returns: the result of the sorting
 * @example:
 * ===
 * let a = [4, 65, 2, -31, 0, 99, 2, 83, 782, 1];
 * let b = sort!{|x,y| x > y} (a);
 *
 * assert (a == [4, 65, 2, -31, 0, 99, 2, 83, 782, 1]);
 * assert (b == [782, 99, 83, 65, 4, 2, 2, 1, 0, -31]);
 * ===
 * @warning: if the predicate is inconsistent, the return result will not be sorted
 * ===
 * let a = [4, 65, 2, -31, 0, 99, 2, 83, 782, 1];
 * let b = sort!{|x, y| x >= y} (a); // strict operator should be used '<', '>' for example
 * 
 * println (b); // [782, 65, 2, -31, 0, 99, 2, 83, 4, 1]
 * assert (b != [782, 99, 83, 65, 4, 2, 2, 1, 0, -31]);
 * ===
 */
pub def sort {F : fn (U, U)-> bool, T of [U], U} (a : T)-> mut [mut U] {
    let mut result : mut [mut U] = copy a;
    quicksort!{F, T} (alias result);

    alias result
}


/**
 * Implementation of the quicksort algorithm.
 * @params: 
 *    - a: the slice to sort 
 * @templates:
 *    - F: the predicate to use to sort the array
 */
def quicksort {F : fn (U, U)-> bool, T of [U], U} (mut a : mut [mut U]) {
    if (a.len < 2us) return {};

    let pivot = a[a.len / 2us];
    let mut i = 0us, mut j = a.len - 1us;
    loop {
        while (F (a[i], pivot)) {
            if (i == a.len) return {}
            i += 1us;
        }
        
        while (F (pivot, a[j])) {
            if (j == 0us) return {}
            j -= 1us;
        }
        
        if (i >= j) break {}

        let temp = a[i];
        a[i] = a[j];
        a[j] = temp;        

        i += 1us;
        j -= 1us;
    }

    quicksort (a [0us .. i]);
    quicksort (a [i .. $]);
}

/** 
 * Quick sort without predicate.
 * @params:
 *   - a: the slice to sort
 */
def quicksort_simple {T of [U], U} (mut a : mut [mut U]) {
    if (a.len < 2us) return {};
    
    let pivot = a[a.len / 2us];
    let mut i = 0us, mut j = a.len - 1us;
    loop {
        while (a[i] < pivot) i += 1us;                
        while (pivot < a[j]) j -= 1us;
        
        if (i >= j) break {}

        let temp = a[i];
        a[i] = a[j];
        a[j] = temp;        

        i += 1us;
        j -= 1us;
    }

    quicksort_simple (a [0us .. i]);
    quicksort_simple (a [i .. $]);
}
