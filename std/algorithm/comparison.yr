mod std::algorithm::comparison;

/**
 * @returns: the maximal value between a and b
 * @example: 
 * =============
 * assert (max (1, 2) == 2);
 * assert (max (9, 3, 1, 4, 8) == 9);
 * =============
 */
pub def max {T, U...} (a : T, b : U) -> T {
    cte if ((U,)::arity != 1u32) {
        let mut current = a;
        for i in b {
            if (current < i) {
                current = i;
            }
        }
        return current;
    } else {
        if (a < b) { b }
        else { a }
    }
}

/**
 * @returns: the maximal value between a and b
 * @example: 
 * =============
 * assert (min (1, 2) == 1);
 * assert (min (9, 3, 1, 4, 8) == 1);
 * =============
 */
pub def min {T, U...} (a : T, b : U) -> T {
    cte if ((U,)::arity != 1u32) {
        let mut current = a;
        for i in b {
            if (i < current) {
                current = i;
            }
        }
        
        return current;
    } else {
        if (a < b) { a }
        else { b }
    }
}

/**
 * @returns: min (max (val, low), up)
 */
pub def clamp {T} (val : T, low : T, up : T) -> T {
    min (max (val, low), up)
}

/**
 * @returns: true if val is in the tuple x
 * @info: this function ignore the comparison that cannot be made (static typing verification)
 * @complexity: O (n), with n = |U| + 1
 * @example: 
 * ==============
 * let v = 1;
 * assert (v.among ('r', 2, "test", 1));
 * ==============
 */
pub def among {T, U...} (val : T, x : U) -> bool {
    for i in x {
        cte if (__pragma!compile ({val == i;})) {
            if (val == i) return true;
        } else {
            i; // to ignore it
            val; // to ignore it
        }
    }
    return false;
}

/**
 * Get the first argument that passes the predicates
 * @returns: the first argument for which F (x) == true, or (U?)::err otherwise
 * @params: 
 *   - a: an argument to test
 *   - alternatives: the alternatives to test if F(a) is false
 * @complexity: O (n), with n = |T| + 1
 * @example: 
 * ===============
 * let x = either!(|x| => x > 2) (1, 2, 3);
 * match x {
 *    Ok (z : i32) => 
 *        assert (z == 3);
 * }
 */
pub def either {F : fn (U)-> bool, U, T...} (a : U, alternatives : T) -> (U)? {
    if (F (a)) { return a?; }
    for i in alternatives {
        if (F (i)) {
            return i?;
        }
    }
    return (U?)::err;
}


