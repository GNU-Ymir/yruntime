/**
 * Module that imports every algorithm modules: 
 *  - <a href="./std_algorithm_comparison.html">comparison</a>
 *  - <a href="./std_algorithm_iteration.html">iteration</a>
 *  - <a href="./std_algorithm_searching.html">searching</a>
 *  - <a href="./std_algorithm_sorting.html">sorting</a>
 * <br>
 * Many functions of the sub modules of `std::algorithm` uses predicates as template parameter. Predicate are callable function that are completly known at compile time (e.g. lambda function).
 * @example: 
 * ===
 * import std::algorithm::_;
 *
 * def geq (a : i32, b : i32) -> bool {
 *      a > b
 * }
 * 
 * let a = [/* ... */];
 * let res = a.sort!geq (); // predicate from function name
 * let res2 = a.sort!{|x, y| => x > y} (); // predicate from lambda function
 * ===
 * @Authors: Emile Cadorel
 * @License: GPLv3
 */

mod std::algorithm::_;

pub import std::algorithm::sorting;
pub import std::algorithm::comparison;
pub import std::algorithm::iteration;
pub import std::algorithm::searching;
