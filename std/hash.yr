/**
 * This module implements hash function to convert any types into a
 * u64, so they can be compared and used as key elements in
 * collections. All the hash functions are called `hash`, so there is
 * no difference when computing the hash of a value, no matter the
 * type of this said value.
 *
 * @Authors: Emile Cadorel
 * @License: GPLv3
 * <hr>
 * @example: 
 * ===
 * import std::hash;
 *
 * class A {
 *     let i : i32;
 * 
 *     pub self (i : i32) with i = i {}
 * 
 *     // Hashable trait implements a standard behavior
 *     impl Hashable; 
 * }
 *
 * // All ymir standard types are hashable
 * let h_i = hash (89);
 * let h_f = hash (128.983f);
 * 
 * // Because class A implements Hashable trait it can be hashed
 * let h_a = hash (A::new (12));
 * let h_b = hash (A::new (12));
 * 
 * // Hash guarantees that all equal values have the same hash when using standard behavior
 * assert (h_a == h_b);
 * ===
 *
 * @warning:
 * Hash function cannot guarantee that two unequal value don't have
 * the same hash value. There is a finite number of u64, but an
 * unfinite number of possible values, so this behavior is just
 * impossible to have. However, the default hash function was choosed to be
 * relatively collision safe in general (this is the same function
 * used to hash values in python).
 */
 
mod std::hash;

/**
 * This trait is used to hash class instances. 
 * @example: 
 * ============
 * import std::hash;
 * 
 * class MyHashableClass {
 *     let _name : [c32];
 *  
 *     pub self (name : [c32]) with _name = name {}
 * 
 *     // Hashable trait have a standard behavior
 *     impl std::hash::Hashable {
 * 
 *          // But we can always change it if we want
 *          pub over hash (self)-> u64 {
 *              hash (self._name)
 *          }
 *     }
 * } 
 * 
 * let obj = MyHashableClass::new ("foo"s8);
 * 
 * // Because the class only hash the field name, then it is equal to the hash of the same string
 * assert (hash (obj) == hash ("foo"s8));
 * ============
 */
pub trait Hashable {

    /**
     * Transform an object into a u64.
     * By default, it hashes all the fields of the class. If the class has an ancestor, and that ancestor is hashable, it is also hashed. If the ancestor class is not hashable it is simply ignored.
     * @warning: all the fields of the class must be hashable for this function to compile.
     * @complexity: O (n), with n = recursive number of field of the class 
     */
    pub def hash (self)-> u64 {
        let mut hash_value = cte if (__pragma!compile ({hash (self::super);})) {
            self::super.hash ()
        } else { 0x345678u64 }
        
        let mut mult = 31u64;
        mult;
        for i in __pragma!local_tupleof (self) {
            hash_value = (hash_value ^ hash (i)) * mult;
            mult += (82520u64 + cast!u64 (typeof (__pragma!local_tupleof (self))::arity * 2us));
        }
        
        hash_value
    }
}

pub {

    
    /**
     * Transform a string into a u64
     * @complexity: O(n), with n = str.len
     */
    def hash (str : [c32]) -> u64 {
        let p = 31u64;
        let m = 1_000_000_009u64;
        let mut hash_value = 0u64;
        let mut p_pow = 1u64;
        for c in str {
            hash_value = (hash_value + (cast!u64 (c) + 1u64) * p_pow) % m;
            p_pow = (p_pow * p) % m;
        }
        hash_value
    }

    /**
     * Transform a string into a u64
     * @complexity: O(n), with n = str.len
     */
    def hash (str : [c8]) -> u64 {
        let p = 31u64;
        let m = 1_000_000_009u64;
        let mut hash_value = 0u64;
        let mut p_pow = 1u64;
        for c in str {
            hash_value = (hash_value + (cast!u64 (c) + 1u64) * p_pow) % m;
            p_pow = (p_pow * p) % m;
        }
        hash_value
    }

    /**
     * Transform a char into a u64
     * @complexity: O(1)
     */
    def hash (c : c8) -> u64 {
        cast!u64 (c)
    }

    /**
     * Transform a char into a u64
     * @complexity: O(1)
     */
    def hash (c : c32) -> u64 {
        cast!u64 (c)
    }

    /**
     * Transform a isize into a u64
     * @complexity: O (1)
     */
    def hash (i : isize) -> u64 {
        cast!u64 (i)
    }

    /**
     * Transform a usize into a u64
     * @complexity: O (1)
     */
    def hash (i : usize) -> u64 {
        cast!u64 (i)
    }

    /**
     * Transform a i64 into a u64
     * @complexity: O (1)
     */
    def hash (i : i64) -> u64 {
        cast!u64 (i)
    }

    /**
     * Transform a u64 into a u64
     * @complexity: O (1)
     */
    def hash (i : u64) -> u64 {
        i
    }

    /**
     * Transform a i32 into a u64
     * @complexity: O (1)
     */
    def hash (i : i32) -> u64 {
        cast!u64 (i)
    }

    /**
     * Transform a u32 into a u64
     * @complexity: O (1)
     */
    def hash (i : u32) -> u64 {
        cast!u64 (i)
    }

    /**
     * Transform a i16 into a u64
     * @complexity: O (1)
     */
    def hash (i : i16) -> u64 {
        cast!u64 (i)
    }

    /**
     * Transform a u16 into a u64
     * @complexity: O (1)
     */
    def hash (i : u16) -> u64 {
        cast!u64 (i)
    }

    /**
     * Transform a i8 into a u64
     * @complexity: O (1)
     */
    def hash (i : i8) -> u64 {
        cast!u64 (i)
    }

    /**
     * Transform a u8 into a u64
     * @complexity: O (1)
     */
    def hash (i : u8) -> u64 {
        cast!u64 (i)
    }

    /**
     * Transform a bool into a u64
     * @complexity: O (1)
     */
    def hash (b : bool) -> u64 {
        if (b) 0u64
        else 1u64
    }

    /**
     * Transform a f32 into a hashed u64.
     * @complexity: O(1)
     */
    def hash (f : f32)-> u64 {
        @union
        struct
        | f : f32
        | i : i32 
         -> H;

        let r = H(f-> f);
        
        cast!u64 (r.i)
    }

    /**
     * Transform a f64 into a hashed u64.
     * @complexity: O(1)
     */
    def hash (f : f64)-> u64 {
        @union
        struct
        | f : f64
        | i : i64 
         -> H;

        let r = H(f-> f);
        
        cast!u64 (r.i)
    }
    
    /**
     * Transform a slice into a u64.
     * If the slice contains class instances, they must implement the trait Hashable for the function to compile.
     * @complexity: O (n), with n = a.len
     * @templates: 
     *    - U: a hashable type
     */
    def hash {T of [U], U} (a : T) -> u64 {
        let p = 31u64;
        let m = 1_000_000_009u64;
        let mut hash_value = 0u64;
        let mut p_pow = 1u64;
        for c in a {
            hash_value = (hash_value + (hash (c) + 1u64) * p_pow) % m;
            p_pow = (p_pow * p) % m;
        }
        hash_value
    }

    /**
     * Transform an array into a u64.
     * If the array contains class instances, they must implement the trait Hashable for the function to compile.
     * @complexity: O (n), with n = a.len
     * @templates: 
     *    - U: a hashable type
     */
    def hash {T of [U ; N], U, N : usize} (a : T)-> u64 {
        hash (alias a)
    }
    
    /**
     * Transform a pointer into a u64.
     * @complexity: O (1)
     */
    def if (!is!(T) {class U}) hash {T of &(U), U} (x : T) -> u64 {
        Runtime::_yrt_ptr_to_u64 (x)
    }

    /**
     * Transform a class that implement the trait Hashable into a u64
     * @complexity: O (1), the real complexity depends on the method `hash` of the class
     */
    def hash {T impl std::hash::Hashable} (a : T) -> u64 {
        a.hash ()
    }

    /**
     * Transform a struct into a u64.
     * This transformation hash all the fields of the struct. If the struct contains objects, they must implement the trait Hashable for this function to compile.
     * @complexity: O (n), where n is the number of fields of the struct.
     */
    def hash {struct T} (a : T)-> u64 {
        let mut res = 0x345678u64;
        let mut mult = 31u64;
        mult;
        
        for i in __pragma!tupleof (a) {            
            res = (res ^ hash (i)) * mult;
            mult += (82520u64 + cast!u64 (typeof (__pragma!tupleof (a))::arity * 2us));
        }
        res
    }

    /**
     * Transform a tuple into a u64.
     * This transformation hash all the fields of the tuple. If the tuple contains objects, they must implement the trait Hashable for this function to compile.
     * @complexity: O (n), where n is the number of fields of the tuple.
     */
    def hash {T...} (a : (T,))-> u64 {
        let mut res = 0x345678u64;
        let mut mult = 31u64;
        mult;
        
        for i in a {            
            res = (res ^ hash (i)) * mult;
            mult += (82520u64 + cast!u64 (typeof (a)::arity * 2us));
        }
        res
    }
    
    
}
